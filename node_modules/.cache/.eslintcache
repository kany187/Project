[{"D:\\EINC\\Project\\src\\index.js":"1","D:\\EINC\\Project\\src\\reportWebVitals.js":"2","D:\\EINC\\Project\\src\\App.js":"3","D:\\EINC\\Project\\src\\Store\\Store.js":"4","D:\\EINC\\Project\\src\\GlobalState\\CreateSlice.js":"5","D:\\EINC\\Project\\src\\GlobalState\\UserSideSlice.js":"6","D:\\EINC\\Project\\src\\Router\\Router.js":"7","D:\\EINC\\Project\\src\\GlobalState\\InitialState.js":"8","D:\\EINC\\Project\\src\\Pages\\Login\\Login.jsx":"9","D:\\EINC\\Project\\src\\Pages\\SignUp\\SignUp.jsx":"10","D:\\EINC\\Project\\src\\Pages\\UserSide\\Profile\\Profile.jsx":"11","D:\\EINC\\Project\\src\\Pages\\UserSide\\AllGoalsOfOrganization\\DetailPage.jsx":"12","D:\\EINC\\Project\\src\\Pages\\UserSide\\MyGoal\\Index.jsx":"13","D:\\EINC\\Project\\src\\Pages\\UserSide\\GoalsStatus\\Index.jsx":"14","D:\\EINC\\Project\\src\\Pages\\UserSide\\VerificationGoal\\DetailPage.jsx":"15","D:\\EINC\\Project\\src\\Pages\\UserSide\\GoalsStatus\\StatusDetailPage.jsx":"16","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\OrganizationLinks\\Index.jsx":"17","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\GoalsDetailPage\\Index.jsx":"18","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\CreateGoals\\Index.jsx":"19","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\Dashboard\\Dashboard.jsx":"20","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\UpdateGoals.jsx\\Index.jsx":"21","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\CreateGoals\\Index.jsx":"22","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\Dashboard\\Dashboard.jsx":"23","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\GoalsDetailPage\\Index.jsx":"24","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\SubmitGoals\\Index.jsx":"25","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\UpdateGoals.jsx\\Index.jsx":"26","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\SubmitGoals\\Index.jsx":"27","D:\\EINC\\Project\\src\\Pages\\UserSide\\AllGoalsOfOrganization\\index.jsx":"28","D:\\EINC\\Project\\src\\Pages\\UserSide\\VerificationGoal\\index.jsx":"29","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\Categories\\index.jsx":"30","D:\\EINC\\Project\\src\\Pages\\UserSide\\Feed\\index.jsx":"31","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\OrganizationUsers\\index.jsx":"32","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\Categories\\index.jsx":"33","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\OrganizationUsers\\index.jsx":"34","D:\\EINC\\Project\\src\\Config\\FirebaseConfig.js":"35","D:\\EINC\\Project\\src\\Pages\\UserSide\\Profile\\UserDetailCard.jsx":"36","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\OrganizationUsers\\UserList.jsx":"37","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\SubmitGoals\\SubmitGoalsTable.jsx":"38","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\Sidebar.jsx":"39","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\SubmitGoals\\SubmitGoalsTable.jsx":"40","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\OrganizationUsers\\UserList.jsx":"41","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\CreateGoals\\CreateGoals.jsx":"42","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\GoalsDetailPage\\GoalsDetail.jsx":"43","D:\\EINC\\Project\\src\\Components\\AlertPopup.jsx":"44","D:\\EINC\\Project\\src\\Components\\LoginForm.jsx":"45","D:\\EINC\\Project\\src\\Components\\SignupForm.jsx":"46","D:\\EINC\\Project\\src\\Layout\\Navbar.jsx":"47","D:\\EINC\\Project\\src\\Components\\SearchInput.jsx":"48","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\Dashboard\\GoalsTable.jsx":"49","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\Categories\\CategoryList.jsx":"50","D:\\EINC\\Project\\src\\Pages\\UserSide\\Feed\\UsersGoals.jsx":"51","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\Categories\\CategoryList.jsx":"52","D:\\EINC\\Project\\src\\Pages\\UserSide\\AllGoalsOfOrganization\\GoalsTabs.jsx":"53","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\SubmitGoals\\ApprovedForm.jsx":"54","D:\\EINC\\Project\\src\\Components\\Button\\Button.jsx":"55","D:\\EINC\\Project\\src\\Components\\InputPopup.jsx":"56","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\Dashboard\\GoalsTable.jsx":"57","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\GoalsDetailPage\\GoalsDetail.jsx":"58","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\OrganizationLinks\\MainOrganization.jsx":"59","D:\\EINC\\Project\\src\\Pages\\UserSide\\GoalsStatus\\StatusTabs.jsx":"60","D:\\EINC\\Project\\src\\Pages\\UserSide\\MyGoal\\DonutChart.jsx":"61","D:\\EINC\\Project\\src\\Pages\\UserSide\\MyGoal\\MyGoalsList.jsx":"62","D:\\EINC\\Project\\src\\Pages\\UserSide\\MyGoal\\LineChart.jsx":"63","D:\\EINC\\Project\\src\\Pages\\UserSide\\GoalsStatus\\GoalCard.jsx":"64","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\OrganizationLinks\\AddOrgPopUp.jsx":"65","D:\\EINC\\Project\\src\\Pages\\UserSide\\Delete\\index.js":"66"},{"size":588,"mtime":1637029558933,"results":"67","hashOfConfig":"68"},{"size":375,"mtime":1637029558934,"results":"69","hashOfConfig":"68"},{"size":3237,"mtime":1637029558519,"results":"70","hashOfConfig":"68"},{"size":389,"mtime":1637029558933,"results":"71","hashOfConfig":"68"},{"size":7718,"mtime":1637029558806,"results":"72","hashOfConfig":"68"},{"size":2014,"mtime":1637029558807,"results":"73","hashOfConfig":"68"},{"size":9393,"mtime":1637083731095,"results":"74","hashOfConfig":"68"},{"size":908,"mtime":1637029558806,"results":"75","hashOfConfig":"68"},{"size":1657,"mtime":1637029558842,"results":"76","hashOfConfig":"68"},{"size":3935,"mtime":1637029558843,"results":"77","hashOfConfig":"68"},{"size":1812,"mtime":1637029558920,"results":"78","hashOfConfig":"68"},{"size":11490,"mtime":1637029558912,"results":"79","hashOfConfig":"68"},{"size":3188,"mtime":1637029558918,"results":"80","hashOfConfig":"68"},{"size":985,"mtime":1637029558916,"results":"81","hashOfConfig":"68"},{"size":33138,"mtime":1637029558922,"results":"82","hashOfConfig":"68"},{"size":8998,"mtime":1637029558916,"results":"83","hashOfConfig":"68"},{"size":252,"mtime":1637029558808,"results":"84","hashOfConfig":"68"},{"size":2123,"mtime":1637029558813,"results":"85","hashOfConfig":"68"},{"size":4034,"mtime":1637029558811,"results":"86","hashOfConfig":"68"},{"size":5259,"mtime":1637029558812,"results":"87","hashOfConfig":"68"},{"size":5193,"mtime":1637029558826,"results":"88","hashOfConfig":"68"},{"size":3973,"mtime":1637029558828,"results":"89","hashOfConfig":"68"},{"size":4976,"mtime":1637029558829,"results":"90","hashOfConfig":"68"},{"size":2103,"mtime":1637029558830,"results":"91","hashOfConfig":"68"},{"size":5825,"mtime":1637029558814,"results":"92","hashOfConfig":"68"},{"size":5251,"mtime":1637029558841,"results":"93","hashOfConfig":"68"},{"size":6008,"mtime":1637029558832,"results":"94","hashOfConfig":"68"},{"size":4997,"mtime":1637029558913,"results":"95","hashOfConfig":"68"},{"size":4197,"mtime":1637029558932,"results":"96","hashOfConfig":"68"},{"size":705,"mtime":1637029558810,"results":"97","hashOfConfig":"68"},{"size":3654,"mtime":1637029558915,"results":"98","hashOfConfig":"68"},{"size":1085,"mtime":1637029558813,"results":"99","hashOfConfig":"68"},{"size":736,"mtime":1637029558827,"results":"100","hashOfConfig":"68"},{"size":1110,"mtime":1637029558832,"results":"101","hashOfConfig":"68"},{"size":650,"mtime":1637029558805,"results":"102","hashOfConfig":"68"},{"size":11814,"mtime":1637029558921,"results":"103","hashOfConfig":"68"},{"size":2067,"mtime":1637029558831,"results":"104","hashOfConfig":"68"},{"size":16019,"mtime":1637029558833,"results":"105","hashOfConfig":"68"},{"size":7748,"mtime":1637029558809,"results":"106","hashOfConfig":"68"},{"size":17064,"mtime":1637029558814,"results":"107","hashOfConfig":"68"},{"size":2138,"mtime":1637029558813,"results":"108","hashOfConfig":"68"},{"size":7384,"mtime":1637029558811,"results":"109","hashOfConfig":"68"},{"size":3722,"mtime":1637029558830,"results":"110","hashOfConfig":"68"},{"size":1606,"mtime":1637029558771,"results":"111","hashOfConfig":"68"},{"size":2484,"mtime":1637029558792,"results":"112","hashOfConfig":"68"},{"size":5479,"mtime":1637029558793,"results":"113","hashOfConfig":"68"},{"size":15821,"mtime":1637083523565,"results":"114","hashOfConfig":"68"},{"size":314,"mtime":1637029558792,"results":"115","hashOfConfig":"68"},{"size":3799,"mtime":1637029558829,"results":"116","hashOfConfig":"68"},{"size":3969,"mtime":1637029558826,"results":"117","hashOfConfig":"68"},{"size":13860,"mtime":1637029558914,"results":"118","hashOfConfig":"68"},{"size":3991,"mtime":1637029558810,"results":"119","hashOfConfig":"68"},{"size":4274,"mtime":1637029558912,"results":"120","hashOfConfig":"68"},{"size":2186,"mtime":1637029558814,"results":"121","hashOfConfig":"68"},{"size":626,"mtime":1637029558772,"results":"122","hashOfConfig":"68"},{"size":1672,"mtime":1637029558772,"results":"123","hashOfConfig":"68"},{"size":3602,"mtime":1637029558812,"results":"124","hashOfConfig":"68"},{"size":3697,"mtime":1637029558812,"results":"125","hashOfConfig":"68"},{"size":3971,"mtime":1637082055863,"results":"126","hashOfConfig":"68"},{"size":2767,"mtime":1637029558917,"results":"127","hashOfConfig":"68"},{"size":683,"mtime":1637029558918,"results":"128","hashOfConfig":"68"},{"size":6514,"mtime":1637029558919,"results":"129","hashOfConfig":"68"},{"size":1876,"mtime":1637029558919,"results":"130","hashOfConfig":"68"},{"size":1299,"mtime":1637029558916,"results":"131","hashOfConfig":"68"},{"size":2237,"mtime":1637042302463,"results":"132","hashOfConfig":"68"},{"size":0,"mtime":1637083806746,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"1iwdl3i",{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"136"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"136"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"136"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"136"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"136"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"136"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"136"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"136"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"136"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"136"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"136"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"136"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"136"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"136"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"136"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"136"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"136"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"136"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"136"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"136"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"136"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"136"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"136"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"136"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"136"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"136"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"136"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"136"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"136"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"136"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"136"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"136"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"136"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"136"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\EINC\\Project\\src\\index.js",[],["301","302"],"D:\\EINC\\Project\\src\\reportWebVitals.js",[],"D:\\EINC\\Project\\src\\App.js",["303"],"import React, { useEffect, useState } from 'react'\r\nimport AppRouter from './Router/Router'\r\nimport firebase from 'firebase'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { allOrganizations } from './GlobalState/CreateSlice'\r\nimport logo from './Assets/logo.png'\r\nimport { isLogin, setCurrentUser } from './GlobalState/CreateSlice'\r\nimport {setAllUsersWholeApp} from './GlobalState/UserSideSlice'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n// import { send } from 'emailjs-com'\r\nimport { init } from 'emailjs-com'\r\nimport './App.css'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection:'column',\r\n    position:'relative',\r\n    '& > * + *': {\r\n      marginLeft: '0px',\r\n    },\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n}))\r\n\r\nfunction App() {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  let auth = firebase.auth()\r\n  let db = firebase.database()\r\n  // loading\r\n  let [loading, setLoading] = useState(true)\r\n\r\n  const selector = useSelector((state) => {\r\n    return state\r\n  })\r\n  const { goalReducer } = selector\r\n  // console.log(goalReducer)\r\n  // const checkUserLogin = () => {\r\n  //   setLoading(true)\r\n  // }\r\n  useEffect(() => {\r\n    init('user_y6bbBvCNzLoq9C7FeZYK0')\r\n    setLoading(true)\r\n    auth.onAuthStateChanged((user) => {\r\n      if (user) {\r\n        const dbRef = db.ref('users/' + user.uid)\r\n        dbRef.on('value', (snapshot) => {\r\n          snapshot.forEach((usersData) => {\r\n            const userData = usersData.val()\r\n            const userKey = usersData.key\r\n            userData.pushId = userKey \r\n            dispatch(setCurrentUser(userData))\r\n          })\r\n          dispatch(isLogin(true))\r\n          setLoading(false)\r\n        })\r\n      } else {\r\n        setLoading(false)\r\n      }\r\n    })\r\n    db.ref('organizations').on('value', (snapshot) => {\r\n      let organizationsArry = []\r\n      snapshot.forEach((data) => {\r\n        const getData = data.val()\r\n        const getId = data.key\r\n        getData.id = getId\r\n        organizationsArry.push(getData)\r\n      })\r\n      dispatch(allOrganizations(organizationsArry))\r\n    })\r\n    db.ref('users/').on('value',((snapshot)=>{\r\n      const usersArray = []\r\n      snapshot.forEach((users)=>{\r\n        users.forEach((user)=>{\r\n          const allUsers = user.val()\r\n          const allUsersKey = user.key\r\n          allUsers.pushId = allUsersKey\r\n          usersArray.push(allUsers)\r\n        // console.log(user.val(),user.key)\r\n        })\r\n        // console.log(users.val(),users.key)\r\n      })\r\n      dispatch(setAllUsersWholeApp(usersArray))\r\n    }))\r\n    // checkUserLogin();\r\n  }, [])\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className='loaderCenter'>\r\n        <div className={classes.root}>\r\n          <img  className='appLogo' src={logo} alt='logo' />\r\n          <br />\r\n          <CircularProgress color=\"secondary\" />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AppRouter\r\n        isUser={goalReducer.isUserLogin}\r\n        cUser={goalReducer.currentUser}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","D:\\EINC\\Project\\src\\Store\\Store.js",["304"],"import {configureStore} from '@reduxjs/toolkit'\r\nimport {goalReducer} from '../GlobalState/CreateSlice'\r\nimport {userReducer} from '../GlobalState/UserSideSlice'\r\nimport logger from 'redux-logger'\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer:{\r\n     goalReducer,\r\n     userReducer,\r\n    //  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\r\n    }\r\n})","D:\\EINC\\Project\\src\\GlobalState\\CreateSlice.js",[],"D:\\EINC\\Project\\src\\GlobalState\\UserSideSlice.js",[],"D:\\EINC\\Project\\src\\Router\\Router.js",["305","306"],"import {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport Categories from \"../Pages/DashboardScreens/WithOrganizations/Categories\";\r\nimport Index from \"../Pages/DashboardScreens/WithOrganizations/CreateGoals/Index\";\r\nimport Dashboard from \"../Pages/DashboardScreens/WithOrganizations/Dashboard/Dashboard\";\r\nimport GoalsDetail from \"../Pages/DashboardScreens/WithOrganizations/GoalsDetailPage/Index\";\r\nimport Organizations from \"../Pages/DashboardScreens/OrganizationLinks/Index\";\r\nimport OrganizationUsers from \"../Pages/DashboardScreens/WithOrganizations/OrganizationUsers\";\r\nimport UpdateGoals from \"../Pages/DashboardScreens/WithOrganizations/UpdateGoals.jsx/Index\";\r\nimport Login from \"../Pages/Login/Login\";\r\nimport Signup from \"../Pages/SignUp/SignUp\";\r\nimport WithoutOrganizationDashboard from \"../Pages/DashboardScreens/WithOutOrganizations/Dashboard/Dashboard\";\r\nimport WithOutOrgGoalsCreate from \"../Pages/DashboardScreens/WithOutOrganizations/CreateGoals/Index\";\r\nimport WithoutOrgCategories from \"../Pages/DashboardScreens/WithOutOrganizations/Categories\";\r\nimport WithoutOrgGoalDetail from \"../Pages/DashboardScreens/WithOutOrganizations/GoalsDetailPage/Index\";\r\nimport WitoutOrgUpdateGoals from \"../Pages/DashboardScreens/WithOutOrganizations/UpdateGoals.jsx/Index\";\r\nimport WithoutOrganizationUsers from \"../Pages/DashboardScreens/WithOutOrganizations/OrganizationUsers\";\r\n// user side\r\nimport Profile from \"../Pages/UserSide/Profile/Profile\";\r\nimport AllGoalsOfOrganization from \"../Pages/UserSide/AllGoalsOfOrganization\";\r\nimport SubmitedGoals from \"../Pages/DashboardScreens/WithOrganizations/SubmitGoals/Index\";\r\nimport WithoutOrgSubmitedGoals from \"../Pages/DashboardScreens/WithOutOrganizations/SubmitGoals/Index\";\r\nimport MyAllGoals from \"../Pages/UserSide/MyGoal/Index\";\r\nimport DetailPage from \"../Pages/UserSide/AllGoalsOfOrganization/DetailPage\";\r\nimport VerificationPage from \"../Pages/UserSide/VerificationGoal\";\r\nimport StartGoalDetailPage from \"../Pages/UserSide/VerificationGoal/DetailPage\";\r\nimport GoalsStatus from \"../Pages/UserSide/GoalsStatus/Index\";\r\nimport StatusDetailPage from \"../Pages/UserSide/GoalsStatus/StatusDetailPage\";\r\nimport Feed from \"../Pages/UserSide/Feed\";\r\nimport Delete from \"../Pages/UserSide/Delete\";\r\n\r\nconst AppRouter = ({ isUser, cUser }) => {\r\n  // console.log(isUser,cUser)\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        {/* user side routes  */}\r\n        <Route exact path=\"/selec-goals\">\r\n          {/* <MyAllGoals /> */}\r\n          {isUser ? <MyAllGoals /> : <Login />}\r\n        </Route>\r\n        <Route exact path=\"/search-goals\">\r\n          {/* <AllGoalsOfOrganization /> */}\r\n          {isUser ? <AllGoalsOfOrganization /> : <Login />}\r\n        </Route>\r\n        <Route exact path=\"/feed\">\r\n          {/* <Feed /> */}\r\n\r\n          {isUser ? <Feed /> : <Login />}\r\n        </Route>\r\n        <Route exact path=\"/goals-status\">\r\n          {/* <GoalsStatus /> */}\r\n\r\n          {isUser ? <GoalsStatus /> : <Login />}\r\n        </Route>\r\n        <Route exact path=\"/goals-status/:id\">\r\n          {/* <StatusDetailPage /> */}\r\n\r\n          {isUser ? <StatusDetailPage /> : <Login />}\r\n        </Route>\r\n\r\n        <Route exact path=\"/mygoal-detail/:id\">\r\n          {/* <StartGoalDetailPage /> */}\r\n          {isUser ? <StartGoalDetailPage /> : <Login />}\r\n        </Route>\r\n        <Route exact path=\"/goal-detail/:id\">\r\n          <DetailPage />\r\n\r\n          {/* {isUser ? (\r\n            cUser.admin === true ? (\r\n              <Redirect to=\"/organizations\" />\r\n            ) : (\r\n              // <MyAllGoals />\r\n              <DetailPage />\r\n            )\r\n          ) : (\r\n            <Redirect to=\"/login\" />\r\n          )} */}\r\n        </Route>\r\n        <Route exact path=\"/profile\">\r\n          {/* <Profile /> */}\r\n          {isUser ? <Profile /> : <Login />}\r\n        </Route>\r\n        {/* admin side route  */}\r\n        <Route exact path=\"/organizations/:id/dashboard\">\r\n          {isUser ? (\r\n            cUser.admin === true ? (\r\n              <Dashboard />\r\n            ) : (\r\n              <Redirect to=\"/selec-goals\" />\r\n            )\r\n          ) : (\r\n            <Redirect to=\"/login\" />\r\n          )}\r\n        </Route>\r\n        <Route path=\"/login\">\r\n          {isUser ? <Redirect to=\"/selec-goals\" /> : <Login />}\r\n        </Route>\r\n        <Route exact path=\"/\">\r\n          {isUser ? (\r\n            // cUser.admin === true ? (\r\n            //   <Redirect to=\"/organizations\" />\r\n            // ) : (\r\n            <Redirect to=\"/selec-goals\" />\r\n          ) : (\r\n            // )\r\n            <Signup />\r\n          )}\r\n        </Route>\r\n        <Route exact path=\"/organizations/:id/create-goals\">\r\n          {isUser ? (\r\n            cUser.admin === true ? (\r\n              <Index />\r\n            ) : (\r\n              <Redirect to=\"/selec-goals\" />\r\n            )\r\n          ) : (\r\n            <Redirect to=\"/login\" />\r\n          )}\r\n        </Route>\r\n        <Route exact path=\"/organizations/:id/goals-detail/:goal\">\r\n          {isUser ? (\r\n            cUser.admin === true ? (\r\n              <GoalsDetail />\r\n            ) : (\r\n              <Redirect to=\"/selec-goals\" />\r\n            )\r\n          ) : (\r\n            <Redirect to=\"/login\" />\r\n          )}\r\n        </Route>\r\n        <Route exact path=\"/organizations/:id/edit-goal/:goal\">\r\n          {isUser ? (\r\n            cUser.admin === true ? (\r\n              <UpdateGoals />\r\n            ) : (\r\n              <Redirect to=\"/selec-goals\" />\r\n            )\r\n          ) : (\r\n            <Redirect to=\"/login\" />\r\n          )}\r\n        </Route>\r\n        <Route exact path=\"/organizations\">\r\n          {isUser ? (\r\n            cUser.admin === true ? (\r\n              <Organizations />\r\n            ) : (\r\n              // <Dashboard />\r\n              <Redirect to=\"/selec-goals\" />\r\n            )\r\n          ) : (\r\n            <Redirect to=\"/login\" />\r\n          )}\r\n        </Route>\r\n        <Route exact path=\"/organizations/:id/users\">\r\n          {isUser ? (\r\n            cUser.admin === true ? (\r\n              <OrganizationUsers />\r\n            ) : (\r\n              <Redirect to=\"/selec-goals\" />\r\n            )\r\n          ) : (\r\n            <Redirect to=\"/login\" />\r\n          )}\r\n        </Route>\r\n        <Route exact path=\"/organizations/:id/categories\">\r\n          {isUser ? (\r\n            cUser.admin === true ? (\r\n              <Categories />\r\n            ) : (\r\n              <Redirect to=\"/selec-goals\" />\r\n            )\r\n          ) : (\r\n            <Redirect to=\"/login\" />\r\n          )}\r\n        </Route>\r\n        <Route exact path=\"/organizations/:id/submit-goals\">\r\n          {isUser ? (\r\n            cUser.admin === true ? (\r\n              <SubmitedGoals />\r\n            ) : (\r\n              <Redirect to=\"/selec-goals\" />\r\n            )\r\n          ) : (\r\n            <Redirect to=\"/login\" />\r\n          )}\r\n        </Route>\r\n\r\n        {/* without organization routes  */}\r\n        <Route exact path=\"/without-organization/dashboard\">\r\n          {isUser ? (\r\n            cUser.admin === true ? (\r\n              <WithoutOrganizationDashboard />\r\n            ) : (\r\n              <Redirect to=\"/selec-goals\" />\r\n            )\r\n          ) : (\r\n            <Redirect to=\"/login\" />\r\n          )}\r\n        </Route>\r\n        <Route exact path=\"/without-organization/create-goals\">\r\n          {isUser ? (\r\n            cUser.admin === true ? (\r\n              <WithOutOrgGoalsCreate />\r\n            ) : (\r\n              <Redirect to=\"/selec-goals\" />\r\n            )\r\n          ) : (\r\n            <Redirect to=\"/login\" />\r\n          )}\r\n        </Route>\r\n        <Route exact path=\"/without-organization/categories\">\r\n          {isUser ? (\r\n            cUser.admin === true ? (\r\n              <WithoutOrgCategories />\r\n            ) : (\r\n              <Redirect to=\"/selec-goals\" />\r\n            )\r\n          ) : (\r\n            <Redirect to=\"/login\" />\r\n          )}\r\n        </Route>\r\n        <Route exact path=\"/without-organization/goals-detail/:goal\">\r\n          {isUser ? (\r\n            cUser.admin === true ? (\r\n              <WithoutOrgGoalDetail />\r\n            ) : (\r\n              <Redirect to=\"/selec-goals\" />\r\n            )\r\n          ) : (\r\n            <Redirect to=\"/login\" />\r\n          )}\r\n        </Route>\r\n        <Route exact path=\"/without-organization/edit-goal/:goal\">\r\n          {isUser ? (\r\n            cUser.admin === true ? (\r\n              <WitoutOrgUpdateGoals />\r\n            ) : (\r\n              <Redirect to=\"/selec-goals\" />\r\n            )\r\n          ) : (\r\n            <Redirect to=\"/login\" />\r\n          )}\r\n        </Route>\r\n        <Route exact path=\"/without-organization/users\">\r\n          {isUser ? (\r\n            cUser.admin === true ? (\r\n              <WithoutOrganizationUsers />\r\n            ) : (\r\n              <Redirect to=\"/selec-goals\" />\r\n            )\r\n          ) : (\r\n            <Redirect to=\"/login\" />\r\n          )}\r\n        </Route>\r\n        <Route exact path=\"/without-organization/submit-gaols\">\r\n          {isUser ? (\r\n            cUser.admin === true ? (\r\n              <WithoutOrgSubmitedGoals />\r\n            ) : (\r\n              <Redirect to=\"/selec-goals\" />\r\n            )\r\n          ) : (\r\n            <Redirect to=\"/login\" />\r\n          )}\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","D:\\EINC\\Project\\src\\GlobalState\\InitialState.js",[],"D:\\EINC\\Project\\src\\Pages\\Login\\Login.jsx",[],"D:\\EINC\\Project\\src\\Pages\\SignUp\\SignUp.jsx",[],"D:\\EINC\\Project\\src\\Pages\\UserSide\\Profile\\Profile.jsx",["307"],"import React, { useEffect } from \"react\";\r\nimport MenuAppBar from \"../../../Layout/Navbar\";\r\nimport UserDetailCard from \"./UserDetailCard\";\r\nimport \"./style.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport firebase from \"../../../Config/FirebaseConfig\";\r\nimport {\r\n  setAllUsers,\r\n  getCurrentUserFromOrganization,\r\n} from \"../../../GlobalState/UserSideSlice\";\r\n\r\nexport const getAllUserOfOrg = (parameter,dispatch,userDetail) => {\r\n  const db = firebase.database();\r\n  db.ref(parameter).on(\"value\", (snapshot) => {\r\n    var UsersArray = [];\r\n    var currentUserOrg = [];\r\n    snapshot.forEach((goals) => {\r\n      let getUsers = goals.val();\r\n      let getUserId = goals.key;\r\n      getUsers.orgMainId = getUserId;\r\n      UsersArray.push(getUsers);\r\n      if (getUsers.id === userDetail.id) {\r\n        currentUserOrg.push(getUsers);\r\n      }\r\n    });\r\n    dispatch(getCurrentUserFromOrganization(currentUserOrg));\r\n    dispatch(setAllUsers(UsersArray));\r\n  });\r\n};\r\n\r\nconst Profile = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const userDetail = useSelector((state) => {\r\n    return state.goalReducer.currentUser;\r\n  });\r\n\r\n  useEffect(() => {\r\n    // condition for  if user enrolled in any organization\r\n    if (userDetail.orgId !== \"\") {\r\n      //   get current user from organization\r\n      getAllUserOfOrg(`organizations/${userDetail.orgId}/users`,dispatch,userDetail);\r\n    } else {\r\n      //   get current user from without organization\r\n      getAllUserOfOrg(`withoutOrganization/users`,dispatch,userDetail);\r\n    }\r\n  }, []);\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"profile_container\">\r\n      <MenuAppBar />\r\n      <div className=\"profile_md\">\r\n        <UserDetailCard\r\n        userDetail={userDetail}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\EINC\\Project\\src\\Pages\\UserSide\\AllGoalsOfOrganization\\DetailPage.jsx",["308"],"import React from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport MenuAppBar from \"../../../Layout/Navbar\";\r\nimport firebase from \"../../../Config/FirebaseConfig\";\r\nimport AlertDialog from \"../../../Components/AlertPopup\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport TextsmsOutlinedIcon from \"@material-ui/icons/TextsmsOutlined\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\nconst DetailPage = () => {\r\n  const db = firebase.database();\r\n  const { id } = useParams();\r\n  const history = useHistory();\r\n  const [goalDetail, setGoalDetail] = useState([]);\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const [validInvestPopup, setValidInvestPopup] = useState(false);\r\n  const [alreadyExistPopup, setAlreadyExistPopup] = useState(false);\r\n  const [lessBalancePopup, setLessBalancePopup] = useState(false);\r\n  const [range, setRange] = useState(\"\");\r\n  const selector = useSelector((state) => {\r\n    return state;\r\n  });\r\n  useEffect(() => {\r\n    const filterSelectedGoal = selector.userReducer.allGoalsOfOrg.filter(\r\n      (val) => val.id === id\r\n    );\r\n    setGoalDetail(filterSelectedGoal);\r\n  }, []);\r\n\r\n  let [userInvest, setUserInvest] = useState();\r\n  const handleInvestment = (e) => {\r\n    setUserInvest(e.target.value);\r\n  };\r\n\r\n  // select goals working\r\n  const handleStartGoal = (event) => {\r\n    let filterFormSelectedGoal = selector.userReducer.selectedGoals.filter(\r\n      (val) => val.id === event\r\n    );\r\n    let filterSelectedGoalFromAllGoals =\r\n      selector.userReducer.allGoalsOfOrg.filter((goal) => goal.id === event);\r\n    const numberOfJoinedPeople = filterSelectedGoalFromAllGoals[0].peopleJoined;\r\n    const currentOrgUserBalance =\r\n      selector.userReducer.currentUserOfOrganization;\r\n      // check inter range \r\n    if (\r\n      Number(userInvest) <=\r\n        filterSelectedGoalFromAllGoals[0].inputValues.investMax &&\r\n      Number(userInvest) >=\r\n        filterSelectedGoalFromAllGoals[0].inputValues.investMin\r\n    ) {\r\n      // check if user have balance equal or more than balance goal \r\n      if (Number(userInvest) < currentOrgUserBalance[0].balance) {\r\n        // check goal is already selected \r\n        if (!filterFormSelectedGoal.length) {\r\n          // check wheather user enrolled org or not \r\n          if (selector.goalReducer.currentUser.orgId !== \"\") {\r\n            db.ref(\r\n              `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}`\r\n            ).update({\r\n              balance: currentOrgUserBalance[0].balance - Number(userInvest),\r\n            });\r\n            db.ref(\r\n              `organizations/${selector.goalReducer.currentUser.orgId}/goals/${event}`\r\n            ).update({ used: true, peopleJoined: numberOfJoinedPeople + 1 });\r\n            // update state of users goal \r\n            db.ref(\r\n              `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}/myGoals`\r\n            )\r\n              .push()\r\n              .update({\r\n                myGoals: filterSelectedGoalFromAllGoals[0],\r\n                submit: false,\r\n                GoalStartDate: new Date().toLocaleString(),\r\n                hasStarted: true,\r\n                approved: false,\r\n                decline: false,\r\n                userInvestment: userInvest,\r\n                isFavorite: false,\r\n                isReport: false,\r\n                acceptReport: false,\r\n                reward: \"\",\r\n                percantage: \"\",\r\n                pending: false,\r\n              })\r\n              .then(() => {\r\n                console.log(\"selected\");\r\n                setShowPopup(true);\r\n              })\r\n              .catch((err) => {\r\n                console.log(err);\r\n                alert(\"connection failed please try again\");\r\n              });\r\n          }\r\n          //    set goal if user not enrolled in any org\r\n          else {\r\n            db.ref(\r\n              `withoutOrganization/goals/${selector.goalReducer.currentUser.orgId}/${event}`\r\n            ).update({ used: true });\r\n            db.ref(\r\n              `withoutOrganization/users/${selector.userReducer.currentUserOrgId}`\r\n            ).update({\r\n              balance: currentOrgUserBalance[0].balance - Number(userInvest),\r\n            });\r\n            db.ref(\r\n              `withoutOrganization/users/${selector.userReducer.currentUserOrgId}/myGoals`\r\n            )\r\n              // .child(\"myGoals\")\r\n              .push()\r\n              .update({\r\n                myGoals: filterSelectedGoalFromAllGoals[0],\r\n                submit: false,\r\n                GoalStartDate: new Date().toLocaleString(),\r\n                hasStarted: true,\r\n                approved: false,\r\n                decline: false,\r\n                userInvestment: userInvest,\r\n                isFavorite: false,\r\n                isReport: false,\r\n                acceptReport: false,\r\n                reward: \"\",\r\n                percantage: \"\",\r\n                pending: false,\r\n              })\r\n              .then(() => {\r\n                console.log(\"selected\");\r\n                setShowPopup(true);\r\n              })\r\n              .catch((err) => {\r\n                console.log(err);\r\n                alert(\"connection failed please try again\");\r\n              });\r\n          }\r\n        } else {\r\n          // alert('already exist')\r\n          setAlreadyExistPopup(true);\r\n        }\r\n      } else {\r\n        setLessBalancePopup(true);\r\n        // console.log(\"your balance is less\", currentOrgUserBalance[0].balance);\r\n      }\r\n    }\r\n    // }else{\r\n\r\n    //   }\r\n    else {\r\n      // console.log('please enter between ')\r\n      setValidInvestPopup(true);\r\n      setRange(\r\n        filterSelectedGoalFromAllGoals[0].inputValues.investMin +\r\n          \"-\" +\r\n          filterSelectedGoalFromAllGoals[0].inputValues.investMax\r\n      );\r\n    }\r\n  };\r\n\r\n  //   alert popup close function\r\n  const handleClose = () => {\r\n    setShowPopup(false);\r\n    history.push(\"/selec-goals\");\r\n  };\r\n  const handleCloseInvestPopup = () => {\r\n    setValidInvestPopup(false);\r\n    setAlreadyExistPopup(false);\r\n  };\r\n\r\n  const handleCloseLessBalancePopup = () => {\r\n    setLessBalancePopup(false);\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"userGoalDetail_container\">\r\n      {showPopup ? (\r\n        <AlertDialog\r\n          handleClose={handleClose}\r\n          open={showPopup}\r\n          value=\"Good luck on your goal\"\r\n          btnValue=\"Back to My Goals\"\r\n        />\r\n      ) : null}\r\n      {validInvestPopup ? (\r\n        <AlertDialog\r\n          handleClose={handleCloseInvestPopup}\r\n          open={validInvestPopup}\r\n          value={`please enter investment between given range ${range}`}\r\n          btnValue=\"OK\"\r\n        />\r\n      ) : null}\r\n      {alreadyExistPopup ? (\r\n        <AlertDialog\r\n          handleClose={handleCloseInvestPopup}\r\n          open={alreadyExistPopup}\r\n          value=\"You have already selected this goal!\"\r\n          btnValue=\"Cancel\"\r\n        />\r\n      ) : null}\r\n      {lessBalancePopup ? (\r\n        <AlertDialog\r\n          handleClose={handleCloseLessBalancePopup}\r\n          open={lessBalancePopup}\r\n          value=\"You can not start goal because you don't have balance !\"\r\n          btnValue=\"OK\"\r\n        />\r\n      ) : null}\r\n      <div className=\"userGoalDetail_md\">\r\n        <MenuAppBar />\r\n        <div className=\"mobViewHead dtMobViewHead\">\r\n          <div className=\"mobViewHeadContent mobVwHead\">\r\n            <div className=\"mobHeadBack\">\r\n              <Link className=\"mobHeadBack_link\" to=\"/search-goals\">\r\n                <ArrowBackIosIcon />\r\n              </Link>\r\n            </div>\r\n            <h2>Upcomming Challenges</h2>\r\n            <div className=\"headChatIcon\">\r\n              <TextsmsOutlinedIcon />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* {!loadingGoal ? ( */}\r\n        <div className=\"userGoal_detail_d\">\r\n          {goalDetail.length ? (\r\n            goalDetail.map((val) => (\r\n              <div className=\"userGoalDetail_content\" key={val.id}>\r\n                <div className=\"detailLeftContent\">\r\n                  <Link to=\"/search-goals\" className=\"Verifyback_link\">\r\n                    <ArrowBackIcon />\r\n                  </Link>\r\n                  <img className=\"desktopViewDimg\" src={val.url} alt=\"...\" />\r\n                  <button\r\n                    className=\"start_goal_btn\"\r\n                    onClick={() => handleStartGoal(val.id)}\r\n                  >\r\n                    Submit\r\n                  </button>\r\n                </div>\r\n                <div className=\"detailRight_content\">\r\n                  <div className=\"detail_list\">\r\n                    <div className=\"goalDetailCard\">\r\n                      <div className=\"detailHead\">\r\n                        <h4>{val.inputValues.eventName}</h4>\r\n                        <p>Start date : {val.inputValues.startDate}</p>\r\n                      </div>\r\n                      <div className=\"detailBody\">\r\n                        <p>Welcome to the newest challengy offered by Tryve</p>\r\n                        <p className=\"decs\">{val.inputValues.description}</p>\r\n                        <div className=\"verifyMethod\">\r\n                          <h4>Verification Methods</h4>\r\n                          <div className=\"verifyImg\">\r\n                            <img\r\n                              src=\"https://static.vecteezy.com/system/resources/previews/000/939/976/non_2x/asian-young-girl-drink-water-photo.jpg\"\r\n                              alt=\"...\"\r\n                            />\r\n                            <img\r\n                              src=\"https://static.vecteezy.com/system/resources/previews/000/939/976/non_2x/asian-young-girl-drink-water-photo.jpg\"\r\n                              alt=\"...\"\r\n                            />\r\n                          </div>\r\n                          <p className=\"investRange\">\r\n                            Enter between ${val.inputValues.investMin} - $\r\n                            {val.inputValues.investMax} amount to join\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"investInp\">\r\n                          <input\r\n                            type=\"number\"\r\n                            onChange={handleInvestment}\r\n                            className=\"inp\"\r\n                            placeholder=\"Enter Amount\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"goalMob_btn\">\r\n                    <button\r\n                      className=\"start_goal_btn\"\r\n                      onClick={() => handleStartGoal(val.id)}\r\n                    >\r\n                      Submit\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <div onClick={() => history.goBack()} className=\"goBack\">\r\n              {\" \"}\r\n              Go back and select product...{\" \"}\r\n            </div>\r\n          )}\r\n        </div>\r\n        {/* ) : (\r\n          <LoadingState />\r\n        )} */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailPage;\r\n","D:\\EINC\\Project\\src\\Pages\\UserSide\\MyGoal\\Index.jsx",[],"D:\\EINC\\Project\\src\\Pages\\UserSide\\GoalsStatus\\Index.jsx",[],"D:\\EINC\\Project\\src\\Pages\\UserSide\\VerificationGoal\\DetailPage.jsx",["309","310"],"import React from 'react'\r\nimport { useHistory, useParams } from 'react-router'\r\nimport { useSelector } from 'react-redux'\r\nimport { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport MenuAppBar from '../../../Layout/Navbar'\r\nimport firebase from '../../../Config/FirebaseConfig'\r\nimport AlertDialog from '../../../Components/AlertPopup'\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\r\nimport FormDialog from '../../../Components/InputPopup'\r\nimport TextsmsOutlinedIcon from '@material-ui/icons/TextsmsOutlined'\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\r\n\r\nconst StartGoalDetailPage = () => {\r\n  const db = firebase.database()\r\n  const { id } = useParams()\r\n  const history = useHistory()\r\n  const [goalDetail, setGoalDetail] = useState([])\r\n  const [showPopup, setShowPopup] = useState(false)\r\n  let [loader, setLoader] = useState(false)\r\n  const selector = useSelector((state) => {\r\n    return state\r\n  })\r\n  const { userReducer, goalReducer } = selector\r\n  useEffect(() => {\r\n    const filterSelectedGoal = selector.userReducer.selectedGoals.filter(\r\n      (val) => val.id === id,\r\n    )\r\n    setGoalDetail(filterSelectedGoal)\r\n    setLoader(true)\r\n\r\n    return () => {\r\n      setGoalDetail([])\r\n    }\r\n  }, [])\r\n\r\n  // countdown timer working\r\n  const calculateTime = () => {\r\n    // if (goalDetail) {\r\n    const filterSelectedGoal = selector.userReducer.selectedGoals.filter(\r\n      (val) => val.id === id,\r\n    )\r\n    if (filterSelectedGoal.length) {\r\n      const date = new Date(filterSelectedGoal[0].GoalStartDate)\r\n      var myFutureDate = new Date(date)\r\n      let currentDate = new Date()\r\n      myFutureDate.setDate(\r\n        myFutureDate.getDate() +\r\n          Number(filterSelectedGoal[0].inputValues.numberOfDays),\r\n      )\r\n      const difference = myFutureDate - currentDate\r\n      // setEndDate(myFutureDate)\r\n      // console.log(myFutureDate)\r\n      let timeLeft = {}\r\n\r\n      if (difference > 0) {\r\n        timeLeft = {\r\n          days: Math.floor(difference / (1000 * 60 * 60 * 24)),\r\n          hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\r\n          minutes: Math.floor((difference / 1000 / 60) % 60),\r\n          seconds: Math.floor((difference / 1000) % 60),\r\n        }\r\n      }\r\n\r\n      return timeLeft\r\n      // }\r\n    }\r\n  }\r\n  calculateTime()\r\n  const [timeLeft, setTimeLeft] = useState(calculateTime())\r\n  useEffect(() => {\r\n    if (loader) {\r\n      setLoader(false)\r\n    }\r\n    if (timeLeft) {\r\n      if (Object.keys(timeLeft).length !== 0) {\r\n        const timer = setTimeout(() => {\r\n          setTimeLeft(calculateTime())\r\n        }, 1000)\r\n        // Clear timeout if the component is unmounted\r\n        return () => clearTimeout(timer)\r\n      }\r\n    }\r\n  })\r\n\r\n  // submit goal working\r\n  let [open, setOpen] = useState(false)\r\n  let [goalId, setGoalId] = useState('')\r\n  let [myGoalId, setMyGoalId] = useState('')\r\n  const [imgUrl, setImgurl] = useState('')\r\n  const [imgName, setImgName] = useState('')\r\n  const [local, setLocal] = useState('')\r\n  let [loading, setLoading] = useState(false)\r\n  let [submitGoalKey, setSubmitGoalKey] = useState('')\r\n\r\n  const handleOpenForm = (event) => {\r\n    let filterFormSelectedGoal = selector.userReducer.selectedGoals.filter(\r\n      (val) => val.id === event,\r\n    )\r\n    setMyGoalId(filterFormSelectedGoal[0].myGoalId)\r\n    setGoalId(event)\r\n    setOpen(true)\r\n    db.ref(`organizations/${goalReducer.currentUser.orgId}/submitGoals`).on(\r\n      'value',\r\n      (snap) => {\r\n        snap.forEach((sGoal) => {\r\n          if (sGoal.val().SubmitGoal.id === event) {\r\n            const getSelecGoalKey = sGoal.key\r\n            setSubmitGoalKey(getSelecGoalKey)\r\n          }\r\n          // console.log(sGoal.val(),event);\r\n        })\r\n      },\r\n    )\r\n    console.log('unreport')\r\n  }\r\n  const handleCloseSubmitForm = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const handleSelectImg = (event) => {\r\n    const url = URL.createObjectURL(event.target.files[0])\r\n    const goalImgName = event.target.files[0].name\r\n    setImgurl(url)\r\n    setImgName(goalImgName)\r\n    setLocal(event.target.files[0])\r\n  }\r\n\r\n  // firebase storage ref\r\n  const storage = firebase.storage()\r\n  let createStorageRef = () => storage.ref(`SubmitImages/${imgName}`).put(local)\r\n  let downLoad = () => storage.ref(`SubmitImages/${imgName}`).getDownloadURL()\r\n\r\n  const handleSubmitGoal = () => {\r\n    let filterFormSelectedGoal = selector.userReducer.selectedGoals.filter(\r\n      (val) => val.id === goalId,\r\n    )\r\n    setLoading(true)\r\n    let myGoalObject = {\r\n      submit: true,\r\n      approved: false,\r\n      decline: false,\r\n      submitDate: new Date().toLocaleString(),\r\n      hasStarted: false,\r\n      isReport: false,\r\n      acceptReport: false,\r\n      pending: false,\r\n    }\r\n    // console.log(filterFormSelectedGoal[0]);\r\n    if (!filterFormSelectedGoal[0].submit) {\r\n      if (local) {\r\n        createStorageRef()\r\n          .then(() => {\r\n            // download img from storage\r\n            downLoad()\r\n              .then((url) => {\r\n                // then set submit goals in database\r\n                if (goalReducer.currentUser.orgId !== '') {\r\n                  // user side update mygoals\r\n                  db.ref(\r\n                    `organizations/${goalReducer.currentUser.orgId}/users/${userReducer.currentUserOrgId}/myGoals/${myGoalId}`,\r\n                  ).update(myGoalObject)\r\n                  // set insise organization\r\n                  if (!filterFormSelectedGoal[0].acceptReport) {\r\n                    db.ref(\r\n                      `organizations/${goalReducer.currentUser.orgId}/submitGoals`,\r\n                    )\r\n                      .push()\r\n                      .set({\r\n                        SubmitGoal: filterFormSelectedGoal[0],\r\n                        userName: goalReducer.currentUser.name,\r\n                        userIdMain: goalReducer.currentUser.id,\r\n                        uploadImgUlr: url,\r\n                        approved: false,\r\n                        decline: false,\r\n                        submit: true,\r\n                        hasStarted: false,\r\n                        submitDate: new Date().toLocaleString(),\r\n                        orgUserId: userReducer.currentUserOrgId,\r\n                        isReport: false,\r\n                        acceptReport: false,\r\n                        pending: false,\r\n                      })\r\n\r\n                      .then(() => {\r\n                        setImgurl('')\r\n                        setImgName('')\r\n                        setLocal('')\r\n                        setShowPopup(true)\r\n                        setLoading(false)\r\n\r\n                        console.log('submitted')\r\n                        handleClose()\r\n                      })\r\n                      .catch((err) => {\r\n                        console.log(err)\r\n                        setLoading(false)\r\n                        alert('connectionn failed try again')\r\n                      })\r\n                  } else {\r\n                    db.ref(\r\n                      `organizations/${goalReducer.currentUser.orgId}/submitGoals/${submitGoalKey}`,\r\n                    )\r\n                      .update({\r\n                        uploadImgUlr: url,\r\n                        approved: false,\r\n                        decline: false,\r\n                        submit: true,\r\n                        hasStarted: false,\r\n                        submitDate: new Date().toLocaleString(),\r\n                        isReport: false,\r\n                        acceptReport: false,\r\n                        pending: false,\r\n                      })\r\n                      .then(() => {\r\n                        setImgurl('')\r\n                        setImgName('')\r\n                        setLocal('')\r\n                        setShowPopup(true)\r\n                        setLoading(false)\r\n\r\n                        console.log('submitted')\r\n                        handleClose()\r\n                      })\r\n                      .catch((err) => {\r\n                        console.log(err)\r\n                        setLoading(false)\r\n                        alert('connectionn failed try again')\r\n                      })\r\n                  }\r\n                }\r\n                //    set submit goal if user not enrolled in any org\r\n                else {\r\n                  db.ref(\r\n                    `withoutOrganization/users/${userReducer.currentUserOrgId}/myGoals/${myGoalId}`,\r\n                  ).update(myGoalObject)\r\n\r\n                  if (!filterFormSelectedGoal[0].acceptReport) {\r\n                    console.log('submitted')\r\n                    db.ref(`withoutOrganization/submitGoals`)\r\n                      .push()\r\n                      .set({\r\n                        SubmitGoal: filterFormSelectedGoal[0],\r\n                        userName: goalReducer.currentUser.name,\r\n                        userIdMain: goalReducer.currentUser.id,\r\n                        uploadImgUlr: url,\r\n                        approved: false,\r\n                        decline: false,\r\n                        orgUserId: userReducer.currentUserOrgId,\r\n                        hasStarted: false,\r\n                        submit: true,\r\n                        submitDate: new Date().toLocaleString(),\r\n                        isReport: false,\r\n                        acceptReport: false,\r\n                        pending: false,\r\n                      })\r\n                      .then(() => {\r\n                        setImgurl('')\r\n                        setImgName('')\r\n                        setLocal('')\r\n                        setShowPopup(true)\r\n                        setLoading(false)\r\n                        handleClose()\r\n                      })\r\n                      .catch((err) => {\r\n                        console.log(err)\r\n                        alert('connection failed try again')\r\n                        setLoading(false)\r\n                      })\r\n                  } else {\r\n                    db.ref(\r\n                      `withoutOrganization/submitGoals/${submitGoalKey}`,\r\n                    ).update({\r\n                      uploadImgUlr: url,\r\n                      approved: false,\r\n                      decline: false,\r\n                      submit: true,\r\n                      hasStarted: false,\r\n                      submitDate: new Date().toLocaleString(),\r\n                      isReport: false,\r\n                      acceptReport: false,\r\n                      pending: false,\r\n                    })\r\n                    .then(() => {\r\n                      setImgurl('')\r\n                      setImgName('')\r\n                      setLocal('')\r\n                      setShowPopup(true)\r\n                      setLoading(false)\r\n                      handleClose()\r\n                    })\r\n                    .catch((err) => {\r\n                      console.log(err)\r\n                      alert('connection failed try again')\r\n                      setLoading(false)\r\n                    })\r\n                  }\r\n                }\r\n              })\r\n              // handle error of download img\r\n              .catch((err) => {\r\n                console.log(err)\r\n              })\r\n          })\r\n          // handle error of upload img\r\n          .catch((err) => {\r\n            console.log(err)\r\n          })\r\n      } else {\r\n        alert('Please select image')\r\n      }\r\n    } else {\r\n      alert('already submitted')\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // retry goal\r\n  const handleRetryGoal = (event) => {\r\n    // console.log(event,selector.userReducer)\r\n    // get submit goal key for retry\r\n    if (selector.goalReducer.currentUser.orgId !== '') {\r\n      db.ref(\r\n        `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}/myGoals/${event.myGoalId}`,\r\n      ).update({\r\n        decline: false,\r\n        submit: false,\r\n        pending: false,\r\n      })\r\n      db.ref(\r\n        `organizations/${selector.goalReducer.currentUser.orgId}/submitGoals`,\r\n      ).on('value', (snapshot) => {\r\n        snapshot.forEach((val) => {\r\n          if (val.val().SubmitGoal.myGoalId === event.myGoalId) {\r\n            // console.log(val.key)\r\n            db.ref(\r\n              `organizations/${selector.goalReducer.currentUser.orgId}/submitGoals/${val.key}`,\r\n            )\r\n              .update({\r\n                decline: false,\r\n                submit: false,\r\n                pending: false,\r\n              })\r\n              .then(() => {\r\n                console.log('retry')\r\n                history.push('/goals-status')\r\n              })\r\n              .catch((err) => {\r\n                console.log(err)\r\n                alert('connection failed please try again')\r\n              })\r\n          }\r\n        })\r\n      })\r\n    }\r\n    //    set goal if user not enrolled in any org\r\n    else {\r\n      db.ref(\r\n        `withoutOrganization/users/${selector.userReducer.currentUserOrgId}/myGoals/${event.myGoalId}`,\r\n      ).update({\r\n        decline: false,\r\n        submit: false,\r\n        pending: false,\r\n      })\r\n      db.ref(`withoutOrganization/submitGoals`).on('value', (snapshot) => {\r\n        snapshot.forEach((val) => {\r\n          if (val.val().SubmitGoal.myGoalId === event.myGoalId) {\r\n            // console.log(val.key)\r\n            db.ref(`withoutOrganization/submitGoals/${val.key}`)\r\n              .update({\r\n                decline: false,\r\n                submit: false,\r\n                pending: false,\r\n              })\r\n              .then(() => {\r\n                console.log('retry')\r\n                history.push('/goals-status')\r\n              })\r\n              .catch((err) => {\r\n                console.log(err)\r\n                alert('connection failed please try again')\r\n              })\r\n          }\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  // withdra pending goals\r\n\r\n  const handleWithDraw = (event) => {\r\n    // if (!filterFormSelectedGoal.length) {\r\n    let balance = ''\r\n    db.ref(\r\n      `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}`,\r\n    ).on('value', (snapshot) => {\r\n      let userData = snapshot.val()\r\n      let userBalancedb = userData.balance\r\n      balance = userBalancedb\r\n    })\r\n\r\n    if (selector.goalReducer.currentUser.orgId !== '') {\r\n      db.ref(\r\n        `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}`,\r\n      ).update({\r\n        balance: balance + Number(event.reward) +event.userInvestment,\r\n      })\r\n\r\n      db.ref(\r\n        `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}/myGoals/${event.myGoalId}`,\r\n      ).update({\r\n        pending: false,\r\n      })\r\n      db.ref(\r\n        `organizations/${selector.goalReducer.currentUser.orgId}/submitGoals`,\r\n      ).on('value', (snapshot) => {\r\n        snapshot.forEach((val) => {\r\n          if (val.val().SubmitGoal.myGoalId === event.myGoalId) {\r\n            // console.log(val.key)\r\n            db.ref(\r\n              `organizations/${selector.goalReducer.currentUser.orgId}/submitGoals/${val.key}`,\r\n            )\r\n              .update({\r\n                pending: false,\r\n              })\r\n              .then(() => {\r\n                console.log('retry')\r\n                history.push('/goals-status')\r\n              })\r\n              .catch((err) => {\r\n                console.log(err)\r\n                alert('connection failed please try again')\r\n              })\r\n          }\r\n        })\r\n      })\r\n    }\r\n    //    set goal if user not enrolled in any org\r\n    else {\r\n      db.ref(\r\n        `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}`,\r\n      ).update({\r\n        balance: Number(balance) + Number(event.reward)+event.userInvestment,\r\n      })\r\n      db.ref(\r\n        `withoutOrganization/users/${selector.userReducer.currentUserOrgId}/myGoals/${event.myGoalId}`,\r\n      ).update({\r\n        pending: true,\r\n      })\r\n      db.ref(`withoutOrganization/submitGoals`).on('value', (snapshot) => {\r\n        snapshot.forEach((val) => {\r\n          if (val.val().SubmitGoal.myGoalId === event.myGoalId) {\r\n            // console.log(val.key)\r\n            db.ref(`withoutOrganization/submitGoals/${val.key}`)\r\n              .update({\r\n                pending: false,\r\n              })\r\n              .then(() => {\r\n                console.log('retry')\r\n                history.push('/goals-status')\r\n              })\r\n              .catch((err) => {\r\n                console.log(err)\r\n                alert('connection failed please try again')\r\n              })\r\n          }\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  // // retake pic working\r\n  // let [retakeForm, setRetakeForm] = useState(false)\r\n  // // let [submitGoalKey, setSubmitGoalKey] = useState('')\r\n\r\n  // const handleOpenRetakeForm = (event) => {\r\n  //   let filterFormSelectedGoal = selector.userReducer.selectedGoals.filter(\r\n  //     (val) => val.id === event,\r\n  //   )\r\n  //   setMyGoalId(filterFormSelectedGoal[0].myGoalId)\r\n  //   setGoalId(event)\r\n  //   setRetakeForm(true)\r\n  //   // get submit goal key to update submit goal\r\n  //   db.ref(`organizations/${goalReducer.currentUser.orgId}/submitGoals`).on(\r\n  //     'value',\r\n  //     (snap) => {\r\n  //       snap.forEach((sGoal) => {\r\n  //         if (sGoal.val().SubmitGoal.id === event) {\r\n  //           const getSelecGoalKey = sGoal.key\r\n  //           setSubmitGoalKey(getSelecGoalKey)\r\n  //         }\r\n  //         // console.log(sGoal.val(),event);\r\n  //       })\r\n  //     },\r\n  //   )\r\n  // }\r\n  // const handleReSubmitGoal = () => {\r\n  //   // console.log('resubmit',submitGoalKey)\r\n  //   let filterFormSelectedGoal = selector.userReducer.selectedGoals.filter(\r\n  //     (val) => val.id === goalId,\r\n  //   )\r\n  //   setLoading(true)\r\n  //   let myGoalObject = {\r\n  //     submit: true,\r\n  //     approved: false,\r\n  //     decline: false,\r\n  //     submitDate: new Date().toLocaleString(),\r\n  //     hasStarted: false,\r\n  //     isReport: false,\r\n  //     acceptReport: false,\r\n  //     pending: false,\r\n  //   }\r\n  //   // if (filterFormSelectedGoal[0].acceptReport) {\r\n  //   //   // console.log('true',filterFormSelectedGoal,submitGoalKey)\r\n  //   //   if (local) {\r\n  //   //     createStorageRef()\r\n  //   //       .then(() => {\r\n  //   //         // download img from storage\r\n  //   //         downLoad()\r\n  //   //           .then((url) => {\r\n  //   //             // then set submit goals in database\r\n  //   //             if (goalReducer.currentUser.orgId !== \"\") {\r\n  //   //               // user side update mygoals\r\n  //   //               db.ref(\r\n  //   //                 `organizations/${goalReducer.currentUser.orgId}/users/${userReducer.currentUserOrgId}/myGoals/${myGoalId}`\r\n  //   //               ).update(myGoalObject);\r\n  //   //               db.ref(\r\n  //   //                 `organizations/${goalReducer.currentUser.orgId}/submitGoals/${submitGoalKey}`\r\n  //   //               )\r\n  //   //                 .update({\r\n  //   //                   uploadImgUlr: url,\r\n  //   //                   approved: false,\r\n  //   //                   decline: false,\r\n  //   //                   submit: true,\r\n  //   //                   hasStarted: false,\r\n  //   //                   submitDate: new Date().toLocaleString(),\r\n  //   //                   isReport: false,\r\n  //   //                   acceptReport: false,\r\n  //   //                   pending: false,\r\n  //   //                 })\r\n  //   //                 .then(() => {\r\n  //   //                   setImgurl(\"\");\r\n  //   //                   setImgName(\"\");\r\n  //   //                   setLocal(\"\");\r\n  //   //                   setShowPopup(true);\r\n  //   //                   setLoading(false);\r\n  //   //                   console.log(\"submitted\");\r\n  //   //                   handleClose();\r\n  //   //                 })\r\n  //   //                 .catch((err) => {\r\n  //   //                   console.log(err);\r\n  //   //                   setLoading(false);\r\n\r\n  //   //                   alert(\"connectionn failed try again\");\r\n  //   //                 });\r\n  //   //             }\r\n  //   //             // set insise organization\r\n  //   //             //    set submit goal if user not enrolled in any org\r\n  //   //             else {\r\n  //   //               db.ref(\r\n  //   //                 `withoutOrganization/users/${userReducer.currentUserOrgId}/myGoals/${myGoalId}`\r\n  //   //               )\r\n  //   //                 .update(myGoalObject)\r\n  //   //                 .then(() => {\r\n  //   //                   setImgurl(\"\");\r\n  //   //                   setImgName(\"\");\r\n  //   //                   setLocal(\"\");\r\n  //   //                   setShowPopup(true);\r\n  //   //                   setLoading(false);\r\n  //   //                   console.log(\"submitted\");\r\n  //   //                   db.ref(`withoutOrganization/submitGoals/${submitGoalKey}`)\r\n  //   //                     .push()\r\n  //   //                     .update({\r\n  //   //                       uploadImgUlr: url,\r\n  //   //                       approved: false,\r\n  //   //                       decline: false,\r\n  //   //                       hasStarted: false,\r\n  //   //                       submit: true,\r\n  //   //                       submitDate: new Date().toLocaleString(),\r\n  //   //                       isReport: false,\r\n  //   //                       acceptReport: false,\r\n  //   //                       pending: false,\r\n  //   //                     });\r\n  //   //                   handleClose();\r\n  //   //                 })\r\n  //   //                 .catch((err) => {\r\n  //   //                   console.log(err);\r\n  //   //                   alert(\"connection failed try again\");\r\n  //   //                   setLoading(false);\r\n  //   //                 });\r\n  //   //             }\r\n  //   //           })\r\n  //   //           // handle error of download img\r\n  //   //           .catch((err) => {\r\n  //   //             console.log(err);\r\n  //   //           });\r\n  //   //       })\r\n  //   //       // handle error of upload img\r\n  //   //       .catch((err) => {\r\n  //   //         console.log(err);\r\n  //   //       });\r\n  //   //   } else {\r\n  //   //     alert(\"Please select image\");\r\n  //   //   }\r\n  //   // }\r\n  // }\r\n\r\n  //   alert popup close function\r\n  \r\n  \r\n  const handleClose = () => {\r\n    setShowPopup(false)\r\n    history.push('/selec-goals')\r\n  }\r\n\r\n  return (\r\n    <div className=\"userGoalDetail_container\">\r\n      {showPopup ? (\r\n        <AlertDialog\r\n          handleClose={handleClose}\r\n          open={showPopup}\r\n          value=\"Good luck on your goal\"\r\n          btnValue=\"Back to My Goals\"\r\n        />\r\n      ) : null}\r\n      {open ? (\r\n        <FormDialog\r\n          fileInput\r\n          open={open}\r\n          handleClose={handleCloseSubmitForm}\r\n          btnValue=\"Submit Goal\"\r\n          handleAddFunction={handleSubmitGoal}\r\n          handleInputvalue={handleSelectImg}\r\n          imgUrl={imgUrl}\r\n          loading={loading}\r\n        />\r\n      ) : null}\r\n      <MenuAppBar />\r\n      <div className=\"userGoalDetail_md\">\r\n        <div className=\"mobViewHead mobViewFlat\">\r\n          <div className=\"mobViewHeadContent\">\r\n            <div className=\"mobHeadBack\">\r\n              <button\r\n                onClick={() => history.goBack()}\r\n                className=\"mobHeadBack_link\"\r\n              >\r\n                <ArrowBackIosIcon />\r\n              </button>\r\n            </div>\r\n            <h2>TRYVE</h2>\r\n            <div className=\"headChatIcon\">\r\n              <TextsmsOutlinedIcon />\r\n            </div>\r\n          </div>\r\n        </div>\r\n          <div className=\"userGoal_detail_d\">\r\n            {goalDetail.length ? (\r\n              goalDetail.map((val) => {\r\n                const endDate = new Date(val.GoalStartDate)\r\n                var myEndDate = new Date(endDate)\r\n                myEndDate\r\n                  .setDate(\r\n                    myEndDate.getDate() + Number(val.inputValues.numberOfDays),\r\n                  )\r\n                  .toLocaleString()\r\n                return (\r\n                  <div className=\"userGoalDetail_content2\" key={val.id}>\r\n                    <div className=\"detailVerifyLeftContent\">\r\n                      <button\r\n                        onClick={() => history.goBack()}\r\n                        className=\"Verifyback_link\"\r\n                      >\r\n                        <ArrowBackIcon />\r\n                      </button>\r\n                      <img src={val.url} alt=\"...\" />\r\n                      {val.decline || val.pending ? null : (\r\n                        <button\r\n                          className=\"start_goal_btn\"\r\n                          onClick={\r\n                            // !val.acceptReport\r\n                            // ?\r\n                            () => handleOpenForm(val.id)\r\n                            // : () => handleOpenRetakeForm(val.id)\r\n                          }\r\n                          disabled={val.submit}\r\n                        >\r\n                          {val.submit && !val.approved && !val.decline\r\n                            ? ' Submitted'\r\n                            : (val.submit &&\r\n                                val.approved &&\r\n                                val.percentage === '100' &&\r\n                                !val.pending) ||\r\n                              (val.submit &&\r\n                                val.approved &&\r\n                                val.percentage !== '100' &&\r\n                                !val.pending)\r\n                            ? ' Approved'\r\n                            : val.submit &&\r\n                              val.approved &&\r\n                              val.percentage !== '100' &&\r\n                              val.pending\r\n                            ? ' Pending '\r\n                            : val.decline === true &&\r\n                              val.submit &&\r\n                              !val.approved\r\n                            ? ' decline '\r\n                            : ' Take verification photo '}\r\n                        </button>\r\n                      )}\r\n                      {val.decline ? (\r\n                        <button\r\n                          className=\"start_goal_btn\"\r\n                          onClick={() => handleRetryGoal(val)}\r\n                        >\r\n                          Retry\r\n                        </button>\r\n                      ) : null}\r\n                      {val.pending ? (\r\n                        <div className=\"withdrawBtns\">\r\n                          <button\r\n                            className=\"start_goal_btn\"\r\n                            onClick={() => handleWithDraw(val)}\r\n                          >\r\n                            Withdraw\r\n                          </button>\r\n                          <button\r\n                            className=\"start_goal_btn\"\r\n                            onClick={() => handleRetryGoal(val)}\r\n                          >\r\n                            Retry\r\n                          </button>\r\n                        </div>\r\n                      ) : null}\r\n                    </div>\r\n                    <div className=\"detailRight_contentVerify\">\r\n                      <div className=\"detail_list\">\r\n                        <ul className=\"detailGoal_ul\">\r\n                          <li className=\"borderBtm\">\r\n                            <h5 className=\"db_bold_head\">Goal : </h5>\r\n                            <p className=\"detail_db\">\r\n                              {val.inputValues.eventName}\r\n                            </p>\r\n                          </li>\r\n                          <div className=\"moreInfoGoal\">\r\n                            <li className=\"goals\">\r\n                              {val.approved && !val.pending && val.submit ? (\r\n                                <>\r\n                                  <p>Success : {val.percentage}%</p>\r\n                                  <p>Reward : {val.reward}</p>\r\n                                </>\r\n                              ) : (\r\n                                <>\r\n                                  <p>\r\n                                    Start : {val.GoalStartDate.slice(0, 10)}{' '}\r\n                                  </p>\r\n                                  <p>\r\n                                    End :{' '}\r\n                                    {myEndDate.toLocaleString().slice(0, 10)}\r\n                                  </p>\r\n                                </>\r\n                              )}\r\n                            </li>\r\n                            <li>\r\n                              <p>Category : </p>\r\n                              <p className=\"detail_db\">\r\n                                {val.inputValues.category}\r\n                              </p>\r\n                            </li>\r\n                            <li>\r\n                              <p>Difficulty : </p>\r\n                              <p className=\"detail_db\">\r\n                                {val.inputValues.dificulty}\r\n                              </p>\r\n                            </li>\r\n                          </div>\r\n                          <li className=\"db_bold_head2\">\r\n                            <h5 className=\"db_bold_head\">Description : </h5>\r\n                            <p className=\"detail_db\">\r\n                              {val.inputValues.description}\r\n                            </p>\r\n                          </li>\r\n                        </ul>\r\n                        {!val.submit ? (\r\n                          <div className=\"timeLeftCounter borderBtm\">\r\n                            <h5>Time Left:</h5>\r\n                            <p>\r\n                              {Object.keys(timeLeft).length !== 0\r\n                                ? `${timeLeft.days} days ${timeLeft.hours} hours `\r\n                                : 'time end'}\r\n                            </p>\r\n                          </div>\r\n                        ) : (\r\n                          <p>\r\n                            {val.submit && !val.approved && !val.decline\r\n                              ? ' Submitted'\r\n                              : (val.submit &&\r\n                                  val.approved &&\r\n                                  val.percentage === '100' &&\r\n                                  !val.pending) ||\r\n                                (val.submit &&\r\n                                  val.approved &&\r\n                                  val.percentage !== '100' &&\r\n                                  !val.pending)\r\n                              ? ' Approved'\r\n                              : val.submit &&\r\n                                val.approved &&\r\n                                val.percentage !== '100' &&\r\n                                val.pending\r\n                              ? ' Pending '\r\n                              : val.decline === true &&\r\n                                val.submit &&\r\n                                !val.approved\r\n                              ? ' decline '\r\n                              : ' NeedSubmmision '}\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                      <div className=\"goalMob_btn\">\r\n                        <button\r\n                          className=\"start_goal_btn\"\r\n                          onClick={() => handleOpenForm(val.id)}\r\n                          disabled={val.submit}\r\n                        >\r\n                          {val.submit && !val.approved && !val.decline\r\n                            ? ' Submitted'\r\n                            : (val.submit &&\r\n                                val.approved &&\r\n                                val.percentage === '100' &&\r\n                                !val.pending) ||\r\n                              (val.submit &&\r\n                                val.approved &&\r\n                                val.percentage !== '100' &&\r\n                                !val.pending)\r\n                            ? ' Approved'\r\n                            : val.submit &&\r\n                              val.approved &&\r\n                              val.percentage !== '100' &&\r\n                              val.pending\r\n                            ? ' Pending '\r\n                            : val.decline === true &&\r\n                              val.submit &&\r\n                              !val.approved\r\n                            ? ' decline '\r\n                            : ' Take verification photo '}\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              })\r\n            ) : (\r\n              <div onClick={() => history.goBack()} className=\"goBack\">\r\n                {' '}\r\n                Go back and select product...{' '}\r\n              </div>\r\n            )}\r\n          </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StartGoalDetailPage\r\n","D:\\EINC\\Project\\src\\Pages\\UserSide\\GoalsStatus\\StatusDetailPage.jsx",["311"],"import React from 'react'\r\nimport { useHistory, useParams } from 'react-router'\r\nimport { useSelector } from 'react-redux'\r\nimport { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport MenuAppBar from '../../../Layout/Navbar'\r\nimport firebase from '../../../Config/FirebaseConfig'\r\nimport SmsIcon from '@material-ui/icons/Sms'\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst StatusDetailPage = () => {\r\n  const db = firebase.database()\r\n  const { id } = useParams()\r\n  const history = useHistory()\r\n  const [goalDetail, setGoalDetail] = useState([])\r\n  const [ setShowPopup] = useState(false)\r\n  const selector = useSelector((state) => {\r\n    return state\r\n  })\r\n  // console.log(selector)\r\n  useEffect(() => {\r\n    const filterSelectedGoal = selector.userReducer.selectedGoals.filter(\r\n      (val) => val.myGoalId === id,\r\n    )\r\n    setGoalDetail(filterSelectedGoal)\r\n  }, [])\r\n\r\n  const handleWithDraw = (event) => {\r\n    // if (!filterFormSelectedGoal.length) {\r\n    let balance = ''\r\n    db.ref(\r\n      `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}`,\r\n    ).on('value', (snapshot) => {\r\n      let userData = snapshot.val()\r\n      let userBalancedb = userData.balance\r\n      balance = userBalancedb\r\n      // console.log('user',userBalancedb)\r\n      // setUserBalance(userBalancedb);\r\n    })\r\n    // console.log(balance);\r\n\r\n    if (selector.goalReducer.currentUser.orgId !== '') {\r\n      db.ref(\r\n        `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}`,\r\n      ).update({\r\n        balance: balance + Number(event.reward),\r\n      })\r\n\r\n      db.ref(\r\n        `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}/myGoals/${event.myGoalId}`,\r\n      )\r\n        .update({\r\n          pending: false,\r\n        })\r\n        .then(() => {\r\n          console.log('selected')\r\n          setShowPopup(true)\r\n          history.push('/verify-goals')\r\n        })\r\n        .catch((err) => {\r\n          console.log(err)\r\n          alert('connection failed please try again')\r\n        })\r\n    }\r\n    //    set goal if user not enrolled in any org\r\n    else {\r\n      db.ref(\r\n        `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}`,\r\n      ).update({\r\n        balance: Number(balance) + Number(event.reward),\r\n      })\r\n      db.ref(\r\n        `withoutOrganization/users/${selector.userReducer.currentUserOrgId}/myGoals/${event.myGoalId}`,\r\n      )\r\n        .update({\r\n          pending: true,\r\n        })\r\n        .then(() => {\r\n          console.log('selected')\r\n          history.push('/verify-goals')\r\n          setShowPopup(true)\r\n        })\r\n        .catch((err) => {\r\n          console.log(err)\r\n          alert('connection failed please try again')\r\n        })\r\n    }\r\n  }\r\n\r\n  const handleRetryGoal = (event) => {\r\n    // console.log(event)\r\n    if (selector.goalReducer.currentUser.orgId !== '') {\r\n      db.ref(\r\n        `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}/myGoals/${event.myGoalId}`,\r\n      )\r\n        .update({\r\n          decline: false,\r\n          submit: false,\r\n        })\r\n        .then(() => {\r\n          console.log('retry')\r\n          history.push('/verify-goals')\r\n        })\r\n        .catch((err) => {\r\n          console.log(err)\r\n          alert('connection failed please try again')\r\n        })\r\n    }\r\n    //    set goal if user not enrolled in any org\r\n    else {\r\n      db.ref(\r\n        `withoutOrganization/users/${selector.userReducer.currentUserOrgId}/myGoals/${event.myGoalId}`,\r\n      )\r\n        .update({\r\n          decline: false,\r\n          submit: false,\r\n        })\r\n        .then(() => {\r\n          history.push('/verify-goals')\r\n          console.log('retry')\r\n        })\r\n        .catch((err) => {\r\n          console.log(err)\r\n          alert('connection failed please try again')\r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"userGoalDetail_container\">\r\n      <div className=\"userGoalDetail_md\">\r\n        <MenuAppBar />\r\n        <div className=\"mobViewHead\">\r\n          <div className=\"mobViewHeadContent\">\r\n            <h2>TRYVE</h2>\r\n            <div className=\"headChatIcon\">\r\n              <SmsIcon />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"userGoal_detail_d\">\r\n          {goalDetail &&\r\n            goalDetail.map((val) => (\r\n              <div className=\"userGoalDetail_content\" key={val.id}>\r\n                <div className=\"detailLeftContent\">\r\n                  <Link to=\"/goals-status\" className=\"back_link\">\r\n                    <ArrowBackIcon />\r\n                  </Link>\r\n\r\n                  <img src={val.url} alt=\"...\" />\r\n                  {val.percentage !== '100' && val.pending ? (\r\n                    <>\r\n                      <button\r\n                        className=\"start_goal_btn\"\r\n                        onClick={() => handleWithDraw(val)}\r\n                      >\r\n                        withdraw\r\n                      </button>\r\n                    </>\r\n                  ) : null}\r\n                  {val.decline || val.pending ? (\r\n                    <>\r\n                      <button\r\n                        className=\"start_goal_btn\"\r\n                        onClick={() => handleRetryGoal(val)}\r\n                      >\r\n                        Retry\r\n                      </button>\r\n                    </>\r\n                  ) : null}\r\n                </div>\r\n                <div className=\"detailRight_content\">\r\n                  <div className=\"detail_list\">\r\n                    <ul className=\"detailGoal_ul\">\r\n                      <li className=\"goal_name_dp\">\r\n                        <h5 className=\"db_red_head\">Goal:</h5>\r\n                        <p className=\"detail_db\">{val.inputValues.eventName}</p>\r\n                      </li>\r\n                      <li>\r\n                        <p>Total Time:</p>\r\n                        <p className=\"detail_db\">\r\n                          {val.inputValues.numberOfDays}\r\n                        </p>\r\n                      </li>\r\n                      <li>\r\n                        <p>Category:</p>\r\n                        <p className=\"detail_db\">{val.inputValues.category}</p>\r\n                      </li>\r\n                      <li className=\"\">\r\n                        <p>Start date:</p>\r\n                        <p className=\"\">{val.inputValues.startDate}</p>\r\n                      </li>\r\n                      <li className=\"\">\r\n                        <p>End date:</p>\r\n                        <p className=\"\">{val.inputValues.endDate}</p>\r\n                      </li>\r\n                      <li className=\"\">\r\n                        <p>Reward Max:</p>\r\n                        <p className=\"\">{val.inputValues.rewardMax}</p>\r\n                      </li>\r\n                      <li className=\"\">\r\n                        <p>Reward Min:</p>\r\n                        <p className=\"\">{val.inputValues.rewardMin}</p>\r\n                      </li>\r\n                      <li className=\"\">\r\n                        <p>Difficulty:</p>\r\n                        <p className=\"detail_db\">{val.inputValues.dificulty}</p>\r\n                      </li>\r\n                      <li className=\"\">\r\n                        <p>Invest Max:</p>\r\n                        <p className=\"\">{val.inputValues.investMax}</p>\r\n                      </li>\r\n                      <li className=\"goal_diff_dp\">\r\n                        <p>Invest Min:</p>\r\n                        <p className=\"detail_db\">{val.inputValues.investMin}</p>\r\n                      </li>\r\n                      <li className=\"mob_desc_dp\">\r\n                        <h5 className=\"db_red_head\">Description:</h5>\r\n                        <p className=\"detail_db\">\r\n                          {val.inputValues.description}\r\n                        </p>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\"goalMob_btn\">\r\n                    {val.percentage !== '100' && !val.decline ? (\r\n                      <>\r\n                        <button\r\n                          className=\"start_goal_btn\"\r\n                          onClick={() => handleWithDraw(val)}\r\n                        >\r\n                          withdraw\r\n                        </button>\r\n                        <button\r\n                          className=\"start_goal_btn\"\r\n                          onClick={() => handleRetryGoal(val)}\r\n                        >\r\n                          Retry\r\n                        </button>\r\n                      </>\r\n                    ) : null}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StatusDetailPage\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\OrganizationLinks\\Index.jsx",[],"D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\GoalsDetailPage\\Index.jsx",["312"],"import React, { useEffect, useState } from \"react\";\r\nimport GoalsDetail from \"./GoalsDetail\";\r\nimport MiniDrawer from \"../../Sidebar\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport { useSelector } from \"react-redux\";\r\nimport firebase from \"../../../../Config/FirebaseConfig\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst Index = () => {\r\n  const db = firebase.database();\r\n  const history = useHistory(useHistory);\r\n  let { id, goal } = useParams();\r\n  let [filterGoal, setFilterGoal] = useState([]);\r\n  let [loading, setLoading] = useState(false);\r\n  const goals = useSelector((state) => {\r\n    return state.goalReducer.OrgGoals;\r\n  });\r\n  useEffect(() => {\r\n    //   filter selected goal detail\r\n    let goalsFilter = goals.filter((val) => val.id === goal);\r\n    setFilterGoal(goalsFilter);\r\n  }, []);\r\n  //   console.log(filterGoal)\r\n\r\n  //   delete gaol function\r\n  const deleteGoals = (event) => {\r\n    setLoading(true);\r\n    db.ref(`organizations/${id}/goals/${event}`)\r\n      .remove()\r\n      .then(() => {\r\n        setFilterGoal([]);\r\n        setLoading(false);\r\n        history.push(`/organizations/${id}/dashboard`);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setLoading(false);\r\n      });\r\n  };\r\n  const editGoal = (event) => {\r\n    // history.push(`${event}`)\r\n    history.push(`/organizations/${id}/edit-goal/${event}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"goals_detail_container\">\r\n      <div className=\"dashboard_left_content\">\r\n        <MiniDrawer />\r\n      </div>\r\n      <div className=\"goals_detailMd_right_content\">\r\n        <div className=\"top_route_head\">\r\n          <p className=\"top_route_icon\">\r\n            <PersonIcon />\r\n          </p>\r\n          <p style={{ marginLeft: \"10px\" }}>Goals</p>\r\n        </div>\r\n        <GoalsDetail\r\n          goalDetail={filterGoal[0]}\r\n          deleteGoals={deleteGoals}\r\n          loading={loading}\r\n          editGoal={editGoal}\r\n          backArrowPathId={`/organizations/${id}/dashboard`}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\CreateGoals\\Index.jsx",["313"],"import React, { useState,useEffect } from \"react\";\r\nimport MiniDrawer from \"../../Sidebar\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport CreateGoals from \"./CreateGoals\";\r\nimport firebase from \"../../../../Config/FirebaseConfig\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n\r\nconst goalsInput = {\r\n  eventName: \"\",\r\n  description: \"\",\r\n  dificulty: \"\",\r\n  endDate: \"\",\r\n  investMin: \"\",\r\n  investMax: \"\",\r\n  rewardMin: \"\",\r\n  rewardMax: \"\",\r\n  startDate: \"\",\r\n  category: \"\",\r\n  numberOfDays:''\r\n};\r\n\r\nconst Index = () => {\r\n  const { id } = useParams();\r\n  // console.log(id)\r\n  const history = useHistory();\r\n  const [inputValues, setInputValues] = useState(goalsInput);\r\n  const [imgUrl, setImgurl] = useState(\"\");\r\n  const [imgName, setImgName] = useState(\"\");\r\n  const [local, setLocal] = useState(\"\");\r\n  // loading\r\n  let [loading, setLoading] = useState(false);\r\n  const handleGoals = (event) => {\r\n    setInputValues({ ...inputValues, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const handleGoalImg = (event) => {\r\n    const url = URL.createObjectURL(event.target.files[0]);\r\n    const goalImgName = event.target.files[0].name;\r\n    setImgurl(url);\r\n    setImgName(goalImgName);\r\n    setLocal(event.target.files[0]);\r\n  };\r\n  // firebase storage ref\r\n  const storage = firebase.storage();\r\n  let createStorageRef = () => storage.ref(`goalsImages/${imgName}`).put(local);\r\n  let downLoad = () => storage.ref(`goalsImages/${imgName}`).getDownloadURL();\r\n\r\n  // firebase database reference\r\n  const db = firebase.database();\r\n  const goalsRef = db.ref(`organizations/${id}/goals`);\r\n  const pushGoal = goalsRef.push();\r\n  const ref = db.ref(`organizations/${id}/categories`);\r\n  let [dbCategory, setDbCategory] = useState([]);\r\n\r\n  const getCategories= ()=>{\r\n    ref.on(\"value\", (snapshot) => {\r\n      let categoryArray = [];\r\n      snapshot.forEach((data) => {\r\n        let resData = data.val();\r\n        let dataKey = data.key;\r\n        resData.id = dataKey;\r\n        categoryArray.push(resData);\r\n      });\r\n      setDbCategory(categoryArray);\r\n    });\r\n  }\r\n\r\n  useEffect(()=>{\r\n    getCategories()\r\n    return ()=>{\r\n    getCategories()\r\n\r\n    }\r\n  },[])\r\n\r\n  // add goals in database\r\n\r\n  const handleAddGoals = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    createStorageRef().then(() => {\r\n      downLoad().then((url) => {\r\n        pushGoal\r\n          .set({\r\n            inputValues,\r\n            // numberOfDays,\r\n            url,\r\n            peopleJoined: 0,\r\n            used:false\r\n          })\r\n          .then(() => {\r\n            setLoading(false);\r\n            history.push(`/organizations/${id}/dashboard`);\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n            setLoading(false);\r\n          });\r\n      });\r\n    });\r\n    // console.log(inputValues);\r\n    setInputValues(goalsInput);\r\n    setImgurl(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"createGoals_container\">\r\n        <div className=\"createGoals_md\">\r\n          <div className=\"dashboard_left_content\">\r\n            <MiniDrawer />\r\n          </div>\r\n          <div className=\"create_goals_right_content\">\r\n            <div className=\"top_route_head\">\r\n              <p className=\"top_route_icon\">\r\n                <PersonIcon />\r\n              </p>\r\n              <p style={{ marginLeft: \"10px\" }}>Goals</p>\r\n            </div>\r\n            <div className=\"create_goals_box_main\">\r\n              <CreateGoals\r\n                handleAddGoals={handleAddGoals}\r\n                handleInputGoals={handleGoals}\r\n                handleGoalImg={handleGoalImg}\r\n                inputValues={inputValues}\r\n                imgUrl={imgUrl}\r\n                loading={loading}\r\n                btnValue=\"Add goals\"\r\n                dbCategory={dbCategory}\r\n                backArrowPathId={`/organizations/${id}/dashboard`}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\Dashboard\\Dashboard.jsx",["314"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport MiniDrawer from \"../../Sidebar\";\r\nimport GoalsTable from \"./GoalsTable\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport { useParams } from \"react-router\";\r\nimport \"./style.css\";\r\nimport SearchInput from \"../../../../Components/SearchInput\";\r\nimport firebase from \"../../../../Config/FirebaseConfig\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {\r\n  setGoalsAtoZ,\r\n  highToLow,\r\n  filterWithEndDate,\r\n  filterWithEventName,\r\n  selectedCategory,\r\n} from \"../../../../GlobalState/CreateSlice\";\r\n\r\nconst Dashboard = () => {\r\n  const { id } = useParams();\r\n  const dispatch = useDispatch();\r\n  const db = firebase.database();\r\n  const dbRef = db.ref(`organizations/${id}/categories`);\r\n  let [category, setCateggory] = useState([]);\r\n  let [searchGoalsWithCategory] = useState(\"\");\r\n  let [filteredGoals] = useState([]);\r\n\r\n  // get  organization Category from database\r\n  const getFilterOrgGoals = () => {\r\n    dbRef.on(\"value\", (snapshot) => {\r\n      let orgCategoryArry = [];\r\n      snapshot.forEach((data) => {\r\n        const getData = data.val();\r\n        const getId = data.key;\r\n        getData.id = getId;\r\n        orgCategoryArry.push(getData);\r\n      });\r\n      setCateggory(orgCategoryArry);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getFilterOrgGoals();\r\n    return () => {\r\n      getFilterOrgGoals();\r\n    };\r\n  }, []);\r\n\r\n  const selector = useSelector((state) => {\r\n    return state.goalReducer;\r\n  });\r\n\r\n  // goals search function\r\n  const handleChange = (e) => {\r\n    dispatch(filterWithEventName(e.target.value));\r\n  };\r\n\r\n  const handleAtoZ = (e) => {\r\n    //  console.log(e.target.value)\r\n    dispatch(setGoalsAtoZ(e.target.value));\r\n  };\r\n\r\n  const handleHighToLow = (e) => {\r\n    dispatch(highToLow(e.target.value));\r\n  };\r\n\r\n  const handleDateFilter = (e) => {\r\n    dispatch(filterWithEndDate(e.target.value));\r\n    // console.log(e.target.value)\r\n  };\r\n\r\n  const handleCategory = (e) => {\r\n    dispatch(selectedCategory(e.target.value));\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard_container\">\r\n      <div className=\"dashboard_md\">\r\n        <div className=\"dashboard_left_content\">\r\n          <MiniDrawer />\r\n        </div>\r\n        <div className=\"dashboard_right_content\">\r\n          <div className=\"dashboard_main_md\">\r\n            <div className=\"searchInputBox\">\r\n              <SearchInput category={category} handleChange={handleChange} />\r\n            </div>\r\n            <div className=\"tableAnd_tabs_container\">\r\n              <div className=\"table_tabs_head\">\r\n                <div className=\"tb_tabs_headContent\">\r\n                  <p>Goals list</p>\r\n                </div>\r\n                <div className=\"create_goals_link\">\r\n                  <Link\r\n                    to={`/organizations/${id}/create-goals`}\r\n                    className=\"cus_btn\"\r\n                  >\r\n                    Create goals <AddCircleOutlineIcon className=\"add_icon\" />\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n              <div className=\"filters_section\">\r\n                <select name=\"asc\" id=\"asc\" onChange={handleHighToLow}>\r\n                  <option value=\"\">ASC / DSC</option>\r\n                  <option value=\"htl\">ascending</option>\r\n                  <option value=\"lth\">descending</option>\r\n                </select>\r\n                <select\r\n                  name=\"asc\"\r\n                  id=\"asc\"\r\n                  onChange={handleAtoZ}\r\n                  style={{ marginLeft: \"10px\" }}\r\n                >\r\n                  <option value=\"\"> A to Z / Z toA</option>\r\n                  <option value=\"atoz\">A to Z</option>\r\n                  <option value=\"ztoa\">Z to A</option>\r\n                </select>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"filter\"\r\n                  id=\"filter\"\r\n                  placeholder=\"Date format(yyyy-mm-dd)\"\r\n                  style={{ marginLeft: \"10px\" }}\r\n                  onChange={handleDateFilter}\r\n                />\r\n                <div className=\"category_filter\">\r\n                  <Autocomplete\r\n                    id=\"grouped-demo\"\r\n                    options={category.map((val) => val.category)}\r\n                    // options={false}\r\n                    style={{ width: 300 }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"With categories\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                    )}\r\n                    onSelect={handleCategory}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <GoalsTable\r\n                searchGoalsWithCategory={searchGoalsWithCategory}\r\n                selector={\r\n                  !searchGoalsWithCategory ? selector.OrgGoals : filteredGoals\r\n                }\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\UpdateGoals.jsx\\Index.jsx",["315"],"import React, { useEffect, useState } from 'react'\r\nimport MiniDrawer from '../../Sidebar'\r\nimport PersonIcon from '@material-ui/icons/Person'\r\nimport CreateGoals from '../CreateGoals/CreateGoals'\r\nimport { useSelector } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\nimport firebase from '../../../../Config/FirebaseConfig'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst goalsInput = {\r\n  eventName: '',\r\n  description: '',\r\n  dificulty: '',\r\n  endDate: '',\r\n  investMin: '',\r\n  investMax: '',\r\n  rewardMin: '',\r\n  rewardMax: '',\r\n  startDate: '',\r\n  numberOfDays: '',\r\n}\r\n\r\nconst UpdateGoals = () => {\r\n  const history = useHistory()\r\n  let { id, goal } = useParams()\r\n  const [inputValues, setInputValues] = useState(goalsInput)\r\n  const [imgUrl, setImgurl] = useState('')\r\n  const [imgName, setImgName] = useState('')\r\n  const [local, setLocal] = useState('')\r\n  let [filterGoal, setFilterGoal] = useState([])\r\n  let [editGoalId, setEditGoalId] = useState('')\r\n  let [loading, setLoading] = useState(false)\r\n  const db = firebase.database()\r\n\r\n  const goals = useSelector((state) => {\r\n    return state.goalReducer.OrgGoals\r\n  })\r\n\r\n  const ref = db.ref(`organizations/${id}/categories`)\r\n  let [dbCategory, setDbCategory] = useState([])\r\n\r\n  const getCategories = () => {\r\n    ref.on('value', (snapshot) => {\r\n      let categoryArray = []\r\n      snapshot.forEach((data) => {\r\n        let resData = data.val()\r\n        let dataKey = data.key\r\n        resData.id = dataKey\r\n        categoryArray.push(resData)\r\n      })\r\n      setDbCategory(categoryArray)\r\n    })\r\n  }\r\n\r\n  // useEffect(()=>{\r\n  // },[])\r\n\r\n  // console.log(goals)\r\n  useEffect(() => {\r\n    //   filter selected goal detail\r\n    let goalsFilter = goals.filter((val) => val.id === goal)\r\n    setFilterGoal(goalsFilter)\r\n    if (goalsFilter.length) {\r\n      setImgurl(goalsFilter[0].url)\r\n      setInputValues(goalsFilter[0].inputValues)\r\n      setEditGoalId(goalsFilter[0].id)\r\n    }\r\n    getCategories()\r\n    return () => {\r\n      getCategories()\r\n    }\r\n  }, [])\r\n\r\n  const handleGoals = (event) => {\r\n    setInputValues({ ...inputValues, [event.target.name]: event.target.value })\r\n  }\r\n\r\n  const handleGoalImg = (event) => {\r\n    const url = URL.createObjectURL(event.target.files[0])\r\n    const goalImgName = event.target.files[0].name\r\n    setImgurl(url)\r\n    setImgName(goalImgName)\r\n    setLocal(event.target.files[0])\r\n  }\r\n  // firebase storage ref\r\n  const storage = firebase.storage()\r\n  let createStorageRef = () => storage.ref(`goalsImages/${imgName}`).put(local)\r\n  let downLoad = () => storage.ref(`goalsImages/${imgName}`).getDownloadURL()\r\n\r\n  // firebase database reference\r\n  const goalsRef = db.ref(`organizations/${id}/goals/` + editGoalId)\r\n\r\n  const handleEmptyImg = () => {\r\n    setImgurl('')\r\n  }\r\n\r\n  // update goals in database\r\n  const handleUpdateGoals = (e) => {\r\n    e.preventDefault()\r\n    setLoading(true)\r\n    if (local) {\r\n      createStorageRef().then(() => {\r\n        downLoad().then((url) => {\r\n          goalsRef\r\n            .update({\r\n              inputValues,\r\n              url,\r\n              // numberOfDays,\r\n              peopleJoined: 0,\r\n            })\r\n            .then(() => {\r\n              setLoading(false)\r\n              history.push(`/organizations/${id}/dashboard`)\r\n            })\r\n            .catch((err) => {\r\n              console.log(err)\r\n              setLoading(false)\r\n            })\r\n        })\r\n      })\r\n    } else {\r\n      goalsRef\r\n        .update({\r\n          inputValues,\r\n          // numberOfDays,\r\n        })\r\n        .then(() => {\r\n          setLoading(false)\r\n          history.push(`/organizations/${id}/dashboard`)\r\n        })\r\n        .catch((err) => {\r\n          console.log(err)\r\n          setLoading(false)\r\n        })\r\n    }\r\n    // console.log(inputValues);\r\n    setInputValues(goalsInput)\r\n    setImgurl('')\r\n  }\r\n\r\n  if (!filterGoal.length) {\r\n    return (\r\n      <div>\r\n        <p>Loading</p>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"createGoals_container\">\r\n        <div className=\"createGoals_md\">\r\n          <div className=\"dashboard_left_content\">\r\n            <MiniDrawer />\r\n          </div>\r\n          <div className=\"create_goals_right_content\">\r\n            <div className=\"top_route_head\">\r\n              <p className=\"top_route_icon\">\r\n                <PersonIcon />\r\n              </p>\r\n              <p style={{ marginLeft: '10px' }}>Goals</p>\r\n            </div>\r\n            <div className=\"create_goals_box_main\">\r\n              <CreateGoals\r\n                handleAddGoals={handleUpdateGoals}\r\n                handleInputGoals={handleGoals}\r\n                handleGoalImg={handleGoalImg}\r\n                inputValues={inputValues}\r\n                imgUrl={imgUrl}\r\n                loading={loading}\r\n                btnValue=\"Confirm\"\r\n                handleEmptyImg={handleEmptyImg}\r\n                cross\r\n                backArrowPathId={`/organizations/${id}/dashboard`}\r\n                dbCategory={dbCategory}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UpdateGoals\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\CreateGoals\\Index.jsx",["316"],"import React, { useState, useEffect } from \"react\";\r\nimport MiniDrawer from \"../../Sidebar\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport CreateGoals from \"../../WithOrganizations/CreateGoals/CreateGoals\";\r\nimport firebase from \"../../../../Config/FirebaseConfig\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst goalsInput = {\r\n  eventName: \"\",\r\n  description: \"\",\r\n  dificulty: \"\",\r\n  endDate: \"\",\r\n  investMin: \"\",\r\n  investMax: \"\",\r\n  rewardMin: \"\",\r\n  rewardMax: \"\",\r\n  startDate: \"\",\r\n  category: \"\",\r\n  numberOfDays:''\r\n};\r\n\r\nconst WithOutOrgGoalsCreate = () => {\r\n  const history = useHistory();\r\n  const [inputValues, setInputValues] = useState(goalsInput);\r\n  const [imgUrl, setImgurl] = useState(\"\");\r\n  const [imgName, setImgName] = useState(\"\");\r\n  const [local, setLocal] = useState(\"\");\r\n  // loading\r\n  let [loading, setLoading] = useState(false);\r\n  const handleGoals = (event) => {\r\n    setInputValues({ ...inputValues, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const handleGoalImg = (event) => {\r\n    const url = URL.createObjectURL(event.target.files[0]);\r\n    const goalImgName = event.target.files[0].name;\r\n    setImgurl(url);\r\n    setImgName(goalImgName);\r\n    setLocal(event.target.files[0]);\r\n  };\r\n  // firebase storage ref\r\n  const storage = firebase.storage();\r\n  let createStorageRef = () => storage.ref(`goalsImages/${imgName}`).put(local);\r\n  let downLoad = () => storage.ref(`goalsImages/${imgName}`).getDownloadURL();\r\n\r\n  // firebase database reference\r\n  const db = firebase.database();\r\n  const goalsRef = db.ref(`withoutOrganization/goals`);\r\n  const pushGoal = goalsRef.push();\r\n  const ref = db.ref(`withoutOrganization/categories`);\r\n  let [dbCategory, setDbCategory] = useState([]);\r\n\r\n  const getCategories = () => {\r\n    ref.on(\"value\", (snapshot) => {\r\n      let categoryArray = [];\r\n      snapshot.forEach((data) => {\r\n        let resData = data.val();\r\n        let dataKey = data.key;\r\n        resData.id = dataKey;\r\n        categoryArray.push(resData);\r\n      });\r\n      setDbCategory(categoryArray);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCategories();\r\n    return () => {\r\n      getCategories();\r\n    };\r\n  }, []);\r\n\r\n  // add goals in database\r\n\r\n  const handleAddGoals = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    createStorageRef().then(() => {\r\n      downLoad().then((url) => {\r\n        pushGoal\r\n          .set({\r\n            inputValues,\r\n            url,\r\n            peopleJoined: 0,\r\n          })\r\n          .then(() => {\r\n            setLoading(false);\r\n            history.push(`/without-organization/dashboard`);\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n            setLoading(false);\r\n          });\r\n      });\r\n    });\r\n    setInputValues(goalsInput);\r\n    setImgurl(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"createGoals_container\">\r\n        <div className=\"createGoals_md\">\r\n          <div className=\"dashboard_left_content\">\r\n            <MiniDrawer withOutOrg />\r\n          </div>\r\n          <div className=\"create_goals_right_content\">\r\n            <div className=\"top_route_head\">\r\n              <p className=\"top_route_icon\">\r\n                <PersonIcon />\r\n              </p>\r\n              <p style={{ marginLeft: \"10px\" }}>Goals</p>\r\n            </div>\r\n            <div className=\"create_goals_box_main\">\r\n              <CreateGoals\r\n                handleAddGoals={handleAddGoals}\r\n                handleInputGoals={handleGoals}\r\n                handleGoalImg={handleGoalImg}\r\n                inputValues={inputValues}\r\n                imgUrl={imgUrl}\r\n                loading={loading}\r\n                btnValue=\"Add goals\"\r\n                backArrowPathId=\"/without-organization/dashboard\"\r\n                dbCategory={dbCategory}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WithOutOrgGoalsCreate;\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\Dashboard\\Dashboard.jsx",["317"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport MiniDrawer from \"../../Sidebar\";\r\nimport GoalsTable from \"./GoalsTable\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport \"./style.css\";\r\nimport SearchInput from \"../../../../Components/SearchInput\";\r\nimport firebase from \"../../../../Config/FirebaseConfig\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {\r\n  setWithoutOrgGoalsAtoZ,\r\n  highToLowWithoutOrgGoals,\r\n  filterWithEndDateWithoutOrg,\r\n  filterWithEventNameWithoutOrg,\r\n  selectedCategoryWithoutOrg,\r\n} from \"../../../../GlobalState/CreateSlice\";\r\n\r\nconst WithoutOrganizationDashboard = () => {\r\n  const dispatch = useDispatch();\r\n  const db = firebase.database();\r\n  const dbRef = db.ref(`withoutOrganization/categories`);\r\n  let [category, setCateggory] = useState([]);\r\n\r\n  // get  organization Category from database\r\n  const getFilterOrgGoals = () => {\r\n    dbRef.on(\"value\", (snapshot) => {\r\n      let orgCategoryArry = [];\r\n      snapshot.forEach((data) => {\r\n        const getData = data.val();\r\n        const getId = data.key;\r\n        getData.id = getId;\r\n        orgCategoryArry.push(getData);\r\n      });\r\n      setCateggory(orgCategoryArry);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getFilterOrgGoals();\r\n    return () => {\r\n      getFilterOrgGoals();\r\n    };\r\n  }, []);\r\n\r\n  const selector = useSelector((state) => {\r\n    return state.goalReducer;\r\n  });\r\n\r\n  // goals search function\r\n  const handleChange = (e) => {\r\n    dispatch(filterWithEventNameWithoutOrg(e.target.value));\r\n  };\r\n\r\n  const handleAtoZ = (e) => {\r\n    dispatch(setWithoutOrgGoalsAtoZ(e.target.value));\r\n  };\r\n\r\n  const handleHighToLow = (e) => {\r\n    dispatch(highToLowWithoutOrgGoals(e.target.value));\r\n  };\r\n\r\n  const handleDateFilter = (e) => {\r\n    dispatch(filterWithEndDateWithoutOrg(e.target.value));\r\n  };\r\n\r\n  const handleCategory = (e) => {\r\n    dispatch(selectedCategoryWithoutOrg(e.target.value));\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard_container\">\r\n      <div className=\"dashboard_md\">\r\n        <div className=\"dashboard_left_content\">\r\n          <MiniDrawer withOutOrg />\r\n        </div>\r\n        <div className=\"dashboard_right_content\">\r\n          <div className=\"dashboard_main_md\">\r\n            <div className=\"searchInputBox\">\r\n              <SearchInput category={category} handleChange={handleChange} />\r\n            </div>\r\n            <div className=\"tableAnd_tabs_container\">\r\n              <div className=\"table_tabs_head\">\r\n                <div className=\"tb_tabs_headContent\">\r\n                  <p>Goals list</p>\r\n                </div>\r\n                <div className=\"create_goals_link\">\r\n                  <Link\r\n                    to={`/without-organization/create-goals`}\r\n                    className=\"cus_btn\"\r\n                  >\r\n                    Create goals <AddCircleOutlineIcon className=\"add_icon\" />\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n              <div className=\"filters_section\">\r\n                <select name=\"asc\" id=\"asc\" onChange={handleHighToLow}>\r\n                  <option value=\"\">ASC / DSC</option>\r\n                  <option value=\"htl\">ascending</option>\r\n                  <option value=\"lth\">descending</option>\r\n                </select>\r\n                <select\r\n                  name=\"asc\"\r\n                  id=\"asc\"\r\n                  onChange={handleAtoZ}\r\n                  style={{ marginLeft: \"10px\" }}\r\n                >\r\n                  <option value=\"\">A to Z / Z toA</option>\r\n                  <option value=\"atoz\">A to Z</option>\r\n                  <option value=\"ztoa\">Z to A</option>\r\n                </select>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"filter\"\r\n                  id=\"filter\"\r\n                  placeholder=\"Enter date format(yyyy-mm-dd)\"\r\n                  style={{ marginLeft: \"10px\" }}\r\n                  onChange={handleDateFilter}\r\n                />\r\n                <div className=\"category_filter\">\r\n                  <Autocomplete\r\n                    id=\"grouped-demo\"\r\n                    options={category.map((val) => val.category)}\r\n                    style={{ width: 300 }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"With categories\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                    )}\r\n                    onSelect={handleCategory}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <GoalsTable selector={selector.withoutOrgGoals} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WithoutOrganizationDashboard;\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\GoalsDetailPage\\Index.jsx",["318"],"import React, { useEffect, useState } from \"react\";\r\nimport GoalsDetail from \"./GoalsDetail\";\r\nimport MiniDrawer from \"../../Sidebar\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport { useSelector } from \"react-redux\";\r\nimport firebase from \"../../../../Config/FirebaseConfig\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst WithoutOrgGoalDetail = () => {\r\n  const db = firebase.database();\r\n  const history = useHistory(useHistory);\r\n  let { goal } = useParams();\r\n  let [filterGoal, setFilterGoal] = useState([]);\r\n  let [loading, setLoading] = useState(false);\r\n  const goals = useSelector((state) => {\r\n    return state.goalReducer.withoutOrgGoals;\r\n  });\r\n  useEffect(() => {\r\n    //   filter selected goal detail\r\n    let goalsFilter = goals.filter((val) => val.id === goal);\r\n    setFilterGoal(goalsFilter);\r\n  }, []);\r\n\r\n  //   delete gaol function\r\n  const deleteGoals = (event) => {\r\n    setLoading(true);\r\n    db.ref(`withoutOrganization/goals/${event}`)\r\n      .remove()\r\n      .then(() => {\r\n        setFilterGoal([]);\r\n        setLoading(false);\r\n        history.push(`/without-organization/dashboard`);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setLoading(false);\r\n      });\r\n  };\r\n  const editGoal = (event) => {\r\n    history.push(`/without-organization/edit-goal/${event}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"goals_detail_container\">\r\n      <div className=\"dashboard_left_content\">\r\n        <MiniDrawer withOutOrg />\r\n      </div>\r\n      <div className=\"goals_detailMd_right_content\">\r\n        <div className=\"top_route_head\">\r\n          <p className=\"top_route_icon\">\r\n            <PersonIcon />\r\n          </p>\r\n          <p style={{ marginLeft: \"10px\" }}>Goals</p>\r\n        </div>\r\n        <GoalsDetail\r\n          goalDetail={filterGoal[0]}\r\n          deleteGoals={deleteGoals}\r\n          loading={loading}\r\n          editGoal={editGoal}\r\n          backArrowPathId=\"/without-organization/dashboard\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WithoutOrgGoalDetail;\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\SubmitGoals\\Index.jsx",["319"],"import React, { useEffect } from 'react'\r\nimport firebase from '../../../../Config/FirebaseConfig'\r\nimport { useParams } from 'react-router-dom'\r\nimport {\r\n  allSubmitOrgGoals,\r\n  setOrgApprovedGoals,\r\n  setOrgDeclineGoals,\r\n  setReportGoals,\r\n  setFakeGoals,\r\n} from '../../../../GlobalState/CreateSlice'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport MiniDrawer from '../../Sidebar'\r\nimport SubmitGoalsTable from './SubmitGoalsTable'\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Tabs from '@material-ui/core/Tabs'\r\nimport Tab from '@material-ui/core/Tab'\r\nimport Box from '@material-ui/core/Box'\r\nimport './submitGoal.css'\r\nimport { getOrgUsers } from '../OrganizationUsers/UserList'\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`scrollable-auto-tabpanel-${index}`}\r\n      aria-labelledby={`scrollable-auto-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box p={3}>{children}</Box>}\r\n    </div>\r\n  )\r\n}\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n}\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `scrollable-auto-tab-${index}`,\r\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\r\n  }\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    width: '100%',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}))\r\n\r\nconst SubmitedGoals = () => {\r\n  const classes = useStyles()\r\n  const [value, setValue] = React.useState(0)\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue)\r\n  }\r\n  const { id } = useParams()\r\n  const dispatch = useDispatch()\r\n  const db = firebase.database()\r\n  const dbRef = db.ref(`organizations/${id}/submitGoals`)\r\n\r\n  // get filter organization goals from database\r\n  const getFilterOrgGoals = () => {\r\n    dbRef.on('value', (snapshot) => {\r\n      let submitOrgGoalsArry = []\r\n      let approvedOrgGoals = []\r\n      let declineOrgGoals = []\r\n      let reportGoalArray = []\r\n      let fakeGoal = []\r\n      snapshot.forEach((data) => {\r\n        const getData = data.val()\r\n        // console.log(getData)\r\n        const getId = data.key\r\n        getData.submitGoalId = getId\r\n        // if goals in pending\r\n        if (!getData.approved && !getData.decline && !getData.isReport) {\r\n          //  console.log(getData.approved)\r\n          submitOrgGoalsArry.push(getData)\r\n        }\r\n        // if goals is approved\r\n        else if (getData.approved && !getData.isReport) {\r\n          approvedOrgGoals.push(getData)\r\n        } else if (getData.decline) {\r\n          declineOrgGoals.push(getData)\r\n        } else if (getData.isReport && !getData.acceptReport) {\r\n          reportGoalArray.push(getData)\r\n        }  if (getData.isReport && getData.acceptReport) {\r\n          fakeGoal.push(getData)\r\n          // console.log(getData)\r\n        }\r\n        // console.log(getData)\r\n      })\r\n      // submit goals\r\n      dispatch(allSubmitOrgGoals(submitOrgGoalsArry))\r\n      // approved goal\r\n      dispatch(setOrgApprovedGoals(approvedOrgGoals))\r\n      // decline goals\r\n      dispatch(setOrgDeclineGoals(declineOrgGoals))\r\n      // report goals\r\n      dispatch(setReportGoals(reportGoalArray))\r\n      // fake goals report\r\n      dispatch(setFakeGoals(fakeGoal))\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getFilterOrgGoals()\r\n    getOrgUsers(id, dispatch)\r\n  }, [])\r\n\r\n  const selector = useSelector((state) => {\r\n    return state.goalReducer\r\n  })\r\n    // console.log(selector)\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"dashboard_md\">\r\n        <div className=\"dashboard_left_content\">\r\n          <MiniDrawer />\r\n        </div>\r\n        <div className={`${classes.root} submitd_table_md`}>\r\n          <AppBar position=\"static\" color=\"default\">\r\n            <Tabs\r\n              value={value}\r\n              onChange={handleChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"scrollable\"\r\n              scrollButtons=\"auto\"\r\n              aria-label=\"scrollable auto tabs example\"\r\n            >\r\n              <Tab label=\"Submit Goals\" {...a11yProps(0)} />\r\n              <Tab label=\"Approved Goals\" {...a11yProps(1)} />\r\n              <Tab label=\"Decline Goals\" {...a11yProps(2)} />\r\n              <Tab label=\"Report Goals\" {...a11yProps(3)} />\r\n              <Tab label=\"Fake Goals\" {...a11yProps(4)} />\r\n            </Tabs>\r\n          </AppBar>\r\n          <TabPanel value={value} index={0}>\r\n            <SubmitGoalsTable selector={selector.allSubmitGoals} />\r\n          </TabPanel>\r\n          <TabPanel value={value} index={1}>\r\n            <SubmitGoalsTable\r\n              selector={selector.allOrgApprovedGoals}\r\n              btn\r\n              approvedUndo\r\n              undoFunc\r\n            />\r\n          </TabPanel>\r\n          <TabPanel value={value} index={2}>\r\n            <SubmitGoalsTable\r\n              selector={selector.allDeclineOrgGoals}\r\n              btn\r\n              undoFunc\r\n            />\r\n          </TabPanel>\r\n          <TabPanel value={value} index={3}>\r\n            <SubmitGoalsTable\r\n              selector={selector.reportGoals}\r\n              btn\r\n              declineBtn\r\n              declineForReported\r\n              undoForReported\r\n            />\r\n          </TabPanel>\r\n          <TabPanel value={value} index={4}>\r\n            <SubmitGoalsTable\r\n              selector={selector.fakeGoals}\r\n              btn\r\n              declineBtn\r\n              undoFake\r\n            />\r\n          </TabPanel>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SubmitedGoals\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\UpdateGoals.jsx\\Index.jsx",["320"],"import React, { useEffect, useState } from \"react\";\r\nimport MiniDrawer from \"../../Sidebar\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport CreateGoals from \"../../WithOrganizations/CreateGoals/CreateGoals\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport firebase from \"../../../../Config/FirebaseConfig\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst goalsInput = {\r\n  eventName: \"\",\r\n  description: \"\",\r\n  dificulty: \"\",\r\n  endDate: \"\",\r\n  investMin: \"\",\r\n  investMax: \"\",\r\n  rewardMin: \"\",\r\n  rewardMax: \"\",\r\n  startDate: \"\",\r\n  numberOfDays:''\r\n};\r\n\r\nconst WitoutOrgUpdateGoals = () => {\r\n  const history = useHistory();\r\n  let { goal } = useParams();\r\n  const [inputValues, setInputValues] = useState(goalsInput);\r\n  const [imgUrl, setImgurl] = useState(\"\");\r\n  const [imgName, setImgName] = useState(\"\");\r\n  const [local, setLocal] = useState(\"\");\r\n  let [filterGoal, setFilterGoal] = useState([]);\r\n  let [editGoalId, setEditGoalId] = useState(\"\");\r\n  let [loading, setLoading] = useState(false);\r\n  const db = firebase.database();\r\n  const ref = db.ref(`withoutOrganization/categories`);\r\n  const goals = useSelector((state) => {\r\n    return state.goalReducer.withoutOrgGoals;\r\n  });\r\n\r\n  let [dbCategory, setDbCategory] = useState([]);\r\n\r\n  const getCategories = () => {\r\n    ref.on(\"value\", (snapshot) => {\r\n      let categoryArray = [];\r\n      snapshot.forEach((data) => {\r\n        let resData = data.val();\r\n        let dataKey = data.key;\r\n        resData.id = dataKey;\r\n        categoryArray.push(resData);\r\n      });\r\n      setDbCategory(categoryArray);\r\n    });\r\n  };\r\n  // console.log(goals)\r\n  useEffect(() => {\r\n    //   filter selected goal detail\r\n    let goalsFilter = goals.filter((val) => val.id === goal);\r\n    setFilterGoal(goalsFilter);\r\n    if (goalsFilter.length) {\r\n      setImgurl(goalsFilter[0].url);\r\n      setInputValues(goalsFilter[0].inputValues);\r\n      setEditGoalId(goalsFilter[0].id);\r\n    }\r\n    getCategories();\r\n    return () => {\r\n      getCategories();\r\n    };\r\n  }, []);\r\n\r\n  const handleGoals = (event) => {\r\n    setInputValues({ ...inputValues, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const handleGoalImg = (event) => {\r\n    const url = URL.createObjectURL(event.target.files[0]);\r\n    const goalImgName = event.target.files[0].name;\r\n    setImgurl(url);\r\n    setImgName(goalImgName);\r\n    setLocal(event.target.files[0]);\r\n  };\r\n  // firebase storage ref\r\n  const storage = firebase.storage();\r\n  let createStorageRef = () => storage.ref(`goalsImages/${imgName}`).put(local);\r\n  let downLoad = () => storage.ref(`goalsImages/${imgName}`).getDownloadURL();\r\n\r\n  // firebase database reference\r\n  const goalsRef = db.ref(`withoutOrganization/goals/` + editGoalId);\r\n\r\n  const handleEmptyImg = () => {\r\n    setImgurl(\"\");\r\n  };\r\n\r\n  // update goals in database\r\n  const handleUpdateGoals = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    if (local) {\r\n      createStorageRef().then(() => {\r\n        downLoad().then((url) => {\r\n          goalsRef\r\n            .update({\r\n              inputValues,\r\n              url,\r\n              peopleJoined: 0,\r\n            })\r\n            .then(() => {\r\n              setLoading(false);\r\n              history.push(`/without-organization/dashboard`);\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n              setLoading(false);\r\n            });\r\n        });\r\n      });\r\n    } else {\r\n      goalsRef\r\n        .update({\r\n          inputValues,\r\n          // numberOfDays,\r\n        })\r\n        .then(() => {\r\n          setLoading(false);\r\n          history.push(`/without-organization/dashboard`);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setLoading(false);\r\n        });\r\n    }\r\n    // console.log(inputValues);\r\n    setInputValues(goalsInput);\r\n    setImgurl(\"\");\r\n  };\r\n\r\n  if (!filterGoal.length) {\r\n    return (\r\n      <div>\r\n        <p>Loading</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"createGoals_container\">\r\n        <div className=\"createGoals_md\">\r\n          <div className=\"dashboard_left_content\">\r\n            <MiniDrawer withOutOrg />\r\n          </div>\r\n          <div className=\"create_goals_right_content\">\r\n            <div className=\"top_route_head\">\r\n              <p className=\"top_route_icon\">\r\n                <PersonIcon />\r\n              </p>\r\n              <p style={{ marginLeft: \"10px\" }}>Goals</p>\r\n            </div>\r\n            <div className=\"create_goals_box_main\">\r\n              <CreateGoals\r\n                handleAddGoals={handleUpdateGoals}\r\n                handleInputGoals={handleGoals}\r\n                handleGoalImg={handleGoalImg}\r\n                inputValues={inputValues}\r\n                imgUrl={imgUrl}\r\n                loading={loading}\r\n                btnValue=\"Confirm\"\r\n                handleEmptyImg={handleEmptyImg}\r\n                cross\r\n                dbCategory={dbCategory}\r\n                backArrowPathId={\"/without-organization/dashboard\"}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WitoutOrgUpdateGoals;\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\SubmitGoals\\Index.jsx",["321"],"import React, { useEffect } from \"react\";\r\nimport firebase from \"../../../../Config/FirebaseConfig\";\r\nimport {\r\n  setWithoutOrgSubmitGoals,\r\n  setWithoutOrgApprovedGoals,\r\n  setWithoutOrgDeclineGoals,\r\n  setReportGoals,\r\n  setFakeGoalWithOutOrg\r\n} from \"../../../../GlobalState/CreateSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport MiniDrawer from \"../../Sidebar\";\r\nimport SubmitGoalsTable from \"./SubmitGoalsTable\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport \"./style.css\";\r\nimport { getOrgUsers } from \"../OrganizationUsers/UserList\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`scrollable-auto-tabpanel-${index}`}\r\n      aria-labelledby={`scrollable-auto-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          {children}\r\n          {/* <Typography> */}\r\n          {/* </Typography> */}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `scrollable-auto-tab-${index}`,\r\n    \"aria-controls\": `scrollable-auto-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    width: \"100%\",\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nconst WithoutOrgSubmitedGoals = () => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n  const dispatch = useDispatch();\r\n  const db = firebase.database();\r\n  const dbRef = db.ref(`withoutOrganization/submitGoals`);\r\n\r\n  // get filter organization goals from database\r\n  const getFilterOrgGoals = () => {\r\n    dbRef.on(\"value\", (snapshot) => {\r\n      let submitOrgGoalsArry = [];\r\n      let approvedOrgGoals = [];\r\n      let declineOrgGoals = [];\r\n      let reportGoalArray = [];\r\n      let fakeGoal = []\r\n      snapshot.forEach((data) => {\r\n        const getData = data.val();\r\n        console.log(getData);\r\n        const getId = data.key;\r\n        getData.submitGoalId = getId;\r\n        // if goals in pending\r\n        if (!getData.approved && !getData.decline && !getData.isReport) {\r\n          //  console.log(getData.approved)\r\n          submitOrgGoalsArry.push(getData)\r\n        }\r\n        // if goals is approved\r\n        else if (getData.approved && !getData.isReport) {\r\n          approvedOrgGoals.push(getData)\r\n        } else if (getData.decline) {\r\n          declineOrgGoals.push(getData)\r\n        } else if (getData.isReport && !getData.acceptReport) {\r\n          reportGoalArray.push(getData)\r\n        }  if (getData.isReport && getData.acceptReport) {\r\n          fakeGoal.push(getData)\r\n          // console.log(getData)\r\n        }\r\n        // console.log(getData)\r\n      })\r\n      // submit goals\r\n      dispatch(setWithoutOrgSubmitGoals(submitOrgGoalsArry));\r\n      // approved goal\r\n      dispatch(setWithoutOrgApprovedGoals(approvedOrgGoals));\r\n      // decline goals\r\n      dispatch(setWithoutOrgDeclineGoals(declineOrgGoals));\r\n      // report goals\r\n      dispatch(setReportGoals(reportGoalArray));\r\n      // fake goals \r\n      dispatch(setFakeGoalWithOutOrg(fakeGoal))\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getOrgUsers(dispatch);\r\n    getFilterOrgGoals();\r\n  }, []);\r\n\r\n\r\n  const selector = useSelector((state) => {\r\n    return state.goalReducer;\r\n  });\r\n  // console.log(selector)\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"dashboard_md\">\r\n        <div className=\"dashboard_left_content\">\r\n          <MiniDrawer withOutOrg />\r\n        </div>\r\n        <div className={`${classes.root} submitd_table_md`}>\r\n          <AppBar position=\"static\" color=\"default\">\r\n            <Tabs\r\n              value={value}\r\n              onChange={handleChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"scrollable\"\r\n              scrollButtons=\"auto\"\r\n              aria-label=\"scrollable auto tabs example\"\r\n            >\r\n              <Tab label=\"Submit Goals\" {...a11yProps(0)} />\r\n              <Tab label=\"Approved Goals\" {...a11yProps(1)} />\r\n              <Tab label=\"Decline Goals\" {...a11yProps(2)} />\r\n              <Tab label=\"Reported Goals\" {...a11yProps(3)} />\r\n              <Tab label=\"Fake Goals\" {...a11yProps(4)} />\r\n            </Tabs>\r\n          </AppBar>\r\n          <TabPanel value={value} index={0}>\r\n            <SubmitGoalsTable selector={selector.withoutOrgSubmitGoals} />\r\n          </TabPanel>\r\n          <TabPanel value={value} index={1}>\r\n            <SubmitGoalsTable\r\n              selector={selector.withourOrgApprovedGoals}\r\n              btn\r\n              declineBtn\r\n              approvedUndoFunc\r\n            />\r\n          </TabPanel>\r\n          <TabPanel value={value} index={2}>\r\n            <SubmitGoalsTable\r\n              selector={selector.withourOrgDeclineGoals}\r\n              btn\r\n              undoFunc\r\n            />\r\n          </TabPanel>\r\n          <TabPanel value={value} index={3}>\r\n            <SubmitGoalsTable\r\n              selector={selector.reportGoals}\r\n              btn\r\n              declineBtn\r\n              declineForReported\r\n              undoForReported\r\n            />\r\n          </TabPanel>\r\n          <TabPanel value={value} index={4}>\r\n            <SubmitGoalsTable\r\n              selector={selector.withoutOrgfakeGoal}\r\n              btn\r\n              declineBtn\r\n              undoFake\r\n            />\r\n          </TabPanel>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WithoutOrgSubmitedGoals;\r\n","D:\\EINC\\Project\\src\\Pages\\UserSide\\AllGoalsOfOrganization\\index.jsx",["322","323","324"],"import React, { useEffect } from 'react'\r\nimport MenuAppBar from '../../../Layout/Navbar'\r\nimport { useSelector } from 'react-redux'\r\nimport firebase from '../../../Config/FirebaseConfig'\r\nimport './style.css'\r\nimport GoalsTabs from './GoalsTabs'\r\nimport {\r\n  setAllGoals,\r\n  setCurrentUserOrganizationId,\r\n  setAllSubmittedGoals,\r\n} from '../../../GlobalState/UserSideSlice'\r\nimport { useDispatch } from 'react-redux'\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\r\nimport TextsmsOutlinedIcon from '@material-ui/icons/TextsmsOutlined'\r\nimport { Link } from 'react-router-dom'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\n\r\nconst AllGoalsOfOrganization = () => {\r\n  const db = firebase.database()\r\n  const dispatch = useDispatch()\r\n  // get current user detail\r\n  const userDetail = useSelector((state) => {\r\n    return state\r\n  })\r\n  // console.log(userDetail);\r\n  const { goalReducer } = userDetail\r\n\r\n  //  get goals function if user enrolled in  any org or not\r\n  const getGoals = async (parameter) => {\r\n    db.ref(parameter).on('value', (snapshot) => {\r\n      var goalsArray = []\r\n      snapshot.forEach((goals) => {\r\n        let getGoals = goals.val()\r\n        let getGoalsId = goals.key\r\n        getGoals.id = getGoalsId\r\n        goalsArray.push(getGoals)\r\n      })\r\n      dispatch(setAllGoals(goalsArray))\r\n    })\r\n  }\r\n\r\n  //  get submitted goals\r\n  const getSubmittedGoalsOfUser = async (parameter) => {\r\n    db.ref(parameter).on('value', (snapshot) => {\r\n      var goalsArray = []\r\n      snapshot.forEach((goals) => {\r\n        let getGoals = goals.val()\r\n        let getGoalsId = goals.key\r\n        if (getGoals.userIdMain === goalReducer.currentUser.id) {\r\n          getGoals.SubmitGoalId = getGoalsId\r\n          goalsArray.push(getGoals)\r\n        }\r\n      })\r\n      dispatch(setAllSubmittedGoals(goalsArray))\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    // condition for  if user enrolled in any organization\r\n    if (goalReducer.currentUser.orgId !== '') {\r\n      // get goals\r\n      getGoals(`organizations/${goalReducer.currentUser.orgId}/goals`)\r\n      //   get users selected goals\r\n      db.ref(`organizations/${goalReducer.currentUser.orgId}/users`).on(\r\n        'value',\r\n        (snapshot) => {\r\n          var UsersArray = []\r\n          snapshot.forEach((goals) => {\r\n            let getUsers = goals.val()\r\n            let getUserId = goals.key\r\n            getUsers.orgMainId = getUserId\r\n            UsersArray.push(getUsers)\r\n          })\r\n          UsersArray.filter((val) => {\r\n            if (val.email === goalReducer.currentUser.email) {\r\n              dispatch(setCurrentUserOrganizationId(val.orgMainId))\r\n              // get submitted goals\r\n              getSubmittedGoalsOfUser(\r\n                `organizations/${userDetail.goalReducer.currentUser.orgId}/submitGoals`,\r\n              )\r\n            }\r\n          })\r\n        },\r\n      )\r\n    } else {\r\n      // condition for  if user not enrolled in any organization\r\n      getGoals(`withoutOrganization/goals`)\r\n      //   get user selected goals\r\n      db.ref(`withoutOrganization/users/${goalReducer.currentUser.orgId}`).on(\r\n        'value',\r\n        (snapshot) => {\r\n          var UsersArray = []\r\n          snapshot.forEach((goals) => {\r\n            let getUsers = goals.val()\r\n            let getUserId = goals.key\r\n            getUsers.orgMainId = getUserId\r\n            UsersArray.push(getUsers)\r\n          })\r\n          UsersArray.filter((val) => {\r\n            if (val.email === goalReducer.currentUser.email) {\r\n              // console.log(val.orgMainId)\r\n              dispatch(setCurrentUserOrganizationId(val.orgMainId))\r\n              // get seletec goal\r\n              // get submitted goal\r\n              getSubmittedGoalsOfUser(`withoutOrganization/submitGoals`)\r\n            }\r\n          })\r\n        },\r\n      )\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"profile_container\">\r\n      <MenuAppBar />\r\n      <div className=\"mobViewHead\">\r\n        <div className=\"mobViewHeadMain\">\r\n          <div className=\"mobViewHeadContent \">\r\n            <div className=\"mobHeadBack\">\r\n              <Link className=\"mobHeadBack_link\" to=\"/selec-goals\">\r\n                <ArrowBackIosIcon />\r\n              </Link>\r\n            </div>\r\n            <h2>TRYVE</h2>\r\n            <div className=\"headChatIcon\">\r\n              <TextsmsOutlinedIcon />\r\n            </div>\r\n          </div>\r\n          <div className=\"searchBar_goals\">\r\n            <SearchIcon />\r\n            <input type=\"text\" placeholder=\"Search goals\" />\r\n          </div>\r\n          <div className=\"breadCrumbs\">\r\n            <div className=\"breadCrumbs_link\">\r\n              <p>My List / Favorites</p>\r\n              <Link className=\"white_link\" to=\"\">\r\n                See all\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"allGoals_main\">\r\n          <GoalsTabs />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AllGoalsOfOrganization\r\n","D:\\EINC\\Project\\src\\Pages\\UserSide\\VerificationGoal\\index.jsx",["325"],"import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport firebase from '../../../Config/FirebaseConfig'\r\nimport { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport './style.css'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport StarIcon from '@material-ui/icons/Star'\r\n\r\nconst VerificationPage = () => {\r\n  const db = firebase.database()\r\n  const history = useHistory()\r\n  const selector = useSelector((state) => {\r\n    return state\r\n  })\r\n\r\n  let [category, setCategory] = useState([])\r\n  const getCategories = (parameter) => {\r\n    db.ref(parameter).on('value', (snapshot) => {\r\n      let categoryArray = []\r\n      snapshot.forEach((data) => {\r\n        const resData = data.val()\r\n        const resKey = data.key\r\n        resData.CategoryId = resKey\r\n        categoryArray.push(resData)\r\n      })\r\n      setCategory(categoryArray)\r\n    })\r\n  }\r\n  useEffect(() => {\r\n    if (selector.goalReducer.currentUser.orgId !== '') {\r\n      getCategories(\r\n        `organizations/${selector.goalReducer.currentUser.orgId}/categories`,\r\n      )\r\n    } else {\r\n      getCategories(`withoutOrganization/categories`)\r\n    }\r\n    return () => {\r\n      setCategory([])\r\n    }\r\n  }, [])\r\n\r\n  const handleDetailPage = (event) => {\r\n    // console.log(event);\r\n    history.push(`/mygoal-detail/${event.id}`)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"verification_container\">\r\n        <div className=\"verificationMain\">\r\n          {category.map((val) => (\r\n            <div key={val.CategoryId}>\r\n              <h3 className=\"category_head\">{val.category}</h3>\r\n              <div className=\"verifyGoal_md\">\r\n                {selector.userReducer.selectedGoals.map((goal, i) => {\r\n                  return (\r\n                    <div\r\n                      className=\"verifyGoals\"\r\n                      style={\r\n                        goal.inputValues.category !== val.category \r\n                          ? { display: 'none' }\r\n                          : null\r\n                      }\r\n                      key={goal.myGoalId}\r\n                    >\r\n                      {goal.inputValues.category === val.category ? (\r\n                        <div\r\n                          className=\"goalsCard\"\r\n                          onClick={() => handleDetailPage(goal)}\r\n                        >\r\n                          <p className=\"isVerify\">\r\n                            Recruiting Expires D-2\r\n                          </p>\r\n                          <img\r\n                            className=\"verifyGoalImg\"\r\n                            src={goal.url}\r\n                            alt=\"\"\r\n                          />\r\n                          <div className=\"card_bd\">\r\n                            <p className=\"eventName\">\r\n                              {goal.inputValues.eventName}\r\n                            </p>\r\n                            <div className=\"ratings\">\r\n                              <div>\r\n                                {' '}\r\n                                <StarIcon className=\"starIcon\" /> <p> 4.94 </p>{' '}\r\n                              </div>\r\n                              <p className=\"joined\">\r\n                                Currently {goal.peopleJoined} Signed Up{' '}\r\n                              </p>\r\n                            </div>\r\n                            <div className=\"goalCounter\">\r\n                              <p className=\"goalLimitDate\">\r\n                                {goal.GoalStartDate}\r\n                              </p>\r\n                              <p className=\"goalWeek\">2w</p>\r\n                              <p className=\"goalWeek\">2d</p>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        \r\n                        <div>\r\n                          <Link to='/search-goals'>search goals</Link>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VerificationPage\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\Categories\\index.jsx",[],"D:\\EINC\\Project\\src\\Pages\\UserSide\\Feed\\index.jsx",["326","327"],"import React, { useEffect } from \"react\";\r\nimport MenuAppBar from \"../../../Layout/Navbar\";\r\nimport firebase from \"../../../Config/FirebaseConfig\";\r\n// import SmsIcon from \"@material-ui/icons/Sms\";\r\nimport \"./feed.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport UsersGoals from \"./UsersGoals\";\r\nimport { getFeedGoals, setPostsLike ,setPostComments} from \"../../../GlobalState/UserSideSlice\";\r\nimport TextsmsOutlinedIcon from '@material-ui/icons/TextsmsOutlined';\r\n// import LoadingState from \"../../../Components/Loading\";\r\n\r\n\r\nconst Feed = () => {\r\n  const db = firebase.database();\r\n  const dispatch = useDispatch();\r\n  const userDetail = useSelector((state) => {\r\n    return state.goalReducer.currentUser;\r\n  });\r\n  const submitGoal = useSelector((state) => {\r\n    return state.userReducer;\r\n  });\r\n\r\n  const getAllUsersGoals = (parameter) => {\r\n    db.ref(parameter).on(\"value\", (snapshot) => {\r\n      var goalsArray = [];\r\n      snapshot.forEach((goals) => {\r\n        let getGoals = goals.val();\r\n        let getGoalsId = goals.key;\r\n        getGoals.orgMainId = getGoalsId;\r\n        // console.log(getGoals)\r\n        if (getGoals.submit && !getGoals.acceptReport ) {\r\n          goalsArray.push(getGoals);\r\n        // console.log('in condition',getGoals)\r\n\r\n        }\r\n      });\r\n      dispatch(getFeedGoals(goalsArray));\r\n    });\r\n  };\r\n  // get post likes data\r\n  const getGoalsLikes = (parameter) => {\r\n    db.ref(parameter).on(\"value\", (snapshot) => {\r\n      var likesArray = [];\r\n      snapshot.forEach((goals) => {\r\n        goals.forEach((like) => {\r\n          let getLikes = like.val();\r\n          let getLikesId = like.key;\r\n          getLikes.likeId = getLikesId;\r\n          likesArray.push(getLikes);\r\n        });\r\n      });\r\n      dispatch(setPostsLike(likesArray));\r\n    });\r\n  };\r\n\r\n    // get post Comment data\r\n    const getGoalsComments = (parameter) => {\r\n      db.ref(parameter).orderByChild('timestamp').on(\"value\", (snapshot) => {\r\n        var commentsArray = [];\r\n        snapshot.forEach((goals) => {\r\n          goals.forEach((like) => {\r\n            let getComments = like.val();\r\n            let getCommentId = like.key;\r\n            getComments.commentId = getCommentId;\r\n            commentsArray.push(getComments);\r\n          });\r\n        });\r\n        dispatch(setPostComments(commentsArray));\r\n      });\r\n    };\r\n  \r\n  useEffect(() => {\r\n    // condition for  if user enrolled in any organization\r\n    if (userDetail.orgId !== \"\") {\r\n      getAllUsersGoals(`organizations/${userDetail.orgId}/submitGoals`);\r\n      getGoalsLikes(`organizations/${userDetail.orgId}/likes`);\r\n      getGoalsComments(`organizations/${userDetail.orgId}/comments`);\r\n      // }\r\n    } else {\r\n      getAllUsersGoals(`withoutOrganization/submitGoals`);\r\n      getGoalsLikes(`withoutOrganization/likes`);\r\n      getGoalsComments(`withoutOrganization/comments`);\r\n    }\r\n  }, []);\r\n\r\n  // const [loading, setLoading] = React.useState(true)\r\n\r\n  // useEffect(() => {\r\n  //   setTimeout(() => {\r\n  //     setLoading(false)\r\n  //   }, 1000)\r\n  // }, [])\r\n\r\n  return (\r\n    <div className=\"feedContainer\">\r\n      <MenuAppBar />\r\n      <div className=\"mobViewFeedHead\">\r\n        <div className=\"mobViewContent\">\r\n          <h3>My feed</h3>\r\n          <p>All of your personalised postsin all place</p>\r\n        </div>\r\n        <TextsmsOutlinedIcon className=\"feedSmsIcon\" />\r\n      </div>\r\n      <div className=\"feedMain\">\r\n        {/* {!loading? */}\r\n        <div className=\"feedContent\">\r\n          <UsersGoals />\r\n        </div>\r\n       {/* : <LoadingState /> } */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Feed;\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\OrganizationUsers\\index.jsx",[],"D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\Categories\\index.jsx",[],"D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\OrganizationUsers\\index.jsx",[],"D:\\EINC\\Project\\src\\Config\\FirebaseConfig.js",[],"D:\\EINC\\Project\\src\\Pages\\UserSide\\Profile\\UserDetailCard.jsx",["328"],"import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport TextsmsOutlinedIcon from \"@material-ui/icons/TextsmsOutlined\";\r\nimport firebase from \"../../../Config/FirebaseConfig\";\r\nimport AddAPhotoOutlinedIcon from \"@material-ui/icons/AddAPhotoOutlined\";\r\nimport dp from \"../../../Assets/dp.png\";\r\nimport { userlogOut, setCurrentUser } from \"../../../GlobalState/CreateSlice\";\r\nimport {\r\n  setAllSelectedGoals,\r\n  setCurrentUserOrganizationId,\r\n  setAllGoals,\r\n} from \"../../../GlobalState/UserSideSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport AlertDialog from \"../../../Components/AlertPopup\";\r\n\r\nconst UserDetailCard = ({ userDetail }) => {\r\n  const selector = useSelector((state) => {\r\n    return state;\r\n  });\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const auth = firebase.auth();\r\n  const db = firebase.database();\r\n  const [loading, setLoading] = useState(false);\r\n  const [imgUrl, setImgurl] = useState(\"\");\r\n  const [imgName, setImgName] = useState(\"\");\r\n  const [local, setLocal] = useState(\"\");\r\n\r\n  //  upload img function\r\n  const handleGoalImg = (event) => {\r\n    const url = URL.createObjectURL(event.target.files[0]);\r\n    const goalImgName = event.target.files[0].name;\r\n    setImgurl(url);\r\n    setImgName(goalImgName);\r\n    setLocal(event.target.files[0]);\r\n  };\r\n  const handleCancel = () => {\r\n    setImgurl(\"\");\r\n    setImgName(\"\");\r\n    setLocal(\"\");\r\n  };\r\n  // firebase storage ref\r\n  const storage = firebase.storage();\r\n  const userDb = firebase.database();\r\n  let createStorageRef = () => storage.ref(`dpImages/${imgName}`).put(local);\r\n  let downLoad = () => storage.ref(`dpImages/${imgName}`).getDownloadURL();\r\n  const handleUploadProfileImg = () => {\r\n    setLoading(true);\r\n    // set image in storage\r\n    createStorageRef().then(() => {\r\n      // download img from storage\r\n      downLoad().then((url) => {\r\n        userDb\r\n          .ref(`users/${userDetail.id}/${userDetail.pushId}`)\r\n          .update({ url })\r\n          .then(() => {\r\n            setLoading(false);\r\n            setImgurl(\"\");\r\n            setImgName(\"\");\r\n            setLocal(\"\");\r\n          })\r\n          .catch(() => {\r\n            setLoading(false);\r\n            setImgurl(\"\");\r\n            setImgName(\"\");\r\n            setLocal(\"\");\r\n          });\r\n      });\r\n    });\r\n  };\r\n  const handleLogout = () => {\r\n    auth\r\n      .signOut()\r\n      .then(() => {\r\n        dispatch(userlogOut(false));\r\n        dispatch(setCurrentUser({}));\r\n        dispatch(setAllGoals([]));\r\n        dispatch(setAllSelectedGoals([]));\r\n        dispatch(setCurrentUserOrganizationId(\"\"));\r\n        history.push(\"/login\");\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n\r\n  // add user balance working\r\n  let [showpopUp, setshowpopUp] = useState(false);\r\n  let [userId, setUserId] = useState(\"\");\r\n  let [userBalance, setUserBalance] = useState();\r\n  let [alertPopup, setAlertPopup] = useState(false);\r\n  const handleShowInput = () => {\r\n    setUserId(selector.userReducer.currentUserOfOrganization[0].orgMainId);\r\n    setUserBalance(selector.userReducer.currentUserOfOrganization[0].balance);\r\n    setshowpopUp(true);\r\n  };\r\n\r\n  let [inpbBalance, setInpBalance] = useState(\"\");\r\n  const handleBalance = (event) => {\r\n    setInpBalance(event.target.value);\r\n    console.log(userId, userBalance);\r\n  };\r\n\r\n  // add user balance function\r\n  const handleAddUserBalance = () => {\r\n    if (Number(inpbBalance) >= 0) {\r\n      if (userDetail.orgId != \"\") {\r\n        db.ref(`organizations/${userDetail.orgId}/users/${userId}`)\r\n          .update({\r\n            balance:\r\n              // Number(inpbBalance)?\r\n              userBalance + Number(inpbBalance),\r\n            // : userBalance + 0\r\n          })\r\n          .then(() => {\r\n            setshowpopUp(false);\r\n            setInpBalance(\"\");\r\n            // console.log('added')\r\n          })\r\n          .catch(() => {\r\n            setshowpopUp(false);\r\n            // console.log('cancel')\r\n            setInpBalance(\"\");\r\n          });\r\n      } else {\r\n        db.ref(`withoutOrganization/users/${userId}`)\r\n          .update({\r\n            balance:\r\n              // Number(inpbBalance)?\r\n              userBalance + Number(inpbBalance),\r\n            // : userBalance + 0\r\n          })\r\n          .then(() => {\r\n            setshowpopUp(false);\r\n            setInpBalance(\"\");\r\n          })\r\n          .catch(() => {\r\n            setshowpopUp(false);\r\n            setInpBalance(\"\");\r\n          });\r\n      }\r\n    } else {\r\n      setshowpopUp(false);\r\n      setAlertPopup(true);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setInpBalance(\"\");\r\n    setshowpopUp(false);\r\n  };\r\n  const handleCloseTwo = () => {\r\n    setAlertPopup(false);\r\n    setInpBalance(\"\");\r\n\r\n  };\r\n\r\n  if (!userDetail) {\r\n    return <div>Loading</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"userDetail_contaier\">\r\n      {showpopUp ? (\r\n        <AlertDialog\r\n          handleClose={handleClose}\r\n          open={showpopUp}\r\n          handleAddFunc={handleAddUserBalance}\r\n          value=\"Reported Successfull\"\r\n          btnValue=\"Add\"\r\n          balanceInput\r\n          handleChange={handleBalance}\r\n          inputValue={inpbBalance}\r\n          closeBtn\r\n        />\r\n      ) : null}\r\n      {alertPopup ? (\r\n        <AlertDialog\r\n          handleClose={handleCloseTwo}\r\n          open={alertPopup}\r\n          // handleAddFunc={handleClose}\r\n          value=\"Please Enter greater than 0 amount\"\r\n          btnValue=\"Ok\"\r\n        />\r\n      ) : null}\r\n      <div className=\"mobViewHead\">\r\n        <div className=\"mobViewHeadMain mobVwHead\">\r\n          <div className=\"mobViewHeadContent\">\r\n            <div className=\"mobHeadBack\">\r\n              <Link className=\"mobHeadBack_link\" to=\"/selec-goals\">\r\n                <ArrowBackIosIcon />\r\n              </Link>\r\n            </div>\r\n            <h2>Profile</h2>\r\n            <div className=\"headChatIcon\">\r\n              <TextsmsOutlinedIcon />\r\n            </div>\r\n            {/* mob view user info  */}\r\n            <div className=\"userInfoLeft mobView\">\r\n              {/* <img src={userDetail.url} alt=\"...\" /> */}\r\n              <div className=\"userDpAdd\">\r\n                <img src={userDetail.url ? userDetail.url : dp} alt=\"...\" />\r\n                <label htmlFor=\"goalImg\" className=\"dpImg\">\r\n                  <input\r\n                    type=\"file\"\r\n                    name=\"goalImg\"\r\n                    // required\r\n                    onChange={handleGoalImg}\r\n                    style={{ display: \"none\" }}\r\n                    id=\"goalImg\"\r\n                  />\r\n                  <AddAPhotoOutlinedIcon className=\"cmIcon\" />\r\n                </label>\r\n              </div>\r\n              {imgUrl ? (\r\n                <>\r\n                  <img className=\"dp_upload_img\" src={imgUrl} alt=\"...\" />\r\n                  <div className=\"uBtns\">\r\n                    <button\r\n                      disabled={loading}\r\n                      onClick={() => handleUploadProfileImg()}\r\n                    >\r\n                      {!loading ? \"Upload\" : \"loading...\"}\r\n                    </button>\r\n                    <button disabled={loading} onClick={() => handleCancel()}>\r\n                      Cancel\r\n                    </button>\r\n                  </div>\r\n                </>\r\n              ) : null}\r\n              <p className=\"uName\"> {userDetail.name}</p>\r\n              <p className=\"uEmail\"> {userDetail.email}</p>\r\n              <p className=\"uEmail\">Organization : {userDetail.orgName}</p>\r\n              <p className=\"uEmail\">\r\n                Balance :{\" \"}\r\n                {selector.userReducer.currentUserOfOrganization.length\r\n                  ? selector.userReducer.currentUserOfOrganization[0].balance\r\n                  : 0}\r\n              </p>\r\n            </div>\r\n            {/* end  */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"userDetail_md\">\r\n        <div className=\"userDetial_content\">\r\n          {/* buttons for mob view  */}\r\n          <div className=\"mobViewUserBtns\">\r\n            <MenuIcon className=\"uMenuIcon\" />\r\n            <div className=\"uBtns\">\r\n              <button>Premium</button>\r\n              <button>Free</button>\r\n            </div>\r\n          </div>\r\n          {/* end  */}\r\n          <div className=\"userDetail_box\">\r\n            {/* desktop view user info  */}\r\n            <div className=\"userInfoLeft desktopView\">\r\n              <Link to=\"/selec-goals\" className=\"Verifyback_link dpLinkB\">\r\n                <ArrowBackIcon className=\"orngBack\" />\r\n              </Link>\r\n              <div className=\"userDpAdd\">\r\n                <img src={userDetail.url ? userDetail.url : dp} alt=\"...\" />\r\n                <label htmlFor=\"goalImg\" className=\"dpImg\">\r\n                  <input\r\n                    type=\"file\"\r\n                    name=\"goalImg\"\r\n                    // required\r\n                    onChange={handleGoalImg}\r\n                    style={{ display: \"none\" }}\r\n                    id=\"goalImg\"\r\n                  />\r\n                  <AddAPhotoOutlinedIcon className=\"cmIcon\" />\r\n                </label>\r\n              </div>\r\n              {imgUrl ? (\r\n                <>\r\n                  <img className=\"dp_upload_img\" src={imgUrl} alt=\"...\" />\r\n                  <div className=\"uBtns\">\r\n                    <button\r\n                      disabled={loading}\r\n                      onClick={() => handleUploadProfileImg()}\r\n                    >\r\n                      {!loading ? \"Upload\" : \"loading...\"}\r\n                    </button>\r\n                    <button disabled={loading} onClick={() => handleCancel()}>\r\n                      Cancel\r\n                    </button>\r\n                  </div>\r\n                </>\r\n              ) : null}\r\n              <p className=\"uName\"> {userDetail.name}</p>\r\n              <p className=\"uEmail\"> {userDetail.email}</p>\r\n              <p className=\"uEmail\">Organization : {userDetail.orgName}</p>\r\n\r\n              <div className=\"uBtns\">\r\n                <button>Premium</button>\r\n                <button>Free</button>\r\n              </div>\r\n            </div>\r\n            {/* end  */}\r\n            <div className=\"userLinksRight\">\r\n              <div className=\"balnceBtn\">\r\n                <button onClick={() => handleShowInput()}>Add Balance</button>\r\n              </div>\r\n              <ul className=\"uLinks\">\r\n                <li>\r\n                  <p className=\"mLink\">Investing & Goals</p>\r\n                  <p className=\"subLinksName\">- Balances,List,Stats</p>\r\n                </li>\r\n                <li>\r\n                  <p className=\"mLink\">Transfers</p>\r\n                  <p className=\"subLinksName\">- Deposits,Withdrawls</p>\r\n                </li>\r\n                <li>\r\n                  <p className=\"mLink\">Statements & History</p>\r\n                  <p className=\"subLinksName\">- Docs,Tax,Activity</p>\r\n                </li>\r\n                <li>\r\n                  <p className=\"mLink\">Sections </p>\r\n                  <p className=\"subLinksName\">\r\n                    - Notifications,Disclosure(Tes)\r\n                  </p>\r\n                </li>\r\n                <li>\r\n                  <p className=\"mLink\">Help</p>\r\n                  <p className=\"subLinksName\">- Balances,List,Stats</p>\r\n                </li>\r\n                <li className=\"forMob\" onClick={() => handleLogout()}>\r\n                  LogOut\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserDetailCard;\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\OrganizationUsers\\UserList.jsx",["329"],"import React, { useEffect } from \"react\";\r\nimport firebase from \"../../../../Config/FirebaseConfig\";\r\nimport { allWithoutOrganizationUsers } from \"../../../../GlobalState/CreateSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport dp from \"../../../../Assets/dp.png\";\r\n\r\n\r\nexport const getOrgUsers = (dispatch) => {\r\n  const db = firebase.database();\r\n  const dbRef = db.ref(`withoutOrganization/users`);\r\n  dbRef.on(\"value\", (snapshot) => {\r\n    let filterOrgUserssArry = [];\r\n    snapshot.forEach((data) => {\r\n      const getData = data.val();\r\n      const getId = data.key;\r\n      getData.id = getId;\r\n      filterOrgUserssArry.push(getData);\r\n    });\r\n    dispatch(allWithoutOrganizationUsers(filterOrgUserssArry));\r\n  });\r\n};\r\nconst UserList = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  // get filter organization goals from database \r\n\r\n  useEffect(()=>{\r\n    getOrgUsers(dispatch)\r\n  },[])\r\n\r\n  const userSelector = useSelector((state)=>{\r\n      return state.goalReducer.withoutOrgUser\r\n  })\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"table_md\">\r\n        <table className=\"goals_table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Image</th>\r\n              <th>Name</th>\r\n              <th>Email</th>\r\n              <th>Number</th>\r\n              <th>Created at</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {userSelector.map((val) => {\r\n                // console.log(val)\r\n              return (\r\n                <tr key={val.id}>\r\n                  <td>\r\n                    <img\r\n                      className=\"goals_img\"\r\n                      src={val.url ? val.url : dp}\r\n                      alt=\"...\"\r\n                    />\r\n                  </td>\r\n                  <td>{val.name}</td>\r\n                  <td>{val.email}</td>\r\n                  <td>{val.number}</td>\r\n                  <td>{val.createdAt}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\SubmitGoals\\SubmitGoalsTable.jsx",["330","331","332","333"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport firebase from \"../../../../Config/FirebaseConfig\";\r\nimport ApprovedForm from \"../../WithOrganizations/SubmitGoals/ApprovedForm\";\r\nimport { send } from \"emailjs-com\";\r\n\r\nconst SubmitGoalsTable = ({\r\n  selector,\r\n  btn,\r\n  undoFunc,\r\n  declineBtn,\r\n  approvedUndoFunc,\r\n  declineForReported,\r\n  undoForReported,\r\n  undoFake\r\n}) => {\r\n  const db = firebase.database();\r\n\r\n  // approved form working\r\n  let [open, setOpen] = useState(false);\r\n  let [goalId, setGoalId] = useState(\"\");\r\n  let [percantage, setPercentage] = useState(\"\");\r\n  let [reward, setReward] = useState(\"\");\r\n  let [rewardRange, setRewardRange] = useState(\"\");\r\n  let [organizationUserId, setOrganizationUserId] = useState(\"\");\r\n  let [loading] = useState(false);\r\n  let [userBalance, setUserBalance] = useState(\"\");\r\n  let [userMyGoalId, setUserMyGoalId] = useState(\"\");\r\n  let [userInvest,setUserInvest] = useState()\r\n\r\n  // working for approved form\r\n  const openApprovedForm = (event) => {\r\n    setOpen(true);\r\n    setGoalId(event.submitGoalId);\r\n    setUserMyGoalId(event.SubmitGoal.myGoalId);\r\n    setOrganizationUserId(event.orgUserId);\r\n    setRewardRange(\r\n      `${event.SubmitGoal.inputValues.rewardMin} - ${event.SubmitGoal.inputValues.rewardMin}`\r\n    );\r\n    setUserInvest(event.SubmitGoal.userInvestment)\r\n\r\n    // get organization user info to get prev balance\r\n    db.ref(`withoutOrganization/users/${event.orgUserId}`).on(\r\n      \"value\",\r\n      (snapshot) => {\r\n        let userData = snapshot.val();\r\n        let userBalancedb = userData.balance;\r\n        setUserBalance(userBalancedb);\r\n      }\r\n    );\r\n  };\r\n\r\n  const handlePercentage = (event) => {\r\n    setPercentage(event.target.value);\r\n  };\r\n\r\n  const handleReward = (event) => {\r\n    setReward(event.target.value);\r\n  };\r\n  // form close function\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  // goals delete function\r\n  const handleApprovedGoals = () => {\r\n    let approveData = {\r\n      approved: true,\r\n      pending: false,\r\n      percantage: percantage,\r\n      reward: reward,\r\n      submit: true,\r\n      isReport: false,\r\n    };\r\n    let pendingData = {\r\n      approved: true,\r\n      percantage: percantage,\r\n      pending: true,\r\n      reward: reward,\r\n      submit: true,\r\n      isReport: false,\r\n    };\r\n    if (percantage === \"100\") {\r\n      // console.log(\"100%\");\r\n      db.ref(`withoutOrganization/users/${organizationUserId}`).update({\r\n        balance: Number(userBalance) + Number(reward) + userInvest,\r\n      });\r\n      db.ref(\r\n        `withoutOrganization/users/${organizationUserId}/myGoals/${userMyGoalId}`\r\n      ).update(approveData);\r\n      db.ref(`withoutOrganization/submitGoals/${goalId}`).update(approveData);\r\n      setPercentage(\"\");\r\n      setReward(\"\");\r\n      handleClose();\r\n    } else {\r\n      db.ref(`withoutOrganization/submitGoals/${goalId}`).update(pendingData);\r\n      db.ref(\r\n        `withoutOrganization/users/${organizationUserId}/myGoals/${userMyGoalId}`\r\n      ).update(pendingData);\r\n\r\n      handleClose();\r\n      setPercentage(\"\");\r\n      setReward(\"\");\r\n    }\r\n  };\r\n\r\n  const handleDeclineGoals = (event) => {\r\n    db.ref(`withoutOrganization/submitGoals/${event.submitGoalId}`).update({\r\n      decline: true,\r\n    });\r\n    db.ref(\r\n      `withoutOrganization/users/myGoals/${event.SubmitGoal.myGoalId}`\r\n    ).update({\r\n      decline: true,\r\n    });\r\n  };\r\n\r\n  const handleUndoDeclineGoals = (event) => {\r\n    db.ref(`withoutOrganization/submitGoals/${event.submitGoalId}`).update({\r\n      decline: false,\r\n    });\r\n    db.ref(\r\n      `withoutOrganization/users/myGoals/${event.SubmitGoal.myGoalId}`\r\n    ).update({\r\n      decline: false,\r\n    });\r\n  };\r\n\r\n  const balanceSelector = useSelector((state) => {\r\n    return state.goalReducer.orgUsers;\r\n  });\r\n  const allUsersSelector = useSelector((state) => {\r\n    return state;\r\n  });\r\n\r\n  // approved undo function\r\n  const handleApprovedUndo = (event) => {\r\n    const getPrevReward = event.reward;\r\n    const updateData = {\r\n      approved: false,\r\n      pending: false,\r\n      percantage: \"\",\r\n      reward: \"\",\r\n    };\r\n    balanceSelector.filter((val) => {\r\n      if (val.id === event.orgUserId) {\r\n        let userBlnce = val.balance;\r\n        db.ref(`withoutOrganization/users/${event.orgUserId}`).update({\r\n          balance: userBlnce -  (Number(getPrevReward)+ event.SubmitGoal.userInvestment ),\r\n        });\r\n        db.ref(\r\n          `withoutOrganization/users/${event.orgUserId}/myGoals/${event.SubmitGoal.myGoalId}`\r\n        ).update(updateData);\r\n        db.ref(`withoutOrganization/submitGoals/${event.submitGoalId}`).update(\r\n          updateData\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  // undo reported goal\r\n  const handleUndoReportedGoals = (event) => {\r\n    db.ref(`withoutOrganization/submitGoals/${event.submitGoalId}`).update({\r\n      isReport: false,\r\n    });\r\n  };\r\n\r\n  // decline if goal is reported\r\n  const handleDeclineReportGoals = (event) => {\r\n    const getPrevReward = event.reward;\r\n    const updateData = {\r\n      approved: false,\r\n      percantage: \"\",\r\n      pending: false,\r\n      reward: \"\",\r\n      isReport: true,\r\n      acceptReport: true,\r\n      submit: false,\r\n    };\r\n    balanceSelector.filter((val) => {\r\n      if (val.id === event.orgUserId) {\r\n        let userBlnce = val.balance;\r\n        db.ref(`withoutOrganization/users/${event.orgUserId}`).update({\r\n          balance:\r\n            userBlnce - (Number(getPrevReward) ? Number(getPrevReward) : 0),\r\n        });\r\n        db.ref(`withoutOrganization/submitGoals/${event.submitGoalId}`)\r\n          .update(updateData)\r\n          .then(() => {\r\n            allUsersSelector.userReducer.allUsers.filter((user) => {\r\n              if (user.id === event.userIdMain) {\r\n                // console.log(user)\r\n                send(\r\n                  // process.env.REACT_APP_EMAIL_JS_SERVICE_ID,\r\n                  // process.env.REACT_APP_EMAIL_JS_TEMPLATE_ID,\r\n                  \"service_q1galup\",\r\n                  \"template_aq5fbiv\",\r\n                  {\r\n                    to: user.email,\r\n                    to_name: `${event.userName}`,\r\n                    from_email_name: \"TRYVE\",\r\n                    subject: \"\",\r\n                    message: `TRYVE reported your goal please retake good picture. Thanks!`,\r\n                    from: \"tryve@gmail.com\",\r\n                    reply_to: \"tryve@gmail.com\",\r\n                  },\r\n                  process.env.REACT_APP_EMAIL_JS_USER_ID\r\n                )\r\n                  .then(() => {\r\n                    console.log(\"success...\");\r\n                  })\r\n                  .catch((err) => {\r\n                    console.log(\"admin Email sending FAILED...\", err);\r\n                  });\r\n              }\r\n            });\r\n          });\r\n\r\n        db.ref(\r\n          `withoutOrganization/users/${event.orgUserId}/myGoals/${event.SubmitGoal.myGoalId}`\r\n        ).update(updateData);\r\n        db.ref(`withoutOrganization/likes/${event.submitGoalId}`).remove();\r\n        db.ref(`withoutOrganization/comments/${event.submitGoalId}`).remove();\r\n      }\r\n    });\r\n  };\r\n\r\n  // undo fake goals\r\n  const handleUndoFakeGoals = (event) => {\r\n    db.ref(`withoutOrganization/submitGoals/${event.submitGoalId}`).update({\r\n      acceptReport: false,\r\n    });\r\n    db.ref(\r\n      `withoutOrganization/users/${event.orgUserId}/myGoals/${event.SubmitGoal.myGoalId}`\r\n    ).update({\r\n      acceptReport: false,\r\n    });\r\n  };\r\n\r\n  // automatically approved working\r\n\r\n  useEffect(() => {\r\n    let approvedinterVal = setInterval(() => {\r\n      if (selector.length) {\r\n        selector.filter((val) => {\r\n          if (\r\n            !val.isReport &&\r\n            !val.decline &&\r\n            !val.acceptReport &&\r\n            !val.pending &&\r\n            val.submit &&\r\n            !val.approved\r\n          ) {\r\n            const inputVal = val.SubmitGoal.inputValues;\r\n            let getStartDate = new Date(val.SubmitGoal.GoalStartDate);\r\n            let endDate = new Date(getStartDate);\r\n            let currentDate = new Date();\r\n            endDate.setDate(endDate.getDate() + Number(inputVal.numberOfDays));\r\n            let randomNumGenerate = Math.floor(\r\n              Math.random() *\r\n                (Number(inputVal.rewardMax) -\r\n                  Number(inputVal.rewardMin) +\r\n                  Number(inputVal.rewardMin))\r\n            );\r\n            if (currentDate.getTime() >= endDate.getTime()) {\r\n              const filterGoalUser = balanceSelector.filter(\r\n                (user) => user.id === val.orgUserId\r\n              );\r\n              const approvedObj = {\r\n                approved: true,\r\n                pending: false,\r\n                percantage: \"100\",\r\n                reward: randomNumGenerate,\r\n                submit: true,\r\n                isReport: false,\r\n              };\r\n              db.ref(`withoutOrganization/users/${val.orgUserId}`).update({\r\n                balance: filterGoalUser[0].balance + randomNumGenerate + val.SubmitGoal.userInvestment,\r\n              });\r\n              db.ref(\r\n                `withoutOrganization/users/${val.orgUserId}/myGoals/${val.SubmitGoal.myGoalId}`\r\n              ).update(approvedObj);\r\n              db.ref(`withoutOrganization/submitGoals/${val.submitGoalId}`)\r\n                .update(approvedObj)\r\n                .then(() => {\r\n                  console.log(\"auto approved\");\r\n                });\r\n              console.log(\"end\", val);\r\n            }\r\n          }\r\n          // if goals is reported and not approved not pending only submit and someone reported then is would be decline autt\r\n          else if (\r\n            val.isReport &&\r\n            !val.decline &&\r\n            !val.acceptReport &&\r\n            !val.pending &&\r\n            val.submit &&\r\n            !val.approved\r\n          ) {\r\n            const inputVal = val.SubmitGoal.inputValues;\r\n            let getStartDate = new Date(val.SubmitGoal.GoalStartDate);\r\n            let endDate = new Date(getStartDate);\r\n            let currentDate = new Date();\r\n            endDate.setDate(endDate.getDate() + Number(inputVal.numberOfDays));\r\n            if (currentDate.getTime() >= endDate.getTime()) {\r\n              db.ref(\r\n                `withoutOrganization/submitGoals/${val.submitGoalId}`\r\n              ).update({\r\n                decline: true,\r\n                submit: false,\r\n                isReport: false,\r\n              });\r\n              db.ref(\r\n                `withoutOrganization/users/${val.orgUserId}/myGoals/${val.SubmitGoal.myGoalId}`\r\n              ).update({\r\n                decline: true,\r\n                submit: false,\r\n                isReport: false,\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }, 10000);\r\n    return () => {\r\n      clearInterval(approvedinterVal);\r\n    };\r\n  });\r\n\r\n  // submit goal image function\r\n  let [imgUrl, setImgUrl] = useState(\"\");\r\n  let [showImg, setShowImg] = useState(false);\r\n  const handleSeeImage = (event) => {\r\n    setImgUrl(event);\r\n    setShowImg(true);\r\n  };\r\n  const handleCloseImg = () => {\r\n    setShowImg(false);\r\n    setImgUrl(\"\");\r\n  };\r\n\r\n  // console.log(selector);\r\n\r\n  if (!selector.length) {\r\n    return <div>no goals</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"table_container\">\r\n      <ApprovedForm\r\n        open={open}\r\n        handleClickOpen={openApprovedForm}\r\n        handleSelect={handlePercentage}\r\n        handleInputvalue={handleReward}\r\n        inputValue={reward}\r\n        btnValue=\"Approved\"\r\n        labelValue=\"Reward\"\r\n        range={rewardRange}\r\n        handleAddFunction={handleApprovedGoals}\r\n        handleClose={handleClose}\r\n        loading={loading}\r\n      />\r\n      <ApprovedForm\r\n        handleClickOpen={handleSeeImage}\r\n        imgUrl={imgUrl}\r\n        open={showImg}\r\n        btnValue=\"Close\"\r\n        handleClose={handleCloseImg}\r\n      />\r\n      <div className=\"table_md\">\r\n        <table className=\"goals_table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Image</th>\r\n              <th>Event Name</th>\r\n              <th>user name</th>\r\n              <th>Time Limit</th>\r\n              {/* <th>Signed Up</th> */}\r\n              <th>category</th>\r\n              <th>Reward Range</th>\r\n              {!btn ? <th>Actions</th> : null}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {selector.map((val) => {\r\n              let goalStartDate = new Date(val.SubmitGoal.GoalStartDate);\r\n              const newDateForEndDate = new Date(val.submitDate);\r\n              const goalStartTime = goalStartDate.getTime();\r\n              const getEndTime = newDateForEndDate.getTime();\r\n              const oneDayTime = 1000 * 3600 * 24;\r\n              const takeNumberOfDays =\r\n                (getEndTime - goalStartTime) / oneDayTime;\r\n              return (\r\n                <tr key={val.submitGoalId}>\r\n                  <td>\r\n                    <img\r\n                      className=\"goals_img\"\r\n                      src={val.uploadImgUlr}\r\n                      alt=\"...\"\r\n                    />\r\n                  </td>\r\n                  <td>{val.SubmitGoal.inputValues.eventName}</td>\r\n                  <td>{val.userName}</td>\r\n                  <td>{val.SubmitGoal.inputValues.numberOfDays} days</td>\r\n                  <td>\r\n                    {takeNumberOfDays > val.SubmitGoal.inputValues.numberOfDays\r\n                      ? \"late\"\r\n                      : \"submit on time\"}\r\n                  </td>\r\n                  <td>{val.SubmitGoal.inputValues.category}</td>\r\n                  <td>{`${val.SubmitGoal.inputValues.rewardMin} - ${val.SubmitGoal.inputValues.rewardMax}`}</td>\r\n                  <td className=\"actions_btns\">\r\n                    {!btn ? (\r\n                      <button onClick={() => openApprovedForm(val)}>\r\n                        approved\r\n                      </button>\r\n                    ) : null}\r\n                    {!declineBtn ? (\r\n                      !undoFunc ? (\r\n                        <button\r\n                          className=\"view_icons\"\r\n                          onClick={() => handleDeclineGoals(val)}\r\n                        >\r\n                          decline\r\n                        </button>\r\n                      ) : (\r\n                        <button\r\n                          className=\"view_icons\"\r\n                          onClick={\r\n                            !approvedUndoFunc\r\n                              ? () => handleUndoDeclineGoals(val)\r\n                              : () => handleApprovedUndo(val)\r\n                          }\r\n                        >\r\n                          Undo\r\n                        </button>\r\n                      )\r\n                    ) : null}\r\n                    {/* button for decline if goal is reported  */}\r\n                    {declineForReported ? (\r\n                      <button\r\n                        className=\"view_icons\"\r\n                        onClick={() => handleDeclineReportGoals(val)}\r\n                      >\r\n                        decline\r\n                      </button>\r\n                    ) : null}\r\n                    {undoForReported ? (\r\n                      <button\r\n                        className=\"view_icons\"\r\n                        onClick={() => handleUndoReportedGoals(val)}\r\n                      >\r\n                        undo reported\r\n                      </button>\r\n                    ) : null}\r\n                    {undoFake ? (\r\n                      <button\r\n                        className=\"view_icons\"\r\n                        onClick={() => handleUndoFakeGoals(val)}\r\n                      >\r\n                        undo fake\r\n                      </button>\r\n                    ) : null}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubmitGoalsTable;\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\Sidebar.jsx",[],"D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\SubmitGoals\\SubmitGoalsTable.jsx",["334","335","336","337"],"import React, { useState } from \"react\";\r\nimport firebase from \"../../../../Config/FirebaseConfig\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport ApprovedForm from \"./ApprovedForm\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { send } from \"emailjs-com\";\r\n\r\nconst SubmitGoalsTable = ({\r\n  selector,\r\n  btn,\r\n  undoFunc,\r\n  declineBtn,\r\n  approvedUndo,\r\n  declineForReported,\r\n  undoForReported,\r\n  undoFake,\r\n}) => {\r\n  // const history = useHistory();\r\n  const { id } = useParams();\r\n  const db = firebase.database();\r\n\r\n  // approved form working\r\n  let [open, setOpen] = useState(false);\r\n  let [goalId, setGoalId] = useState(\"\");\r\n  let [percantage, setPercentage] = useState(\"\");\r\n  let [reward, setReward] = useState(\"\");\r\n  let [rewardRange, setRewardRange] = useState(\"\");\r\n  let [organizationUserId, setOrganizationUserId] = useState(\"\");\r\n  let [loading] = useState(false);\r\n  let [userBalance, setUserBalance] = useState(\"\");\r\n  let [userMyGoalId, setUserMyGoalId] = useState(\"\");\r\n  let [userInvest,setUserInvest] = useState()\r\n\r\n  // working for approved form\r\n  const openApprovedForm = (event) => {\r\n    setOpen(true);\r\n    setGoalId(event.submitGoalId);\r\n    setOrganizationUserId(event.orgUserId);\r\n    setUserMyGoalId(event.SubmitGoal.myGoalId);\r\n    setRewardRange(\r\n      `${event.SubmitGoal.inputValues.rewardMin} - ${event.SubmitGoal.inputValues.rewardMax}`\r\n    );\r\n    setUserInvest(event.SubmitGoal.userInvestment)\r\n    // console.log(event)\r\n    // get organization user info to get prev balance\r\n    db.ref(`organizations/${id}/users/${event.orgUserId}`).on(\r\n      \"value\",\r\n      (snapshot) => {\r\n        let userData = snapshot.val();\r\n        let userBalancedb = userData.balance;\r\n        setUserBalance(userBalancedb);\r\n      }\r\n    );\r\n  };\r\n\r\n  const handlePercentage = (event) => {\r\n    setPercentage(event.target.value);\r\n  };\r\n\r\n  const handleReward = (event) => {\r\n    setReward(event.target.value);\r\n  };\r\n  // form close function\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  // goals approved function\r\n  const handleApprovedGoals = () => {\r\n    let approveData = {\r\n      approved: true,\r\n      pending: false,\r\n      percantage: percantage,\r\n      reward: reward,\r\n      submit: true,\r\n      isReport: false,\r\n    };\r\n    let pendingData = {\r\n      approved: true,\r\n      percantage: percantage,\r\n      pending: true,\r\n      reward: reward,\r\n      submit: true,\r\n      isReport: false,\r\n    };\r\n    if (percantage === \"100\") {\r\n      // add  balance in user acount\r\n      db.ref(`organizations/${id}/users/${organizationUserId}`).update({\r\n        balance: Number(userBalance) + Number(reward)+userInvest ,\r\n      });\r\n      // update goal status in users goal ref\r\n      db.ref(\r\n        `organizations/${id}/users/${organizationUserId}/myGoals/${userMyGoalId}`\r\n      ).update(approveData);\r\n      // update goal data in submit goal ref \r\n      db.ref(`organizations/${id}/submitGoals/${goalId}`).update(approveData);\r\n      setPercentage(\"\");\r\n      setReward(\"\");\r\n      handleClose();\r\n    } else {\r\n      // update goal data in submit goal ref \r\n      db.ref(`organizations/${id}/submitGoals/${goalId}`).update(pendingData);\r\n      // add  balance in user acount\r\n      db.ref(\r\n        `organizations/${id}/users/${organizationUserId}/myGoals/${userMyGoalId}`\r\n      ).update(pendingData);\r\n\r\n      handleClose();\r\n      setPercentage(\"\");\r\n      setReward(\"\");\r\n    }\r\n  };\r\n\r\n  const handleDeclineGoals = (event) => {\r\n    db.ref(`organizations/${id}/submitGoals/${event.submitGoalId}`).update({\r\n      decline: true,\r\n    });\r\n    db.ref(\r\n      `organizations/${id}/users/${event.orgUserId}/myGoals/${event.SubmitGoal.myGoalId}`\r\n    ).update({\r\n      decline: true,\r\n    });\r\n  };\r\n\r\n  // goals undo decline function \r\n  const handleUndoDeclineGoals = (event) => {\r\n  \r\n    db.ref(`organizations/${id}/submitGoals/${event.submitGoalId}`).update({\r\n      decline: false,\r\n    });\r\n    db.ref(\r\n      `organizations/${id}/users/${event.orgUserId}/myGoals/${event.SubmitGoal.myGoalId}`\r\n    ).update({\r\n      decline: false,\r\n    });\r\n  };\r\n\r\n  // get user total balance\r\n  const balanceSelector = useSelector((state) => {\r\n    return state.goalReducer.orgUsers;\r\n  });\r\n  // get all users of organization \r\n  const allUsersSelector = useSelector((state) => {\r\n    return state;\r\n  });\r\n\r\n  // approved undo function\r\n  const handleApprovedUndo = (event) => {\r\n    const getPrevReward = event.reward;\r\n    const updateData = {\r\n      approved: false,\r\n      pending: false,\r\n      percantage: \"\",\r\n      reward: \"\",\r\n    };\r\n    balanceSelector.filter((val) => {\r\n      if (val.id === event.orgUserId) {\r\n        let userBlnce = val.balance;\r\n        db.ref(`organizations/${id}/users/${event.orgUserId}`).update({\r\n          balance: userBlnce - (Number(getPrevReward)+ event.SubmitGoal.userInvestment ),\r\n        });\r\n        db.ref(\r\n          `organizations/${id}/users/${event.orgUserId}/myGoals/${event.SubmitGoal.myGoalId}`\r\n        ).update(updateData);\r\n        db.ref(`organizations/${id}/submitGoals/${event.submitGoalId}`).update(\r\n          updateData\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  // undo reported goal\r\n  const handleUndoReportedGoals = (event) => {\r\n    db.ref(`organizations/${id}/submitGoals/${event.submitGoalId}`).update({\r\n      isReport: false,\r\n    });\r\n\r\n    // console.log(event)\r\n  };\r\n\r\n  // accept reporting request if any user is  reported goal\r\n  const handleDeclineReportGoals = (event) => {\r\n    const getPrevReward = event.reward;\r\n    const updateData = {\r\n      approved: false,\r\n      percantage: \"\",\r\n      pending: false,\r\n      reward: \"\",\r\n      isReport: true,\r\n      acceptReport: true,\r\n      submit: false,\r\n    };\r\n    balanceSelector.filter((val) => {\r\n      // console.log(val,event)\r\n      if (val.id === event.orgUserId) {\r\n        let userBlnce = val.balance;\r\n        //  balance minus from total balance\r\n        db.ref(`organizations/${id}/users/${event.orgUserId}`).update({\r\n          balance:\r\n            userBlnce - (Number(getPrevReward) ? Number(getPrevReward) : 0),\r\n        });\r\n        // back to initial state\r\n        db.ref(`organizations/${id}/submitGoals/${event.submitGoalId}`)\r\n          .update(updateData)\r\n          .then(() => {\r\n            allUsersSelector.userReducer.allUsers.filter((user) => {\r\n              if (user.id === event.userIdMain) {\r\n                // console.log(user)\r\n                send(\r\n                  // process.env.REACT_APP_EMAIL_JS_SERVICE_ID,\r\n                  // process.env.REACT_APP_EMAIL_JS_TEMPLATE_ID,\r\n                  \"service_q1galup\",\r\n                  \"template_aq5fbiv\",\r\n                  {\r\n                    to: user.email,\r\n                    to_name: `${event.userName}`,\r\n                    from_email_name: \"TRYVE\",\r\n                    subject: \"\",\r\n                    message: `TRYVE reported your goal please retake good picture. Thanks!`,\r\n                    from: \"tryve@gmail.com\",\r\n                    reply_to: \"tryve@gmail.com\",\r\n                  },\r\n                  process.env.REACT_APP_EMAIL_JS_USER_ID\r\n                )\r\n                  .then(() => {\r\n                    console.log(\"success...\");\r\n                  })\r\n                  .catch((err) => {\r\n                    console.log(\"admin Email sending FAILED...\", err);\r\n                  });\r\n              }\r\n            });\r\n          });\r\n\r\n        db.ref(\r\n          `organizations/${id}/users/${event.orgUserId}/myGoals/${event.SubmitGoal.myGoalId}`\r\n        ).update(updateData);\r\n        // remove all likes of goal\r\n        db.ref(`organizations/${id}/likes/${event.submitGoalId}`).remove();\r\n        db.ref(`organizations/${id}/comments/${event.submitGoalId}`).remove();\r\n      }\r\n    });\r\n  };\r\n\r\n  // undo fake goals\r\n  const handleUndoFakeGoals = (event) => {\r\n    db.ref(`organizations/${id}/submitGoals/${event.submitGoalId}`).update({\r\n      acceptReport: false,\r\n    });\r\n    db.ref(\r\n      `organizations/${id}/users/${event.orgUserId}/myGoals/${event.SubmitGoal.myGoalId}`\r\n    ).update({\r\n      acceptReport: false,\r\n    });\r\n  };\r\n\r\n  // submit goal image function\r\n  let [imgUrl, setImgUrl] = useState(\"\");\r\n  let [showImg, setShowImg] = useState(false);\r\n  const handleSeeImage = (event) => {\r\n    setImgUrl(event);\r\n    setShowImg(true);\r\n  };\r\n  const handleCloseImg = () => {\r\n    setShowImg(false);\r\n    setImgUrl(\"\");\r\n  };\r\n\r\n  // automatically approved working\r\n\r\n  useEffect(() => {\r\n    let approvedinterVal = setInterval(() => {\r\n      if (selector.length) {\r\n        // let filterDataForApproved =\r\n        selector.filter((val) => {\r\n          if (\r\n            !val.isReport &&\r\n            !val.decline &&\r\n            !val.acceptReport &&\r\n            !val.pending &&\r\n            val.submit &&\r\n            !val.approved\r\n          ) {\r\n            const inputVal = val.SubmitGoal.inputValues;\r\n            let getStartDate = new Date(val.SubmitGoal.GoalStartDate);\r\n            let endDate = new Date(getStartDate);\r\n            let currentDate = new Date();\r\n            endDate.setDate(endDate.getDate() + Number(inputVal.numberOfDays));\r\n            let randomNumGenerate = Math.floor(\r\n              Math.random() *\r\n                (Number(inputVal.rewardMax) -\r\n                  Number(inputVal.rewardMin) +\r\n                  Number(inputVal.rewardMin))\r\n            );\r\n            if (currentDate.getTime() >= endDate.getTime()) {\r\n              const filterGoalUser = balanceSelector.filter(\r\n                (user) => user.id === val.orgUserId\r\n              );\r\n              const approvedObj = {\r\n                approved: true,\r\n                pending: false,\r\n                percantage: \"100\",\r\n                reward: randomNumGenerate,\r\n                submit: true,\r\n                isReport: false,\r\n              };\r\n              db.ref(`organizations/${id}/users/${val.orgUserId}`).update({\r\n                balance: filterGoalUser[0].balance + randomNumGenerate +val.SubmitGoal.userInvestment ,\r\n              });\r\n              db.ref(\r\n                `organizations/${id}/users/${val.orgUserId}/myGoals/${val.SubmitGoal.myGoalId}`\r\n              ).update(approvedObj);\r\n              db.ref(`organizations/${id}/submitGoals/${val.submitGoalId}`)\r\n                .update(approvedObj)\r\n                .then(() => {\r\n                  console.log(\"auto approved\");\r\n                });\r\n              console.log(\"end\", val);\r\n            }\r\n          }\r\n          // if goals is reported and not approved not pending only submit and someone reported then is would be decline autt\r\n          else if (\r\n            val.isReport &&\r\n            !val.decline &&\r\n            !val.acceptReport &&\r\n            !val.pending &&\r\n            val.submit &&\r\n            !val.approved\r\n          ) {\r\n            // console.log(val)\r\n\r\n            const inputVal = val.SubmitGoal.inputValues;\r\n            // let getSubmitDate = new Date(val.submitDate);\r\n            let getStartDate = new Date(val.SubmitGoal.GoalStartDate);\r\n            let endDate = new Date(getStartDate);\r\n            let currentDate = new Date();\r\n            endDate.setDate(endDate.getDate() + Number(inputVal.numberOfDays));\r\n            // console.log(currentDate.getTime() , endDate.getTime())\r\n            if (currentDate.getTime() >= endDate.getTime()) {\r\n              // console.log('is report', val)\r\n              db.ref(\r\n                `organizations/${id}/submitGoals/${val.submitGoalId}`\r\n              ).update({\r\n                decline: true,\r\n                submit: false,\r\n                isReport: false,\r\n              });\r\n              db.ref(\r\n                `organizations/${id}/users/${val.orgUserId}/myGoals/${val.SubmitGoal.myGoalId}`\r\n              ).update({\r\n                decline: true,\r\n                submit: false,\r\n                isReport: false,\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }, 10000);\r\n    return () => {\r\n      clearInterval(approvedinterVal);\r\n    };\r\n  });\r\n\r\n  if (!selector.length) {\r\n    return <div>no goals</div>;\r\n  }\r\n  // console.log(selector);\r\n\r\n  return (\r\n    <div className=\"table_container\">\r\n      {/* approve form popup  */}\r\n      <ApprovedForm\r\n        open={open}\r\n        handleClickOpen={openApprovedForm}\r\n        handleSelect={handlePercentage}\r\n        handleInputvalue={handleReward}\r\n        inputValue={reward}\r\n        btnValue=\"Approved\"\r\n        labelValue=\"Reward\"\r\n        range={rewardRange}\r\n        handleAddFunction={handleApprovedGoals}\r\n        handleClose={handleClose}\r\n        loading={loading}\r\n      />\r\n      {/* image show popup  */}\r\n      <ApprovedForm\r\n        handleClickOpen={handleSeeImage}\r\n        imgUrl={imgUrl}\r\n        open={showImg}\r\n        btnValue=\"Close\"\r\n        handleClose={handleCloseImg}\r\n      />\r\n      <div className=\"table_md\">\r\n        <table className=\"goals_table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Image</th>\r\n              <th>Name</th>\r\n              <th>People Joined</th>\r\n              <th>Time Limit</th>\r\n              <th>Status</th>\r\n              <th>category</th>\r\n              <th>Reward Range</th>\r\n\r\n              {!btn ? <th>Actions</th> : null}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {selector.map((val) => {\r\n              let goalStartDate = new Date(val.SubmitGoal.GoalStartDate);\r\n              const newDateForEndDate = new Date(val.submitDate);\r\n              const goalStartTime = goalStartDate.getTime();\r\n              const getEndTime = newDateForEndDate.getTime();\r\n              const oneDayTime = 1000 * 3600 * 24;\r\n              const takeNumberOfDays =\r\n                (getEndTime - goalStartTime) / oneDayTime;\r\n              return (\r\n                <tr key={val.submitGoalId}>\r\n                  <td>\r\n                    <img\r\n                      className=\"goals_img\"\r\n                      src={val.uploadImgUlr}\r\n                      alt=\"...\"\r\n                      onClick={() => handleSeeImage(val.uploadImgUlr)}\r\n                    />\r\n                  </td>\r\n                  <td>{val.SubmitGoal.inputValues.eventName}</td>\r\n                  <td>{val.userName}</td>\r\n                  <td>{val.SubmitGoal.inputValues.numberOfDays} days</td>\r\n                  <td>\r\n                    {takeNumberOfDays > val.SubmitGoal.inputValues.numberOfDays\r\n                      ? \"late\"\r\n                      : \"submit on time\"}\r\n                  </td>\r\n                  <td>{val.SubmitGoal.inputValues.category}</td>\r\n                  <td>{`${val.SubmitGoal.inputValues.rewardMin} - ${val.SubmitGoal.inputValues.rewardMax}`}</td>\r\n                  <td className=\"actions_btns\">\r\n                    {!btn ? (\r\n                      <button onClick={() => openApprovedForm(val)}>\r\n                        approved\r\n                      </button>\r\n                    ) : null}\r\n                    {!declineBtn ? (\r\n                      !undoFunc ? (\r\n                        <button\r\n                          className=\"view_icons\"\r\n                          onClick={() => handleDeclineGoals(val)}\r\n                        >\r\n                          decline\r\n                        </button>\r\n                      ) : (\r\n                        <button\r\n                          className=\"view_icons\"\r\n                          onClick={\r\n                            !approvedUndo\r\n                              ? () => handleUndoDeclineGoals(val)\r\n                              : () => handleApprovedUndo(val)\r\n                          }\r\n                        >\r\n                          Undo\r\n                        </button>\r\n                      )\r\n                    ) : null}\r\n                    {/* button for decline if goal is reported  */}\r\n                    {declineForReported ? (\r\n                      <button\r\n                        className=\"view_icons\"\r\n                        onClick={() => handleDeclineReportGoals(val)}\r\n                      >\r\n                        Accept Report\r\n                      </button>\r\n                    ) : null}\r\n                    {undoForReported ? (\r\n                      <button\r\n                        className=\"view_icons\"\r\n                        onClick={() => handleUndoReportedGoals(val)}\r\n                      >\r\n                        undo reported\r\n                      </button>\r\n                    ) : null}\r\n                    {undoFake ? (\r\n                      <button\r\n                        className=\"view_icons\"\r\n                        onClick={() => handleUndoFakeGoals(val)}\r\n                      >\r\n                        undo fake\r\n                      </button>\r\n                    ) : null}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubmitGoalsTable;\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\OrganizationUsers\\UserList.jsx",["338"],"import React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport firebase from \"../../../../Config/FirebaseConfig\";\r\nimport { allOrganizationUsers } from \"../../../../GlobalState/CreateSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport dp from \"../../../../Assets/dp.png\";\r\n\r\nexport const getOrgUsers = (id, dispatch) => {\r\n  const db = firebase.database();\r\n  const dbRef = db.ref(`organizations/${id}/users`);\r\n  dbRef.on(\"value\", (snapshot) => {\r\n    let filterOrgUserssArry = [];\r\n    snapshot.forEach((data) => {\r\n      const getData = data.val();\r\n      const getId = data.key;\r\n      getData.id = getId;\r\n      filterOrgUserssArry.push(getData);\r\n    });\r\n    dispatch(allOrganizationUsers(filterOrgUserssArry));\r\n  });\r\n};\r\n\r\nconst UserList = () => {\r\n  const { id } = useParams();\r\n  const dispatch = useDispatch();\r\n   \r\n\r\n  // get filter organization goals from database\r\n\r\n  useEffect(() => {\r\n    getOrgUsers(id, dispatch);\r\n  }, []);\r\n\r\n  const userSelector = useSelector((state) => {\r\n    return state.goalReducer.orgUsers;\r\n  });\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"table_md\">\r\n        <table className=\"goals_table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Image</th>\r\n              <th>Name</th>\r\n              <th>Email</th>\r\n              <th>Number</th>\r\n              <th>Created at</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {userSelector.map((val) => {\r\n              // console.log(val)\r\n              return (\r\n                <tr key={val.id}>\r\n                  <td>\r\n                    <img\r\n                      className=\"goals_img\"\r\n                      src={val.url ? val.url : dp}\r\n                      alt=\"...\"\r\n                    />\r\n                  </td>\r\n                  <td>{val.name}</td>\r\n                  <td>{val.email}</td>\r\n                  <td>{val.number}</td>\r\n                  <td>{val.createdAt}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\CreateGoals\\CreateGoals.jsx",[],"D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\GoalsDetailPage\\GoalsDetail.jsx",[],"D:\\EINC\\Project\\src\\Components\\AlertPopup.jsx",[],"D:\\EINC\\Project\\src\\Components\\LoginForm.jsx",[],"D:\\EINC\\Project\\src\\Components\\SignupForm.jsx",[],"D:\\EINC\\Project\\src\\Layout\\Navbar.jsx",["339","340","341","342"],"import React, { useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n// import MenuIcon from '@material-ui/icons/Menu'\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport clsx from \"clsx\";\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport List from \"@material-ui/core/List\";\r\nimport CameraAltIcon from \"@material-ui/icons/CameraAlt\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport AppsIcon from \"@material-ui/icons/Apps\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport ViewListIcon from \"@material-ui/icons/ViewList\";\r\nimport firebase from \"../Config/FirebaseConfig\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport { userlogOut, setCurrentUser } from \"../GlobalState/CreateSlice\";\r\nimport {\r\n  setAllSelectedGoals,\r\n  setCurrentUserOrganizationId,\r\n  setAllDeclineGoals,\r\n  setAllApprovedGoals,\r\n  setPendingGoals,\r\n  setAllGoals,\r\n} from \"../GlobalState/UserSideSlice\";\r\n// import { setAllSelectedGoals, setAllGoals } from '../GlobalState/UserSideSlice'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport logo from \"../Assets/logo.png\";\r\n\r\nimport \"./style.css\";\r\nimport { getAllUserOfOrg } from \"../Pages/UserSide/Profile/Profile\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    fontWeight: \"bold\",\r\n  },\r\n  list: {\r\n    width: 250,\r\n    zIndex: 999999999,\r\n  },\r\n  fullList: {\r\n    width: \"auto\",\r\n  },\r\n}));\r\n\r\nexport default function MenuAppBar() {\r\n  const classes = useStyles();\r\n  const auth = firebase.auth();\r\n  const db = firebase.database();\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  //   const [auth, setAuth] = React.useState(true);\r\n\r\n  //   const handleChange = (event) => {\r\n  //     setAuth(event.target.checked);\r\n  //   };\r\n\r\n  const userInfo = useSelector((state) => {\r\n    return state.goalReducer.currentUser;\r\n  });\r\n  const balance = useSelector((state) => {\r\n    return state.userReducer.currentUserOfOrganization;\r\n  });\r\n  // console.log(balance)\r\n  //  get all users\r\n  useEffect(() => {\r\n    if (userInfo.orgId !== \"\") {\r\n      //   get current user from organization\r\n      getAllUserOfOrg(\r\n        `organizations/${userInfo.orgId}/users`,\r\n        dispatch,\r\n        userInfo\r\n      );\r\n    } else {\r\n      //   get current user from without organization\r\n      getAllUserOfOrg(`withoutOrganization/users`, dispatch, userInfo);\r\n    }\r\n  }, []);\r\n\r\n  const userDetail = useSelector((state) => {\r\n    return state;\r\n  });\r\n  const { goalReducer } = userDetail;\r\n  const getSelectedGoalsOfUser = async (parameter) => {\r\n    db.ref(parameter).on(\"value\", (snapshot) => {\r\n      var goalsArray = [];\r\n      var declineArray = [];\r\n      var approveArray = [];\r\n      var pendingArray = [];\r\n      snapshot.forEach((goals) => {\r\n        let getGoals = goals.val();\r\n        // console.log(getGoals)\r\n        let getGoalsId = goals.key;\r\n        let getMyGoal = getGoals.myGoals;\r\n        let {\r\n          percantage,\r\n          reward,\r\n          submit,\r\n          approved,\r\n          decline,\r\n          hasStarted,\r\n          GoalStartDate,\r\n          pending,\r\n          isReport,\r\n          acceptReport,\r\n          userInvestment,\r\n        } = getGoals;\r\n        getMyGoal.myGoalId = getGoalsId;\r\n        getMyGoal.submit = submit;\r\n        getMyGoal.hasStarted = hasStarted;\r\n        getMyGoal.GoalStartDate = GoalStartDate;\r\n        getMyGoal.approved = approved;\r\n        getMyGoal.decline = decline;\r\n        getMyGoal.isReport = isReport;\r\n        getMyGoal.acceptReport = acceptReport;\r\n        getMyGoal.userInvestment = Number(userInvestment);\r\n        // if (reward && percantage && pending !== undefined) {\r\n        getMyGoal.percentage = percantage;\r\n        getMyGoal.reward = reward;\r\n        getMyGoal.pending = pending;\r\n        // }\r\n        // if (!goals.val().submit) {\r\n        goalsArray.push(getMyGoal);\r\n        // }\r\n        if (\r\n          (goals.val().submit &&\r\n            goals.val().approved &&\r\n            goals.val().percantage === \"100\" &&\r\n            !goals.val().pending) ||\r\n          (goals.val().submit &&\r\n            goals.val().approved &&\r\n            goals.val().percentage !== \"100\" &&\r\n            !goals.val().pending)\r\n        ) {\r\n          approveArray.push(getMyGoal);\r\n        } else if (goals.val().decline) {\r\n          declineArray.push(getMyGoal);\r\n        } else if (\r\n          goals.val().approved &&\r\n          goals.val().percantage !== \"100\" &&\r\n          goals.val().pending\r\n        ) {\r\n          pendingArray.push(getMyGoal);\r\n        }\r\n      });\r\n\r\n      dispatch(setAllDeclineGoals(declineArray));\r\n      dispatch(setAllApprovedGoals(approveArray));\r\n      dispatch(setAllSelectedGoals(goalsArray));\r\n      dispatch(setPendingGoals(pendingArray));\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // condition for  if user enrolled in any organization\r\n    if (goalReducer.currentUser.orgId !== \"\") {\r\n      //   get users selected goals\r\n      db.ref(`organizations/${goalReducer.currentUser.orgId}/users`).on(\r\n        \"value\",\r\n        (snapshot) => {\r\n          var UsersArray = [];\r\n          snapshot.forEach((goals) => {\r\n            let getUsers = goals.val();\r\n            // console.log('99',getUsers)\r\n            let getUserId = goals.key;\r\n            getUsers.orgMainId = getUserId;\r\n            UsersArray.push(getUsers);\r\n          });\r\n          UsersArray.filter((val) => {\r\n            if (val.email === goalReducer.currentUser.email) {\r\n              dispatch(setCurrentUserOrganizationId(val.orgMainId));\r\n              getSelectedGoalsOfUser(\r\n                `organizations/${userDetail.goalReducer.currentUser.orgId}/users/${val.orgMainId}/myGoals`\r\n              );\r\n            }\r\n          });\r\n        }\r\n      );\r\n    } else {\r\n      // condition for  if user not enrolled in any organization\r\n      //   get user selected goals\r\n      db.ref(`withoutOrganization/users/${goalReducer.currentUser.orgId}`).on(\r\n        \"value\",\r\n        (snapshot) => {\r\n          var UsersArray = [];\r\n          snapshot.forEach((goals) => {\r\n            let getUsers = goals.val();\r\n            let getUserId = goals.key;\r\n            getUsers.orgMainId = getUserId;\r\n            UsersArray.push(getUsers);\r\n          });\r\n          UsersArray.filter((val) => {\r\n            if (val.email === goalReducer.currentUser.email) {\r\n              dispatch(setCurrentUserOrganizationId(val.orgMainId));\r\n              // get seletec goal\r\n              getSelectedGoalsOfUser(\r\n                `withoutOrganization/users/${val.orgMainId}/myGoals`\r\n              );\r\n            }\r\n          });\r\n        }\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  const handleLogout = () => {\r\n    auth\r\n      .signOut()\r\n      .then(() => {\r\n        dispatch(userlogOut(false));\r\n        dispatch(setCurrentUser({}));\r\n        dispatch(setAllGoals([]));\r\n        dispatch(setAllSelectedGoals([]));\r\n        dispatch(setCurrentUserOrganizationId(\"\"));\r\n        history.push(\"/login\");\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n\r\n  const [state, setState] = React.useState({\r\n    left: false,\r\n  });\r\n\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    // console.log(anchor)\r\n    if (\r\n      event &&\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const list = (anchor) => (\r\n    <div\r\n      className={clsx(classes.list, {\r\n        [classes.fullList]: anchor === \"top\" || anchor === \"bottom\",\r\n      })}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(anchor, false)}\r\n      onKeyDown={toggleDrawer(anchor, false)}\r\n    >\r\n      {/* <List>\r\n\r\n      </List> */}\r\n      {/* <Divider /> */}\r\n      <List>\r\n        <img className=\"ulogo\" src={logo} alt=\"...\" />\r\n\r\n        {goalReducer.currentUser.admin ? (\r\n          <NavLink\r\n            to={`/organizations`}\r\n            className=\"sidebar_links\"\r\n            activeClassName=\"uDeskActive\"\r\n          >\r\n            <HomeIcon className=\"sdIcon\" />\r\n            {!open ? <p>Organizations</p> : null}\r\n          </NavLink>\r\n        ) : null}\r\n        <NavLink\r\n          className=\"sidebar_links\"\r\n          to=\"/selec-goals\"\r\n          activeClassName=\"uDeskActive\"\r\n        >\r\n          <HomeIcon className=\"sdIcon\" /> <p> Home </p>\r\n        </NavLink>\r\n        <NavLink\r\n          className=\"sidebar_links\"\r\n          to=\"/search-goals\"\r\n          activeClassName=\"uDeskActive\"\r\n        >\r\n          <SearchIcon className=\"sdIcon\" />\r\n          <p> Search Goals </p>\r\n        </NavLink>\r\n        <NavLink\r\n          className=\"sidebar_links\"\r\n          to=\"/goals-status\"\r\n          activeClassName=\"uDeskActive\"\r\n        >\r\n          <CameraAltIcon className=\"sdIcon\" /> <p> Verify </p>\r\n        </NavLink>\r\n        <NavLink\r\n          className=\"sidebar_links\"\r\n          to=\"/feed\"\r\n          activeClassName=\"uDeskActive\"\r\n        >\r\n          <AppsIcon className=\"sdIcon\" /> <p>Feed </p>\r\n        </NavLink>\r\n\r\n        <NavLink\r\n          className=\"sidebar_links\"\r\n          to=\"/profile\"\r\n          activeClassName=\"uDeskActive\"\r\n        >\r\n          <PersonIcon className=\"sdIcon\" /> <p> Profile </p>\r\n        </NavLink>\r\n\r\n        <NavLink\r\n          className=\"sidebar_links\"\r\n          to=\"/Delete\"\r\n          activeClassName=\"uDeskActive\"\r\n        >\r\n          <DeleteIcon className=\"delIcon\" /> <p> Deleted Organization </p>\r\n        </NavLink>\r\n      </List>\r\n    </div>\r\n  );\r\n  // console.log(balance)\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={`desktopView_sidebar ${classes.root}`}>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <div>\r\n              {[\"left\"].map((anchor) => (\r\n                <React.Fragment key={anchor}>\r\n                  <Button onClick={toggleDrawer(anchor, true)}>\r\n                    {/* {anchor} */}\r\n                    <ViewListIcon className=\"bar_icon\" />\r\n                  </Button>\r\n                  <SwipeableDrawer\r\n                    anchor={anchor}\r\n                    open={state[anchor]}\r\n                    onClose={toggleDrawer(anchor, false)}\r\n                    onOpen={toggleDrawer(anchor, true)}\r\n                  >\r\n                    {list(anchor)}\r\n                  </SwipeableDrawer>\r\n                </React.Fragment>\r\n              ))}\r\n            </div>\r\n\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              TRYVE\r\n              {/* <img className=\"logo\" src={logo} alt=\"...\" /> */}\r\n            </Typography>\r\n\r\n            {auth && (\r\n              <div className=\"authMain\">\r\n                {balance.length ? (\r\n                  balance[0].balance > 0 ? (\r\n                    <div className=\"balance\">\r\n                      <p>\r\n                        Balance : {balance.length ? balance[0].balance : \"0\"}\r\n                      </p>\r\n                    </div>\r\n                  ) : null\r\n                ) : null}\r\n                <IconButton\r\n                  aria-label=\"account of current user\"\r\n                  aria-controls=\"menu-appbar\"\r\n                  aria-haspopup=\"true\"\r\n                  onClick={handleMenu}\r\n                  color=\"inherit\"\r\n                >\r\n                  {userInfo.url ? (\r\n                    <>\r\n                      {/* <span>{userInfo.name}</span> */}\r\n                      <img\r\n                        className=\"userProfile\"\r\n                        src={userInfo.url}\r\n                        alt=\"...\"\r\n                      />\r\n                    </>\r\n                  ) : (\r\n                    <AccountCircle />\r\n                  )}\r\n                  <ExpandMoreIcon />\r\n                </IconButton>\r\n                <Menu\r\n                  id=\"menu-appbar\"\r\n                  anchorEl={anchorEl}\r\n                  anchorOrigin={{\r\n                    vertical: \"top\",\r\n                    horizontal: \"right\",\r\n                  }}\r\n                  keepMounted\r\n                  transformOrigin={{\r\n                    vertical: \"top\",\r\n                    horizontal: \"right\",\r\n                  }}\r\n                  open={open}\r\n                  onClose={() => handleClose()}\r\n                  className=\"cus_menu\"\r\n                >\r\n                  <MenuItem\r\n                    onClick={() => {\r\n                      handleClose();\r\n                      history.push(\"/profile\");\r\n                    }}\r\n                  >\r\n                    <AccountCircleIcon /> <p> Profile</p>\r\n                  </MenuItem>\r\n                  {/* <MenuItem\r\n                    onClick={() => {\r\n                      handleClose();\r\n                      history.push(\"/profile\");\r\n                    }}\r\n                  >\r\n                    <AccountCircleIcon /> <p> All Goals</p>\r\n                  </MenuItem> */}\r\n                  <MenuItem onClick={handleLogout}>\r\n                    <ExitToAppIcon /> <p> Logout</p>\r\n                  </MenuItem>\r\n                </Menu>\r\n              </div>\r\n            )}\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n\r\n      {/* mobile view bottom navigation  */}\r\n      <div className=\"mobileView_bottom_navigat\">\r\n        <div className=\"bottm_navigation\">\r\n          <NavLink\r\n            className=\"sidebar_links_bt\"\r\n            activeClassName=\"active_link\"\r\n            to=\"/selec-goals\"\r\n          >\r\n            <HomeIcon /> <p> Home </p>\r\n          </NavLink>\r\n          <NavLink\r\n            className=\"sidebar_links_bt\"\r\n            activeClassName=\"active_link\"\r\n            to=\"/search-goals\"\r\n          >\r\n            <SearchIcon />\r\n            <p> search </p>\r\n          </NavLink>\r\n\r\n          <NavLink\r\n            className=\"sidebar_links_bt\"\r\n            activeClassName=\"active_link\"\r\n            to=\"/goals-status\"\r\n          >\r\n            <CameraAltIcon /> <p> Verify </p>\r\n          </NavLink>\r\n\r\n          <NavLink\r\n            className=\"sidebar_links_bt\"\r\n            activeClassName=\"active_link\"\r\n            to=\"/feed\"\r\n          >\r\n            <AppsIcon /> <p> Feed </p>\r\n          </NavLink>\r\n          <NavLink\r\n            className=\"sidebar_links_bt\"\r\n            activeClassName=\"active_link\"\r\n            to=\"/profile\"\r\n          >\r\n            <PersonIcon /> <p> Profile </p>\r\n          </NavLink>\r\n\r\n          <NavLink\r\n            className=\"sidebar_links_bt\"\r\n            activeClassName=\"active_link\"\r\n            to=\"/delete\"\r\n          >\r\n            <DeleteIcon /> <p> Delete </p>\r\n          </NavLink>\r\n          {/* <MenuItem className='logout_link' onClick={handleLogout}>\r\n            <ExitToAppIcon />\r\n            <p> Logout</p>\r\n          </MenuItem> */}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","D:\\EINC\\Project\\src\\Components\\SearchInput.jsx",[],"D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\Dashboard\\GoalsTable.jsx",["343","344","345"],"import React, { useEffect } from \"react\";\r\nimport firebase from \"../../../../Config/FirebaseConfig\";\r\nimport { useHistory } from \"react-router-dom\";\r\n// import  from \"firebase/database\";\r\nimport { allWithoutOrggGoals } from \"../../../../GlobalState/CreateSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\nimport PageviewIcon from \"@material-ui/icons/Pageview\";\r\n\r\nconst GoalsTable = ({ selector }) => {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const db = firebase.database();\r\n  const dbRef = db.ref(`withoutOrganization/goals`);\r\n\r\n  // get filter organization goals from database\r\n  const getFilterOrgGoals = () => {\r\n    dbRef.on(\"value\", (snapshot) => {\r\n      let filterOrgGoalsArry = [];\r\n      snapshot.forEach((data) => {\r\n        const getData = data.val();\r\n        const getId = data.key;\r\n        getData.id = getId;\r\n        filterOrgGoalsArry.push(getData);\r\n      });\r\n      dispatch(allWithoutOrggGoals(filterOrgGoalsArry));\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getFilterOrgGoals();\r\n  }, []);\r\n\r\n  // goals delete function\r\n  const handleDeleteGoals = (event) => {\r\n    const isSelectedFilter = selector.filter((val) => val.id === event);\r\n\r\n    if (!isSelectedFilter[0].used) {\r\n      db.ref(`withoutOrganization/goals/${event}`).remove();\r\n    } else {\r\n      alert(\"this goal can not be delete becuase user select\");\r\n    }\r\n    // console.log(selector,event)\r\n  };\r\n\r\n  const goToDetailPage = (event) => {\r\n    history.push(`goals-detail/${event}`);\r\n  };\r\n\r\n  const editSelectedGoal = (event) => {\r\n    history.push(`edit-goal/${event}`);\r\n  };\r\n  // console.log(allOrgGoals)\r\n\r\n  if (!selector.length) {\r\n    return <div>no goals</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"table_container\">\r\n      <div className=\"table_md\">\r\n        <table className=\"goals_table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Image</th>\r\n              <th>Name</th>\r\n              {/* <th>People Joined</th> */}\r\n              <th>Time Limit</th>\r\n              {/* <th>Signed Up</th> */}\r\n              <th>category</th>\r\n              <th>Reward Range</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {selector.map((val) => {\r\n              const { id, url, inputValues, peopleJoined, numberOfDays } = val;\r\n              return (\r\n                <tr key={id}>\r\n                  <td>\r\n                    <img className=\"goals_img\" src={url} alt=\"...\" />\r\n                  </td>\r\n                  <td>{inputValues.eventName}</td>\r\n                  {/* <td>{peopleJoined}</td> */}\r\n                  <td>{inputValues.numberOfDays} days</td>\r\n                  {/* <td>2</td> */}\r\n                  {/* <td>5</td> */}\r\n                  <td>{inputValues.category}</td>\r\n                  <td>{`${inputValues.rewardMin} - ${inputValues.rewardMax}`}</td>\r\n                  <td className=\"actions_btns\">\r\n                    <button onClick={() => editSelectedGoal(id)}>\r\n                      <EditIcon className=\"actions_icons\" />{\" \"}\r\n                    </button>{\" \"}\r\n                    <button onClick={() => handleDeleteGoals(id)}>\r\n                      <DeleteForeverIcon className=\"actions_icons\" />\r\n                    </button>\r\n                    <button\r\n                      className=\"view_icons\"\r\n                      onClick={() => goToDetailPage(id)}\r\n                    >\r\n                      <PageviewIcon />\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoalsTable;\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOutOrganizations\\Categories\\CategoryList.jsx",["346"],"import React, { useEffect, useState } from \"react\";\r\nimport FormDialog from \"../../../../Components/InputPopup\";\r\nimport firebase from \"../../../../Config/FirebaseConfig\";\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nconst CategoryList = () => {\r\n  const database = firebase.database();\r\n  const ref = database.ref(`withoutOrganization/categories`);\r\n  const pushRef = ref.push();\r\n  const [open, setOpen] = React.useState(false);\r\n  let [dbCategory, setDbCategory] = useState([]);\r\n  // set org input value\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  let [category, setCategory] = useState(\"\");\r\n  const handleCategoryInput = (event) => {\r\n    setCategory(event.target.value);\r\n  };\r\n\r\n  // add organization in firebase database\r\n  const addCategory = () => {\r\n    if (category.length > 3) {\r\n      pushRef\r\n        .set({ category: category })\r\n        .then(() => {\r\n          setCategory(\"\");\r\n          handleClose();\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setCategory(\"\");\r\n          handleClose();\r\n        });\r\n    } else {\r\n      alert(\"please enter value or enter max 3 characters\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    ref.on(\"value\", (snapshot) => {\r\n      let categoryArray = [];\r\n      snapshot.forEach((data) => {\r\n        let resData = data.val();\r\n        let dataKey = data.key;\r\n        resData.id = dataKey;\r\n        categoryArray.push(resData);\r\n      });\r\n      setDbCategory(categoryArray);\r\n    });\r\n    // };\r\n    // getCategory();\r\n    // return ()=>{\r\n    //   getCategory()\r\n  }, []);\r\n\r\n  const selector = useSelector((state) => {\r\n    return state.goalReducer;\r\n  });\r\n\r\n  const handleDeleteCategory = (event) => {\r\n    let { category } = event;\r\n    const categoryId = event.id;\r\n    let filterUsedCategory = selector.OrgGoals.filter(\r\n      (val) => val.inputValues.category === category\r\n    );\r\n    if (!filterUsedCategory.length) {\r\n      database\r\n        .ref(`withoutOrganization/categories/${categoryId}`)\r\n        .remove()\r\n        .then(() => {\r\n          console.log(\"deleted\");\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    } else {\r\n      alert(\"this cateogry is used in goals\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"c_list_container\">\r\n      <div className=\"cList_md\">\r\n        <div className=\"cList_sd\">\r\n          <div className=\"categoryList\">\r\n            <div className=\"category_head\">\r\n              <div className=\"tb_tabs_headContent\">\r\n                <p>Category list</p>\r\n              </div>\r\n              <div className=\"addCt_btn\">\r\n                <Button onClick={handleClickOpen} className=\"orngClr \">\r\n                  Add Category\r\n                </Button>\r\n                <FormDialog\r\n                  handleAddFunction={addCategory}\r\n                  handleInputvalue={handleCategoryInput}\r\n                  inputValue={category}\r\n                  open={open}\r\n                  // handleClickOpen={handleClickOpen}\r\n                  handleClose={handleClose}\r\n                  btnValue=\"Add Category\"\r\n                  labelValue=\"Category\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <ul className=\"cList\">\r\n              {dbCategory &&\r\n                dbCategory.map((val) => (\r\n                  <li key={val.id}>\r\n                    <p> {val.category}</p>\r\n                    <button\r\n                      className=\"btn_dlt\"\r\n                      onClick={() => handleDeleteCategory(val)}\r\n                    >\r\n                      <DeleteForeverIcon />\r\n                    </button>\r\n                  </li>\r\n                ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CategoryList;\r\n","D:\\EINC\\Project\\src\\Pages\\UserSide\\Feed\\UsersGoals.jsx",["347","348"],"import React, { useRef, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport ThumbUpAltOutlinedIcon from '@material-ui/icons/ThumbUpAltOutlined'\r\nimport firebase from '../../../Config/FirebaseConfig'\r\nimport SendIcon from '@material-ui/icons/Send'\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever'\r\nimport { send } from 'emailjs-com'\r\nimport AlertDialog from '../../../Components/AlertPopup'\r\nimport dp from '../../../Assets/dp.png'\r\n\r\nconst UsersGoals = () => {\r\n  const db = firebase.database()\r\n\r\n  const selector = useSelector((state) => {\r\n    return state\r\n  })\r\n  const { goalReducer, userReducer } = selector\r\n  // like post\r\n  const handleLikePost = (event, likeEvent) => {\r\n    const checkIsPostLike = userReducer.postLikes.filter(\r\n      (posts) =>\r\n        posts.goalId === event.orgMainId &&\r\n        posts.uid === goalReducer.currentUser.id,\r\n    )\r\n    // console.log(event)\r\n    // if user enrolled in org\r\n    if (goalReducer.currentUser.orgId !== '') {\r\n      if (checkIsPostLike.length) {\r\n        db.ref(\r\n          `organizations/${goalReducer.currentUser.orgId}/likes/${event.orgMainId}/${likeEvent.likeId}`,\r\n        ).update({\r\n          isLike: true,\r\n        })\r\n        // likes increament\r\n        db.ref(\r\n          `organizations/${goalReducer.currentUser.orgId}/submitGoals/${event.orgMainId}`,\r\n        ).update({\r\n          likes: event.likes ? event.likes + 1 : 1,\r\n        })\r\n      } else {\r\n        db.ref(\r\n          `organizations/${goalReducer.currentUser.orgId}/likes/${event.orgMainId}`,\r\n        )\r\n          .push()\r\n          .set({\r\n            uid: goalReducer.currentUser.id,\r\n            isLike: true,\r\n            goalId: event.orgMainId,\r\n          })\r\n        db.ref(\r\n          `organizations/${goalReducer.currentUser.orgId}/submitGoals/${event.orgMainId}`,\r\n        ).update({\r\n          likes: event.likes ? event.likes + 1 : 1,\r\n        })\r\n      }\r\n    }\r\n    // if user is not enrolled in org\r\n    else {\r\n      if (checkIsPostLike.length) {\r\n        db.ref(\r\n          `withoutOrganization/likes/${event.orgMainId}/${likeEvent.likeId}`,\r\n        ).update({\r\n          isLike: true,\r\n        })\r\n        // likes increament\r\n        db.ref(`withoutOrganization/submitGoals/${event.orgMainId}`).update({\r\n          likes: event.likes ? event.likes + 1 : 1,\r\n        })\r\n      } else {\r\n        db.ref(`withoutOrganization/likes/${event.orgMainId}`).push().set({\r\n          uid: goalReducer.currentUser.id,\r\n          isLike: true,\r\n          goalId: event.orgMainId,\r\n        })\r\n        db.ref(\r\n          `organizations/${goalReducer.currentUser.orgId}/submitGoals/${event.orgMainId}`,\r\n        ).update({\r\n          likes: event.likes ? event.likes + 1 : 1,\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  // unlike post\r\n  const handleUnlikePost = (event, subEvent) => {\r\n    // console.log(event)\r\n    if (goalReducer.currentUser.orgId !== '') {\r\n      db.ref(\r\n        `organizations/${goalReducer.currentUser.orgId}/likes/${event.goalId}/${event.likeId}`,\r\n      ).update({\r\n        isLike: false,\r\n      })\r\n      // decreament like\r\n      db.ref(\r\n        `organizations/${goalReducer.currentUser.orgId}/submitGoals/${subEvent.orgMainId}`,\r\n      ).update({\r\n        likes: subEvent.likes - 1,\r\n      })\r\n    } else {\r\n      db.ref(\r\n        `withoutOrganization/likes/${event.goalId}/${event.likeId}`,\r\n      ).update({\r\n        isLike: false,\r\n      })\r\n      db.ref(`withoutOrganization/submitGoals/${subEvent.orgMainId}`).update({\r\n        likes: subEvent.likes - 1,\r\n      })\r\n    }\r\n  }\r\n\r\n  // post report\r\n  let [loading, setLoading] = useState(false)\r\n  let [reportSuccesPopup, setReportSuccesPopup] = useState(false)\r\n  let [reportGoalId,setReportGoalId] = useState('')\r\n  const handleReportPost = (event) => {\r\n    setReportGoalId(event.orgMainId)\r\n    setLoading(true)\r\n    const reportedUserName = goalReducer.currentUser.name\r\n    // console.log(reportedUserName, event)\r\n    // const filterUserEmailToSendNotification =\r\n    userReducer.allUsers.filter((user) => {\r\n      if (user.id === event.userIdMain) {\r\n        // console.log(user)\r\n        send(\r\n          // process.env.REACT_APP_EMAIL_JS_SERVICE_ID,\r\n          // process.env.REACT_APP_EMAIL_JS_TEMPLATE_ID,\r\n          'service_q1galup',\r\n          'template_aq5fbiv',\r\n          {\r\n            to: `${user.email}`,\r\n            to_name: `${event.userName}`,\r\n            from_email_name: 'TRYVE',\r\n            subject: '',\r\n            message: `${reportedUserName} reported your goal please retake good picture. Thanks!`,\r\n            from: 'ansariwaqas310@gmail.com',\r\n            reply_to: 'tryve@gmail.com',\r\n          },\r\n          process.env.REACT_APP_EMAIL_JS_USER_ID,\r\n        )\r\n          .then(() => {\r\n            console.log('success...')\r\n          })\r\n          .catch((err) => {\r\n            console.log('admin Email sending FAILED...', err)\r\n          })\r\n      }\r\n    })\r\n    if (goalReducer.currentUser.orgId !== '') {\r\n      db.ref(\r\n        `organizations/${goalReducer.currentUser.orgId}/submitGoals/${event.orgMainId}`,\r\n      )\r\n        .update({ isReport: true, acceptReport: false })\r\n        .then(() => {\r\n          setLoading(false)\r\n          setReportSuccesPopup(true)\r\n        })\r\n    } else {\r\n      db.ref(`withoutOrganization/submitGoals/${event.orgMainId}`)\r\n        .update({\r\n          isReport: true,\r\n          acceptReport: false,\r\n        })\r\n        .then(() => {\r\n          setLoading(false)\r\n          setReportSuccesPopup(true)\r\n        })\r\n    }\r\n  }\r\n\r\n  // show comment section\r\n  let [showComment, setShowComment] = React.useState(false)\r\n  let [comment, setComment] = React.useState('')\r\n  let [postId, setPostId] = React.useState('')\r\n  let [commentLoad, setCommentLoad] = React.useState(false)\r\n  const bottomRef = useRef(null)\r\n  // show comment section function\r\n  const handleCommentShow = (event) => {\r\n    setShowComment(!showComment)\r\n    if (event.orgMainId === postId) {\r\n      setPostId('')\r\n    } else {\r\n      setPostId(event.orgMainId)\r\n    }\r\n  }\r\n  // set comment input value\r\n  const handleComment = (event) => {\r\n    setComment(event.target.value)\r\n  }\r\n  \r\n\r\n  // set comment in database\r\n  const handleAddComment = (event) => {\r\n    setCommentLoad(true)\r\n    console.log(event, goalReducer.currentUser)\r\n    if (comment.length > 0) {\r\n      if (goalReducer.currentUser.orgId !== '') {\r\n        db.ref(\r\n          `organizations/${goalReducer.currentUser.orgId}/comments/${event.orgMainId}`,\r\n        )\r\n          .push()\r\n          .set({\r\n            uid: goalReducer.currentUser.id,\r\n            userName: goalReducer.currentUser.name,\r\n            userImg: goalReducer.currentUser.url\r\n              ? goalReducer.currentUser.url\r\n              : '',\r\n            comment: comment,\r\n            goalId: event.orgMainId,\r\n          })\r\n        setComment('')\r\n        setCommentLoad(false)\r\n      } else {\r\n        db.ref(`withoutOrganization/comments/${event.orgMainId}`)\r\n          .push()\r\n          .set({\r\n            uid: goalReducer.currentUser.id,\r\n            userName: goalReducer.currentUser.name,\r\n            userImg: goalReducer.currentUser.url\r\n              ? goalReducer.currentUser.url\r\n              : '',\r\n            comment: comment,\r\n            goalId: event.orgMainId,\r\n          })\r\n        setComment('')\r\n        setCommentLoad(false)\r\n      }\r\n    }\r\n    // else {\r\n    //   alert('please enter comment')\r\n    // }\r\n  }\r\n\r\n  const scrollToBottom = () => {\r\n    if (postId || commentLoad) {\r\n      // bottomRef.current.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n  }\r\n\r\n\r\n  React.useEffect(scrollToBottom, [postId, commentLoad,handleAddComment])\r\n  \r\n  // delete comment\r\n  const handleDeleteComment = (event) => {\r\n    if (goalReducer.currentUser.orgId !== '') {\r\n      db.ref(\r\n        `organizations/${goalReducer.currentUser.orgId}/comments/${event.goalId}/${event.commentId}`,\r\n      ).remove()\r\n    }\r\n  }\r\n\r\n  const handleClosePopup = () => {\r\n    setReportSuccesPopup(false)\r\n  }\r\n\r\n  return (\r\n    <div className=\"feedGoalsContainer\">\r\n      {reportSuccesPopup ? (\r\n        <AlertDialog\r\n          handleClose={handleClosePopup}\r\n          open={reportSuccesPopup}\r\n          value=\"Reported Successfull\"\r\n          btnValue=\"OK\"\r\n        />\r\n      ) : null}\r\n      <div className=\"feedGoalsContent\">\r\n        <div className=\"feedGoals \">\r\n          {userReducer.feedGoals.length ? (\r\n            userReducer.feedGoals.map((val, i) => {\r\n              // console.log(val)\r\n              return (\r\n                <div\r\n                  className={\r\n                    i % 2 !== 0\r\n                      ? 'horizontal feedGoalGrid'\r\n                      : 'vertical feedGoalGrid'\r\n                  }\r\n                  key={i}\r\n                >\r\n                  <div className=\"imgLikeBtn\">\r\n                    <img\r\n                      className=\"feedGoalImg\"\r\n                      src={val.uploadImgUlr}\r\n                      alt=\"...\"\r\n                    />\r\n                    {userReducer.postLikes.map((like, j) => {\r\n                      return like.goalId === val.orgMainId &&\r\n                        like.uid === goalReducer.currentUser.id ? (\r\n                        <button\r\n                          className=\"likeBtn likeZ\"\r\n                          onClick={\r\n                            !like.isLike\r\n                              ? () => handleLikePost(val, like)\r\n                              : () => handleUnlikePost(like, val)\r\n                          }\r\n                          key={j}\r\n                        >\r\n                          <ThumbUpAltOutlinedIcon\r\n                            className={like.isLike ? 'liked' : 'unlike'}\r\n                          />\r\n                        </button>\r\n                      ) : null\r\n                    })}\r\n                    <button\r\n                      className=\"likeBtn\"\r\n                      onClick={() => handleLikePost(val, false)}\r\n                    >\r\n                      <ThumbUpAltOutlinedIcon className={'unlike'} />\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"cmntAndReportBtn\">\r\n                    <div className=\"noOfLikes\">\r\n                      <p>{val.likes ? val.likes + ' Likes' : '0 Likes'}</p>\r\n                    </div>\r\n                    <button\r\n                      onClick={() => handleCommentShow(val)}\r\n                      className=\"cmntBtn\"\r\n                    >\r\n                      Comment\r\n                    </button>\r\n                    <button\r\n                      className={val.userIdMain===goalReducer.currentUser.id?'disabled reportBtn' :\"reportBtn\"}\r\n                      onClick={() => handleReportPost(val)}\r\n                      disabled={loading || val.userIdMain===goalReducer.currentUser.id }\r\n                    >\r\n                      {loading && reportGoalId===val.orgMainId ? 'loading...' : 'Report'}\r\n                    </button>\r\n                  </div>\r\n                  {val.orgMainId === postId ? (\r\n                    <div className=\"commentSection\">\r\n                      <ul className=\"commmentList\">\r\n                        {userReducer.comments.length ? (\r\n                          userReducer.comments.map((commentval, k) => {\r\n                            return commentval.goalId === val.orgMainId ? (\r\n                              <li key={k}>\r\n                                <img\r\n                                  src={\r\n                                    commentval.userImg ? commentval.userImg : dp\r\n                                  }\r\n                                  alt=\"...\"\r\n                                />\r\n                                <div className=\"comments\">\r\n                                  <div className=\"cmntLines\">\r\n                                    <h6>{commentval.userName}</h6>\r\n                                    <p>{commentval.comment}</p>\r\n                                  </div>\r\n                                  {commentval.uid ===\r\n                                  goalReducer.currentUser.id ? (\r\n                                    <button\r\n                                      className=\"dltBtn\"\r\n                                      onClick={() =>\r\n                                        handleDeleteComment(commentval)\r\n                                      }\r\n                                      >\r\n                                      <DeleteForeverIcon className=\"dltIcon\" />\r\n                                    </button>\r\n                                  ) : null}\r\n                                </div>\r\n                                  <p className=\"strtBtm\" ref={bottomRef}></p>\r\n                              </li>\r\n                            ) : null\r\n                          })\r\n                        ) : (\r\n                          <p>There is no comment!</p>\r\n                        )}\r\n                      </ul>\r\n                      <div className=\"commentInput\">\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"comment\"\r\n                          id=\"comment\"\r\n                          placeholder=\"Comment\"\r\n                          onChange={handleComment}\r\n                          value={comment}\r\n                        />\r\n                        <button onClick={() => handleAddComment(val)}>\r\n                          <SendIcon className=\"sentIcon\" />\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n              )\r\n            })\r\n          ) : (\r\n            <p>list is empty</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UsersGoals\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\Categories\\CategoryList.jsx",["349"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport FormDialog from \"../../../../Components/InputPopup\";\r\nimport firebase from \"../../../../Config/FirebaseConfig\";\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Button } from \"@material-ui/core\";\r\n// import { allCategories } from \"../../../../GlobalState/CreateSlice\";\r\n\r\nconst CategoryList = () => {\r\n  const { id } = useParams();\r\n  // const dispatch = useDispatch();\r\n  const database = firebase.database();\r\n  const ref = database.ref(`organizations/${id}/categories`);\r\n  const pushRef = ref.push();\r\n  const [open, setOpen] = React.useState(false);\r\n  let [dbCategory, setDbCategory] = useState([]);\r\n  // set org input value\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  let [category, setCategory] = useState(\"\");\r\n  const handleCategoryInput = (event) => {\r\n    setCategory(event.target.value);\r\n  };\r\n\r\n  // add organization in firebase database\r\n  const addCategory = () => {\r\n    if (category.length > 3) {\r\n      pushRef.set({ category: category });\r\n      setCategory(\"\");\r\n      handleClose();\r\n    } else {\r\n      alert(\"please enter value or enter max 3 characters\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // const getCategory = async () => {\r\n    ref.on(\"value\", (snapshot) => {\r\n      let categoryArray = [];\r\n      snapshot.forEach((data) => {\r\n        let resData = data.val();\r\n        let dataKey = data.key;\r\n        resData.id = dataKey;\r\n        categoryArray.push(resData);\r\n      });\r\n      // dispatch(allCategories(categoryArray))\r\n      setDbCategory(categoryArray);\r\n    });\r\n  }, []);\r\n\r\n  const selector = useSelector((state) => {\r\n    return state.goalReducer;\r\n  });\r\n\r\n  const handleDeleteCategory = (event) => {\r\n    let { category } = event;\r\n    const categoryId = event.id;\r\n    let filterUsedCategory = selector.OrgGoals.filter(\r\n      (val) => val.inputValues.category === category\r\n    );\r\n    if (!filterUsedCategory.length) {\r\n      database\r\n        .ref(`organizations/${id}/categories/${categoryId}`)\r\n        .remove()\r\n        .then(() => {\r\n          console.log(\"deleted\");\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    } else {\r\n      alert(\"this cateogry is used in goals\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"c_list_container\">\r\n      <div className=\"cList_md\">\r\n        <div className=\"cList_sd\">\r\n          <div className=\"categoryList\">\r\n            <div className=\"category_head\">\r\n              <div className=\"tb_tabs_headContent\">\r\n                <p>Category list</p>\r\n              </div>\r\n              <div className=\"addCt_btn\">\r\n                <Button onClick={handleClickOpen} className=\"orngClr \">\r\n                  Add Category\r\n                </Button>\r\n                <FormDialog\r\n                  handleAddFunction={addCategory}\r\n                  handleInputvalue={handleCategoryInput}\r\n                  inputValue={category}\r\n                  open={open}\r\n                  // handleClickOpen={handleClickOpen}\r\n                  handleClose={handleClose}\r\n                  btnValue=\"Add Category\"\r\n                  labelValue=\"Category\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <ul className=\"cList\">\r\n              {dbCategory &&\r\n                dbCategory.map((val) => (\r\n                  <li key={val.id}>\r\n                    <p> {val.category}</p>\r\n                    <button\r\n                      className=\"btn_dlt\"\r\n                      onClick={() => handleDeleteCategory(val)}\r\n                    >\r\n                      <DeleteForeverIcon />\r\n                    </button>\r\n                  </li>\r\n                ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CategoryList;\r\n","D:\\EINC\\Project\\src\\Pages\\UserSide\\AllGoalsOfOrganization\\GoalsTabs.jsx",["350"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\nimport Box from '@material-ui/core/Box'\r\nimport { useSelector } from 'react-redux'\r\nimport firebase from '../../../Config/FirebaseConfig'\r\nimport { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport { useHistory } from 'react-router'\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`scrollable-auto-tabpanel-${index}`}\r\n      aria-labelledby={`scrollable-auto-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          {/* <Typography>{children}</Typography> */}\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n}\r\n\r\n\r\n\r\nexport default function GoalsTabs() {\r\n  const history = useHistory()\r\n  const db = firebase.database()\r\n\r\n\r\n  const selector = useSelector((state) => {\r\n    return state\r\n  })\r\n  const { userReducer } = selector\r\n\r\n  // go to goal detail page\r\n  const handleDetailPage = (event) => {\r\n    // console.log(event)\r\n    history.push(`/goal-detail/${event.id}`)\r\n  }\r\n  const handleDetailPageMyGoal = (event) => {\r\n    // console.log(event)\r\n\r\n    history.push(`/mygoal-detail/${event.id}`)\r\n  }\r\n\r\n  // get cateogires\r\n  let [category, setCategory] = useState([])\r\n  const getCategories = (parameter) => {\r\n    db.ref(parameter).on('value', (snapshot) => {\r\n      let categoryArray = []\r\n      snapshot.forEach((data) => {\r\n        const resData = data.val()\r\n        const resKey = data.key\r\n        resData.CategoryId = resKey\r\n        categoryArray.push(resData)\r\n      })\r\n      setCategory(categoryArray)\r\n    })\r\n  }\r\n  useEffect(() => {\r\n    if (selector.goalReducer.currentUser.orgId !== '') {\r\n      getCategories(\r\n        `organizations/${selector.goalReducer.currentUser.orgId}/categories`,\r\n      )\r\n    } else {\r\n      getCategories(`withoutOrganization/categories`)\r\n    }\r\n    return () => {\r\n      setCategory([])\r\n    }\r\n  }, [])\r\n\r\n\r\n  // console.log(userReducer)\r\n  return (\r\n    <div className=\"allGoals_Cards\">\r\n      <div className=\"allGoals_cLinks myListHead\">\r\n        <h3 className=\"category_head sCategoryHead\">My List</h3>\r\n        <Link to=\"/selec-goals\" className=\"b_link\">\r\n          See All\r\n        </Link>\r\n      </div>\r\n      <div className=\"cUserGoals sGoal_md\">\r\n        {userReducer.selectedGoals.slice(0, 3).map((val, k) => {\r\n          return (\r\n            <div className=\"cUserG\" key={k}>\r\n              <div\r\n                className=\"goalsImg\"\r\n                onClick={() => handleDetailPageMyGoal(val)}\r\n              >\r\n                <img src={val.url} alt=\"...\" />\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n      {category.map((val) => (\r\n        <div key={val.CategoryId}>\r\n          <div className=\"allGoals_cLinks\">\r\n            <h3 className=\"category_head sCategoryHead\">{val.category}</h3>\r\n            <Link to=\"/search-goals\"  className=\"b_link\">\r\n              See All\r\n            </Link>\r\n          </div>\r\n          <div className=\"sGoal_md\">\r\n            {userReducer.allGoalsOfOrg.map((goal, i) => {\r\n              return (\r\n                <div\r\n                  className=\"verifyGoals\"\r\n                  style={\r\n                    goal.inputValues.category !== val.category &&\r\n                    userReducer.allGoalsOfOrg.length - 1 !== i\r\n                      ? { display: 'none' }\r\n                      : null\r\n                  }\r\n                  key={goal.id}\r\n                >\r\n                  {goal.inputValues.category === val.category ? (\r\n                    <>\r\n                      <div\r\n                        className=\"goalsImg\"\r\n                        onClick={() => handleDetailPage(goal)}\r\n                      >\r\n                        <img src={goal.url} alt=\"...\" />\r\n                      </div>\r\n                    </>\r\n                  ) : null}\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\SubmitGoals\\ApprovedForm.jsx",[],"D:\\EINC\\Project\\src\\Components\\Button\\Button.jsx",[],"D:\\EINC\\Project\\src\\Components\\InputPopup.jsx",[],"D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\Dashboard\\GoalsTable.jsx",["351"],"import React, { useEffect } from \"react\";\r\nimport firebase from \"../../../../Config/FirebaseConfig\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n// import  from \"firebase/database\";\r\nimport { allFilterOrgGoals } from \"../../../../GlobalState/CreateSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\nimport PageviewIcon from \"@material-ui/icons/Pageview\";\r\n\r\nconst GoalsTable = ({selector}) => {\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n  const dispatch = useDispatch();\r\n  const db = firebase.database();\r\n  const dbRef = db.ref(`organizations/${id}/goals`);\r\n \r\n\r\n  // get filter organization goals from database \r\n  const getFilterOrgGoals = () => {\r\n    dbRef.on(\"value\", (snapshot) => {\r\n      let filterOrgGoalsArry = [];\r\n      snapshot.forEach((data) => {\r\n        const getData = data.val();\r\n        const getId = data.key;\r\n        getData.id = getId;\r\n        filterOrgGoalsArry.push(getData);\r\n      });\r\n      dispatch(allFilterOrgGoals(filterOrgGoalsArry));\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getFilterOrgGoals();\r\n  }, []);\r\n\r\n  // goals delete function\r\n  const handleDeleteGoals = (event) => {\r\n    const isSelectedFilter = selector.filter((val)=>val.id===event)\r\n    // console.log(selector,event,isSelectedFilter)\r\n    if(!isSelectedFilter[0].used){\r\n      db.ref(`organizations/${id}/goals/${event}`).remove();\r\n    }else {\r\n      alert('this goal can not be delete becuase user select')\r\n    }\r\n  };\r\n\r\n  const goToDetailPage = (event) => {\r\n    history.push(`goals-detail/${event}`);\r\n  };\r\n\r\n  const editSelectedGoal = (event) => {\r\n    history.push(`edit-goal/${event}`);\r\n  };\r\n  // console.log(allOrgGoals)\r\n\r\n  if (!selector.length) {\r\n    return <div>no goals</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"table_container\">\r\n      <div className=\"table_md\">\r\n        <table className=\"goals_table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Image</th>\r\n              <th>Name</th>\r\n              <th>Time Limit</th>\r\n              <th>category</th>\r\n              <th>Reward Range</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {selector.map((val) => {\r\n              const { id, url, inputValues } = val;\r\n              return (\r\n                <tr key={id}>\r\n                  <td>\r\n                    <img className=\"goals_img\" src={url} alt=\"...\" />\r\n                  </td>\r\n                  <td>{inputValues.eventName}</td>\r\n                  <td>{inputValues.numberOfDays} days</td>\r\n                  <td>{inputValues.category}</td>\r\n                  <td>{`${inputValues.rewardMin} - ${inputValues.rewardMax}`}</td>\r\n                  <td className=\"actions_btns\">\r\n                    <button onClick={() => editSelectedGoal(id)}>\r\n                      <EditIcon className=\"actions_icons\" />{\" \"}\r\n                    </button>{\" \"}\r\n                    <button onClick={() => handleDeleteGoals(id)}>\r\n                      <DeleteForeverIcon className=\"actions_icons\" />\r\n                    </button>\r\n                    <button\r\n                      className=\"view_icons\"\r\n                      onClick={() => goToDetailPage(id)}\r\n                    >\r\n                      <PageviewIcon />\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoalsTable;\r\n","D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\WithOrganizations\\GoalsDetailPage\\GoalsDetail.jsx",[],"D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\OrganizationLinks\\MainOrganization.jsx",["352","353","354"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport MiniDrawer from \"../Sidebar\";\r\n// import AddOrganization from \"./AddOrgPopUp\";\r\nimport { useSelector } from \"react-redux\";\r\nimport firebase from \"../../../Config/FirebaseConfig\";\r\nimport InputPopup from \"../../../Components/InputPopup\";\r\nimport { Button, IconButton, Tooltip } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\n// import \"./Org.css\";\r\n\r\nconst MainOrganization = () => {\r\n  const database = firebase.database();\r\n  const ref = database.ref(\"organizations\");\r\n  const pushRef = ref.push();\r\n  // close dialog box\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  useEffect(() => {}, []);\r\n\r\n  const DeleteOrganization = () => {\r\n    console.log(\"delete\");\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  // set org input value\r\n  let [organization, setOrganization] = useState(\"\");\r\n\r\n  const handleOrganization = (event) => {\r\n    setOrganization(event.target.value);\r\n  };\r\n  // add organization in firebase database\r\n  const addOrganization = () => {\r\n    if (organization.length > 3) {\r\n      pushRef\r\n        .set({ orgName: organization })\r\n        .then(() => {\r\n          handleClose();\r\n          setOrganization(\"\");\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setOrganization(\"\");\r\n          handleClose();\r\n        });\r\n    } else {\r\n      alert(\"please enter value or enter max 3 characters\");\r\n    }\r\n  };\r\n\r\n  const organizations = useSelector((state) => {\r\n    return state.goalReducer.organizations;\r\n  });\r\n\r\n  return (\r\n    <div className=\"mainOrg_contianer\">\r\n      <div className=\"mainOrg_md\">\r\n        <div className=\"mainOrg_sd\">\r\n          <div className=\"dashboard_left_content\">\r\n            <MiniDrawer linksShow />\r\n          </div>\r\n          <div className=\"org_main_right\">\r\n            <div className=\"org_body\">\r\n              <div className=\"org_links\">\r\n                {organizations.map((val) => (\r\n                  <Link\r\n                    className=\"org_btn_links\"\r\n                    to={`/organizations/${val.id}/dashboard`}\r\n                    key={val.id}\r\n                  >\r\n                    {val.orgName}\r\n                  </Link>\r\n                ))}\r\n                <div className=\"withoutOrg\">\r\n                  <Link\r\n                    className=\"org_btn_links\"\r\n                    to={`/without-organization/dashboard`}\r\n                    // key={val.id}\r\n                  >\r\n                    {/* {val.orgName} */}\r\n                    Without Organization\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n              <div className=\"new_org\">\r\n                <Button onClick={handleClickOpen} className=\"orngClr \">\r\n                  Add Organization\r\n                </Button>\r\n                <InputPopup\r\n                  handleAddFunction={addOrganization}\r\n                  handleInputvalue={handleOrganization}\r\n                  inputValue={organization}\r\n                  // handleClickOpen={handleClickOpen}\r\n                  open={open}\r\n                  handleClose={handleClose}\r\n                  labelValue=\"Organization name\"\r\n                  btnValue=\"Add Organization\"\r\n                />\r\n              </div>\r\n              {/*<Tooltip title=\"Delete\">\r\n                <IconButton onClick={DeleteOrganization}>\r\n                  <DeleteIcon fontSize=\"small\" color=\"orangered\" />\r\n                </IconButton>\r\n                </Tooltip>*/}\r\n              <div className=\"new_org\">\r\n                <Button onClick={DeleteOrganization} className=\"orngClr \">\r\n                  Delete Organizati\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainOrganization;\r\n","D:\\EINC\\Project\\src\\Pages\\UserSide\\GoalsStatus\\StatusTabs.jsx",[],"D:\\EINC\\Project\\src\\Pages\\UserSide\\MyGoal\\DonutChart.jsx",[],"D:\\EINC\\Project\\src\\Pages\\UserSide\\MyGoal\\MyGoalsList.jsx",[],"D:\\EINC\\Project\\src\\Pages\\UserSide\\MyGoal\\LineChart.jsx",["355","356"],"import React from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport Slider from 'react-slick'\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\r\n\r\nconst data = {\r\n  labels: ['1D', '1W', '1M', '3M', '1Y'],\r\n  datasets: [\r\n    {\r\n      label: '# of Votes',\r\n      data: [4, 19, 3, 5, 2],\r\n      fill: false,\r\n      backgroundColor: 'orange',\r\n      borderColor: 'orange',\r\n    },\r\n  ],\r\n}\r\n\r\nconst options = {\r\n  plugins: {\r\n    legend: {\r\n      display: false,\r\n    },\r\n  },\r\n  scales: {\r\n    x: {\r\n      grid: {\r\n        display: false,\r\n      },\r\n    },\r\n    y: {\r\n      grid: {\r\n        display: false,\r\n        drawBorder: false,\r\n        lineWidth: 0.5,\r\n      },\r\n      ticks: {\r\n        display: false\r\n    }\r\n    },\r\n  },\r\n}\r\n\r\nfunction SampleNextArrow(props) {\r\n  const { className, style, onClick } = props\r\n  return (\r\n    <div\r\n      className={className}\r\n      // style={{ ...style, display: \"block\", background: \"red\" }}\r\n      onClick={onClick}\r\n    >\r\n      <ArrowBackIosIcon className='slideArrow nextIc'/>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction SamplePrevArrow(props) {\r\n  const { className, style, onClick } = props\r\n  return (\r\n    <div className={className} onClick={onClick}>\r\n      <ArrowBackIosIcon className='slideArrow' />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst LineChart = () => {\r\n  const settings = {\r\n    dots: false,\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 1,\r\n    slidesToScroll: 1,\r\n    nextArrow: <SampleNextArrow />,\r\n    prevArrow: <SamplePrevArrow />,\r\n    // arrows:false\r\n  }\r\n  return (\r\n    <>\r\n      <Slider {...settings}>\r\n          <Line className='lineChartMain' data={data} options={options} />\r\n          <Line className='lineChartMain' data={data} options={options} />\r\n          <Line className='lineChartMain' data={data} options={options} />\r\n      </Slider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default LineChart\r\n","D:\\EINC\\Project\\src\\Pages\\UserSide\\GoalsStatus\\GoalCard.jsx",[],"D:\\EINC\\Project\\src\\Pages\\DashboardScreens\\OrganizationLinks\\AddOrgPopUp.jsx",[],"D:\\EINC\\Project\\src\\Pages\\UserSide\\Delete\\index.js",[],{"ruleId":"357","replacedBy":"358"},{"ruleId":"359","replacedBy":"360"},{"ruleId":"361","severity":1,"message":"362","line":89,"column":6,"nodeType":"363","endLine":89,"endColumn":8,"suggestions":"364"},{"ruleId":"365","severity":1,"message":"366","line":4,"column":8,"nodeType":"367","messageId":"368","endLine":4,"endColumn":14},{"ruleId":"365","severity":1,"message":"369","line":29,"column":8,"nodeType":"367","messageId":"368","endLine":29,"endColumn":24},{"ruleId":"365","severity":1,"message":"370","line":34,"column":8,"nodeType":"367","messageId":"368","endLine":34,"endColumn":14},{"ruleId":"361","severity":1,"message":"371","line":47,"column":6,"nodeType":"363","endLine":47,"endColumn":8,"suggestions":"372"},{"ruleId":"361","severity":1,"message":"373","line":34,"column":6,"nodeType":"363","endLine":34,"endColumn":8,"suggestions":"374"},{"ruleId":"361","severity":1,"message":"375","line":35,"column":6,"nodeType":"363","endLine":35,"endColumn":8,"suggestions":"376"},{"ruleId":"361","severity":1,"message":"377","line":71,"column":3,"nodeType":"367","endLine":71,"endColumn":12,"suggestions":"378"},{"ruleId":"361","severity":1,"message":"375","line":27,"column":6,"nodeType":"363","endLine":27,"endColumn":8,"suggestions":"379"},{"ruleId":"361","severity":1,"message":"380","line":24,"column":6,"nodeType":"363","endLine":24,"endColumn":8,"suggestions":"381"},{"ruleId":"361","severity":1,"message":"382","line":74,"column":5,"nodeType":"363","endLine":74,"endColumn":7,"suggestions":"383"},{"ruleId":"361","severity":1,"message":"384","line":49,"column":6,"nodeType":"363","endLine":49,"endColumn":8,"suggestions":"385"},{"ruleId":"361","severity":1,"message":"386","line":72,"column":6,"nodeType":"363","endLine":72,"endColumn":8,"suggestions":"387"},{"ruleId":"361","severity":1,"message":"382","line":71,"column":6,"nodeType":"363","endLine":71,"endColumn":8,"suggestions":"388"},{"ruleId":"361","severity":1,"message":"384","line":45,"column":6,"nodeType":"363","endLine":45,"endColumn":8,"suggestions":"389"},{"ruleId":"361","severity":1,"message":"380","line":24,"column":6,"nodeType":"363","endLine":24,"endColumn":8,"suggestions":"390"},{"ruleId":"361","severity":1,"message":"391","line":118,"column":6,"nodeType":"363","endLine":118,"endColumn":8,"suggestions":"392"},{"ruleId":"361","severity":1,"message":"386","line":67,"column":6,"nodeType":"363","endLine":67,"endColumn":8,"suggestions":"393"},{"ruleId":"361","severity":1,"message":"394","line":122,"column":6,"nodeType":"363","endLine":122,"endColumn":8,"suggestions":"395"},{"ruleId":"396","severity":1,"message":"397","line":74,"column":35,"nodeType":"398","messageId":"399","endLine":74,"endColumn":37},{"ruleId":"396","severity":1,"message":"397","line":99,"column":35,"nodeType":"398","messageId":"399","endLine":99,"endColumn":37},{"ruleId":"361","severity":1,"message":"400","line":111,"column":6,"nodeType":"363","endLine":111,"endColumn":8,"suggestions":"401"},{"ruleId":"361","severity":1,"message":"402","line":41,"column":6,"nodeType":"363","endLine":41,"endColumn":8,"suggestions":"403"},{"ruleId":"365","severity":1,"message":"404","line":19,"column":9,"nodeType":"367","messageId":"368","endLine":19,"endColumn":19},{"ruleId":"361","severity":1,"message":"405","line":84,"column":6,"nodeType":"363","endLine":84,"endColumn":8,"suggestions":"406"},{"ruleId":"407","severity":1,"message":"408","line":108,"column":28,"nodeType":"409","messageId":"410","endLine":108,"endColumn":30},{"ruleId":"361","severity":1,"message":"411","line":29,"column":5,"nodeType":"363","endLine":29,"endColumn":7,"suggestions":"412"},{"ruleId":"396","severity":1,"message":"397","line":145,"column":34,"nodeType":"398","messageId":"399","endLine":145,"endColumn":36},{"ruleId":"396","severity":1,"message":"397","line":180,"column":34,"nodeType":"398","messageId":"399","endLine":180,"endColumn":36},{"ruleId":"396","severity":1,"message":"397","line":190,"column":65,"nodeType":"398","messageId":"399","endLine":190,"endColumn":67},{"ruleId":"396","severity":1,"message":"397","line":245,"column":31,"nodeType":"398","messageId":"399","endLine":245,"endColumn":33},{"ruleId":"396","severity":1,"message":"397","line":156,"column":34,"nodeType":"398","messageId":"399","endLine":156,"endColumn":36},{"ruleId":"396","severity":1,"message":"397","line":193,"column":34,"nodeType":"398","messageId":"399","endLine":193,"endColumn":36},{"ruleId":"396","severity":1,"message":"397","line":206,"column":65,"nodeType":"398","messageId":"399","endLine":206,"endColumn":67},{"ruleId":"396","severity":1,"message":"397","line":275,"column":31,"nodeType":"398","messageId":"399","endLine":275,"endColumn":33},{"ruleId":"361","severity":1,"message":"413","line":32,"column":6,"nodeType":"363","endLine":32,"endColumn":8,"suggestions":"414"},{"ruleId":"361","severity":1,"message":"415","line":96,"column":6,"nodeType":"363","endLine":96,"endColumn":8,"suggestions":"416"},{"ruleId":"396","severity":1,"message":"397","line":187,"column":35,"nodeType":"398","messageId":"399","endLine":187,"endColumn":37},{"ruleId":"396","severity":1,"message":"397","line":210,"column":35,"nodeType":"398","messageId":"399","endLine":210,"endColumn":37},{"ruleId":"361","severity":1,"message":"417","line":222,"column":6,"nodeType":"363","endLine":222,"endColumn":8,"suggestions":"418"},{"ruleId":"361","severity":1,"message":"384","line":33,"column":6,"nodeType":"363","endLine":33,"endColumn":8,"suggestions":"419"},{"ruleId":"365","severity":1,"message":"420","line":78,"column":45,"nodeType":"367","messageId":"368","endLine":78,"endColumn":57},{"ruleId":"365","severity":1,"message":"421","line":78,"column":59,"nodeType":"367","messageId":"368","endLine":78,"endColumn":71},{"ruleId":"361","severity":1,"message":"422","line":62,"column":6,"nodeType":"363","endLine":62,"endColumn":8,"suggestions":"423"},{"ruleId":"396","severity":1,"message":"397","line":121,"column":40,"nodeType":"398","messageId":"399","endLine":121,"endColumn":42},{"ruleId":"361","severity":1,"message":"424","line":192,"column":9,"nodeType":"425","endLine":231,"endColumn":4,"suggestions":"426"},{"ruleId":"361","severity":1,"message":"422","line":56,"column":6,"nodeType":"363","endLine":56,"endColumn":8,"suggestions":"427"},{"ruleId":"361","severity":1,"message":"402","line":86,"column":6,"nodeType":"363","endLine":86,"endColumn":8,"suggestions":"428"},{"ruleId":"361","severity":1,"message":"384","line":35,"column":6,"nodeType":"363","endLine":35,"endColumn":8,"suggestions":"429"},{"ruleId":"365","severity":1,"message":"430","line":8,"column":18,"nodeType":"367","messageId":"368","endLine":8,"endColumn":28},{"ruleId":"365","severity":1,"message":"431","line":8,"column":30,"nodeType":"367","messageId":"368","endLine":8,"endColumn":37},{"ruleId":"365","severity":1,"message":"432","line":9,"column":8,"nodeType":"367","messageId":"368","endLine":9,"endColumn":18},{"ruleId":"365","severity":1,"message":"433","line":45,"column":22,"nodeType":"367","messageId":"368","endLine":45,"endColumn":27},{"ruleId":"365","severity":1,"message":"433","line":58,"column":22,"nodeType":"367","messageId":"368","endLine":58,"endColumn":27},"no-native-reassign",["434"],"no-negated-in-lhs",["435"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'auth', 'db', and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["436"],"no-unused-vars","'logger' is defined but never used.","Identifier","unusedVar","'VerificationPage' is defined but never used.","'Delete' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'userDetail'. Either include them or remove the dependency array.",["437"],"React Hook useEffect has missing dependencies: 'id' and 'selector.userReducer.allGoalsOfOrg'. Either include them or remove the dependency array.",["438"],"React Hook useEffect has missing dependencies: 'id' and 'selector.userReducer.selectedGoals'. Either include them or remove the dependency array.",["439"],"React Hook useEffect contains a call to 'setLoader'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [loader, timeLeft, calculateTime] as a second argument to the useEffect Hook.",["440"],["441"],"React Hook useEffect has missing dependencies: 'goal' and 'goals'. Either include them or remove the dependency array.",["442"],"React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.",["443"],"React Hook useEffect has a missing dependency: 'getFilterOrgGoals'. Either include it or remove the dependency array.",["444"],"React Hook useEffect has missing dependencies: 'getCategories', 'goal', and 'goals'. Either include them or remove the dependency array.",["445"],["446"],["447"],["448"],"React Hook useEffect has missing dependencies: 'dispatch', 'getFilterOrgGoals', and 'id'. Either include them or remove the dependency array.",["449"],["450"],"React Hook useEffect has missing dependencies: 'dispatch' and 'getFilterOrgGoals'. Either include them or remove the dependency array.",["451"],"array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'db', 'dispatch', 'getGoals', 'getSubmittedGoalsOfUser', 'goalReducer.currentUser.email', 'goalReducer.currentUser.orgId', and 'userDetail.goalReducer.currentUser.orgId'. Either include them or remove the dependency array.",["452"],"React Hook useEffect has missing dependencies: 'getCategories' and 'selector.goalReducer.currentUser.orgId'. Either include them or remove the dependency array.",["453"],"'submitGoal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllUsersGoals', 'getGoalsComments', 'getGoalsLikes', and 'userDetail.orgId'. Either include them or remove the dependency array.",["454"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["455"],"React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["456"],"React Hook useEffect has missing dependencies: 'dispatch' and 'userInfo'. Either include them or remove the dependency array.",["457"],"React Hook useEffect has missing dependencies: 'db', 'dispatch', 'getSelectedGoalsOfUser', 'goalReducer.currentUser.email', 'goalReducer.currentUser.orgId', and 'userDetail.goalReducer.currentUser.orgId'. Either include them or remove the dependency array.",["458"],["459"],"'peopleJoined' is assigned a value but never used.","'numberOfDays' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'ref'. Either include it or remove the dependency array.",["460"],"The 'handleAddComment' function makes the dependencies of useEffect Hook (at line 240) change on every render. To fix this, wrap the definition of 'handleAddComment' in its own useCallback() Hook.","VariableDeclarator",["461"],["462"],["463"],["464"],"'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'DeleteIcon' is defined but never used.","'style' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},{"desc":"471","fix":"475"},{"desc":"476","fix":"477"},{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},{"desc":"482","fix":"483"},{"desc":"478","fix":"484"},{"desc":"480","fix":"485"},{"desc":"476","fix":"486"},{"desc":"487","fix":"488"},{"desc":"482","fix":"489"},{"desc":"490","fix":"491"},{"desc":"492","fix":"493"},{"desc":"494","fix":"495"},{"desc":"496","fix":"497"},{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"480","fix":"506"},{"desc":"507","fix":"508"},{"desc":"509","fix":"510"},{"desc":"507","fix":"511"},{"desc":"494","fix":"512"},{"desc":"480","fix":"513"},"Update the dependencies array to be: [auth, db, dispatch]",{"range":"514","text":"515"},"Update the dependencies array to be: [dispatch, userDetail]",{"range":"516","text":"517"},"Update the dependencies array to be: [id, selector.userReducer.allGoalsOfOrg]",{"range":"518","text":"519"},"Update the dependencies array to be: [id, selector.userReducer.selectedGoals]",{"range":"520","text":"521"},"Add dependencies array: [loader, timeLeft, calculateTime]",{"range":"522","text":"523"},{"range":"524","text":"521"},"Update the dependencies array to be: [goal, goals]",{"range":"525","text":"526"},"Update the dependencies array to be: [getCategories]",{"range":"527","text":"528"},"Update the dependencies array to be: [getFilterOrgGoals]",{"range":"529","text":"530"},"Update the dependencies array to be: [getCategories, goal, goals]",{"range":"531","text":"532"},{"range":"533","text":"528"},{"range":"534","text":"530"},{"range":"535","text":"526"},"Update the dependencies array to be: [dispatch, getFilterOrgGoals, id]",{"range":"536","text":"537"},{"range":"538","text":"532"},"Update the dependencies array to be: [dispatch, getFilterOrgGoals]",{"range":"539","text":"540"},"Update the dependencies array to be: [db, dispatch, getGoals, getSubmittedGoalsOfUser, goalReducer.currentUser.email, goalReducer.currentUser.orgId, userDetail.goalReducer.currentUser.orgId]",{"range":"541","text":"542"},"Update the dependencies array to be: [getCategories, selector.goalReducer.currentUser.orgId]",{"range":"543","text":"544"},"Update the dependencies array to be: [getAllUsersGoals, getGoalsComments, getGoalsLikes, userDetail.orgId]",{"range":"545","text":"546"},"Update the dependencies array to be: [dispatch]",{"range":"547","text":"548"},"Update the dependencies array to be: [dispatch, id]",{"range":"549","text":"550"},"Update the dependencies array to be: [dispatch, userInfo]",{"range":"551","text":"552"},"Update the dependencies array to be: [db, dispatch, getSelectedGoalsOfUser, goalReducer.currentUser.email, goalReducer.currentUser.orgId, userDetail.goalReducer.currentUser.orgId]",{"range":"553","text":"554"},{"range":"555","text":"530"},"Update the dependencies array to be: [ref]",{"range":"556","text":"557"},"Wrap the definition of 'handleAddComment' in its own useCallback() Hook.",{"range":"558","text":"559"},{"range":"560","text":"557"},{"range":"561","text":"544"},{"range":"562","text":"530"},[2754,2756],"[auth, db, dispatch]",[1556,1558],"[dispatch, userDetail]",[1339,1341],"[id, selector.userReducer.allGoalsOfOrg]",[1260,1262],"[id, selector.userReducer.selectedGoals]",[2752,2752],", [loader, timeLeft, calculateTime]",[950,952],[862,864],"[goal, goals]",[2206,2208],"[getCategories]",[1594,1596],"[getFilterOrgGoals]",[2058,2060],"[getCategories, goal, goals]",[2205,2207],[1506,1508],[880,882],[3599,3601],"[dispatch, getFilterOrgGoals, id]",[2089,2091],[3723,3725],"[dispatch, getFilterOrgGoals]",[3854,3856],"[db, dispatch, getGoals, getSubmittedGoalsOfUser, goalReducer.currentUser.email, goalReducer.currentUser.orgId, userDetail.goalReducer.currentUser.orgId]",[1215,1217],"[getCategories, selector.goalReducer.currentUser.orgId]",[2906,2908],"[getAllUsersGoals, getGoalsComments, getGoalsLikes, userDetail.orgId]",[917,919],"[dispatch]",[993,995],"[dispatch, id]",[3208,3210],"[dispatch, userInfo]",[7467,7469],"[db, dispatch, getSelectedGoalsOfUser, goalReducer.currentUser.email, goalReducer.currentUser.orgId, userDetail.goalReducer.currentUser.orgId]",[1160,1162],[1749,1751],"[ref]",[6257,7492],"useCallback((event) => {\r\n    setCommentLoad(true)\r\n    console.log(event, goalReducer.currentUser)\r\n    if (comment.length > 0) {\r\n      if (goalReducer.currentUser.orgId !== '') {\r\n        db.ref(\r\n          `organizations/${goalReducer.currentUser.orgId}/comments/${event.orgMainId}`,\r\n        )\r\n          .push()\r\n          .set({\r\n            uid: goalReducer.currentUser.id,\r\n            userName: goalReducer.currentUser.name,\r\n            userImg: goalReducer.currentUser.url\r\n              ? goalReducer.currentUser.url\r\n              : '',\r\n            comment: comment,\r\n            goalId: event.orgMainId,\r\n          })\r\n        setComment('')\r\n        setCommentLoad(false)\r\n      } else {\r\n        db.ref(`withoutOrganization/comments/${event.orgMainId}`)\r\n          .push()\r\n          .set({\r\n            uid: goalReducer.currentUser.id,\r\n            userName: goalReducer.currentUser.name,\r\n            userImg: goalReducer.currentUser.url\r\n              ? goalReducer.currentUser.url\r\n              : '',\r\n            comment: comment,\r\n            goalId: event.orgMainId,\r\n          })\r\n        setComment('')\r\n        setCommentLoad(false)\r\n      }\r\n    }\r\n    // else {\r\n    //   alert('please enter comment')\r\n    // }\r\n  })",[1771,1773],[2197,2199],[1200,1202]]